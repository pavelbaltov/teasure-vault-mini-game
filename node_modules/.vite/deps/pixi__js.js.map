{
  "version": 3,
  "sources": ["../../@pixi/mixin-cache-as-bitmap/src/index.ts", "../../@pixi/mixin-get-child-by-name/src/index.ts", "../../@pixi/mixin-get-global-position/src/index.ts", "../../@pixi/filter-alpha/lib/alpha.mjs", "../../@pixi/filter-alpha/src/AlphaFilter.ts", "../../@pixi/filter-blur/src/generateBlurFragSource.ts", "../../@pixi/filter-blur/src/generateBlurVertSource.ts", "../../@pixi/filter-blur/src/BlurFilterPass.ts", "../../@pixi/filter-blur/src/BlurFilter.ts", "../../@pixi/filter-color-matrix/lib/colorMatrix.mjs", "../../@pixi/filter-color-matrix/src/ColorMatrixFilter.ts", "../../@pixi/filter-displacement/lib/displacement.mjs", "../../@pixi/filter-displacement/lib/displacement2.mjs", "../../@pixi/filter-displacement/src/DisplacementFilter.ts", "../../@pixi/filter-fxaa/lib/fxaa.mjs", "../../@pixi/filter-fxaa/lib/fxaa2.mjs", "../../@pixi/filter-fxaa/src/FXAAFilter.ts", "../../@pixi/filter-noise/lib/noise.mjs", "../../@pixi/filter-noise/src/NoiseFilter.ts", "../../pixi.js/src/filters.ts", "../../@pixi/events/src/EventTicker.ts", "../../@pixi/events/src/FederatedEvent.ts", "../../@pixi/events/src/FederatedMouseEvent.ts", "../../@pixi/events/src/FederatedPointerEvent.ts", "../../@pixi/events/src/FederatedWheelEvent.ts", "../../@pixi/events/src/EventBoundary.ts", "../../@pixi/events/src/EventSystem.ts", "../../@pixi/events/src/FederatedEventTarget.ts", "../../@pixi/accessibility/src/accessibleTarget.ts", "../../@pixi/accessibility/src/AccessibilityManager.ts", "../../@pixi/app/src/Application.ts", "../../@pixi/app/src/ResizePlugin.ts", "../../@pixi/compressed-textures/src/const.ts", "../../@pixi/compressed-textures/src/loaders/detectCompressedTextures.ts", "../../@pixi/compressed-textures/src/resources/BlobResource.ts", "../../@pixi/compressed-textures/src/resources/CompressedTextureResource.ts", "../../@pixi/compressed-textures/src/parsers/parseDDS.ts", "../../@pixi/compressed-textures/src/parsers/parseKTX.ts", "../../@pixi/compressed-textures/src/loaders/loadDDS.ts", "../../@pixi/compressed-textures/src/loaders/loadKTX.ts", "../../@pixi/compressed-textures/src/loaders/resolveCompressedTextureUrl.ts", "../../@pixi/extract/src/Extract.ts", "../../@pixi/particle-container/src/ParticleContainer.ts", "../../@pixi/particle-container/src/ParticleBuffer.ts", "../../@pixi/particle-container/lib/particles.mjs", "../../@pixi/particle-container/lib/particles2.mjs", "../../@pixi/particle-container/src/ParticleRenderer.ts", "../../@pixi/text/src/const.ts", "../../@pixi/text/src/TextMetrics.ts", "../../@pixi/text/src/TextStyle.ts", "../../@pixi/text/src/Text.ts", "../../@pixi/prepare/src/CountLimiter.ts", "../../@pixi/prepare/src/BasePrepare.ts", "../../@pixi/prepare/src/settings.ts", "../../@pixi/prepare/src/Prepare.ts", "../../@pixi/prepare/src/TimeLimiter.ts", "../../@pixi/sprite-animated/src/AnimatedSprite.ts", "../../@pixi/sprite-tiling/src/TilingSprite.ts", "../../@pixi/sprite-tiling/lib/sprite-tiling.mjs", "../../@pixi/sprite-tiling/lib/sprite-tiling2.mjs", "../../@pixi/sprite-tiling/lib/sprite-tiling-fallback.mjs", "../../@pixi/sprite-tiling/lib/sprite-tiling-fallback2.mjs", "../../@pixi/sprite-tiling/lib/sprite-tiling-simple.mjs", "../../@pixi/sprite-tiling/src/TilingSpriteRenderer.ts", "../../@pixi/spritesheet/src/Spritesheet.ts", "../../@pixi/spritesheet/src/spritesheetAsset.ts", "../../@pixi/text-bitmap/src/BitmapFontData.ts", "../../@pixi/text-bitmap/src/formats/TextFormat.ts", "../../@pixi/text-bitmap/src/formats/XMLFormat.ts", "../../@pixi/text-bitmap/src/formats/XMLStringFormat.ts", "../../@pixi/text-bitmap/src/formats/index.ts", "../../@pixi/text-bitmap/src/utils/generateFillStyle.ts", "../../@pixi/text-bitmap/src/utils/drawGlyph.ts", "../../@pixi/text-bitmap/src/utils/extractCharCode.ts", "../../@pixi/text-bitmap/src/utils/splitTextToCharacters.ts", "../../@pixi/text-bitmap/src/utils/resolveCharacters.ts", "../../@pixi/text-bitmap/src/BitmapFont.ts", "../../@pixi/text-bitmap/lib/shader/msdf.mjs", "../../@pixi/text-bitmap/lib/shader/msdf2.mjs", "../../@pixi/text-bitmap/src/BitmapText.ts", "../../@pixi/text-bitmap/src/loadBitmapFont.ts", "../../@pixi/text-html/src/HTMLTextStyle.ts", "../../@pixi/text-html/src/HTMLText.ts"],
  "sourcesContent": ["/// <reference path=\"../global.d.ts\" />\nimport { BaseTexture, Matrix, RenderTexture, settings, Texture, utils } from '@pixi/core';\nimport { DisplayObject } from '@pixi/display';\nimport { Sprite } from '@pixi/sprite';\n\nimport type {\n    ICanvasRenderingContext2D,\n    IPointData,\n    IRenderer,\n    MaskData,\n    MSAA_QUALITY,\n    Rectangle,\n    Renderer,\n} from '@pixi/core';\nimport type { Container, IDestroyOptions } from '@pixi/display';\n\n// Don't import CanvasRender to remove dependency on this optional package\n// this type should satisify these requirements for cacheAsBitmap types\ninterface CanvasRenderer extends IRenderer\n{\n    canvasContext: {\n        activeContext: ICanvasRenderingContext2D;\n    }\n}\n\nconst _tempMatrix = new Matrix();\n\nDisplayObject.prototype._cacheAsBitmap = false;\nDisplayObject.prototype._cacheData = null;\nDisplayObject.prototype._cacheAsBitmapResolution = null;\nDisplayObject.prototype._cacheAsBitmapMultisample = null;\n\n// figured there's no point adding ALL the extra variables to prototype.\n// this model can hold the information needed. This can also be generated on demand as\n// most objects are not cached as bitmaps.\n/**\n * @class\n * @ignore\n * @private\n */\nexport class CacheData\n{\n    public textureCacheId: string;\n    public originalRender: (renderer: Renderer) => void;\n    public originalRenderCanvas: (renderer: IRenderer) => void;\n    public originalCalculateBounds: () => void;\n    public originalGetLocalBounds: (rect?: Rectangle) => Rectangle;\n    public originalUpdateTransform: () => void;\n    public originalDestroy: (options?: IDestroyOptions | boolean) => void;\n    public originalMask: Container | MaskData;\n    public originalFilterArea: Rectangle;\n    public originalContainsPoint: (point: IPointData) => boolean;\n    public sprite: Sprite;\n\n    constructor()\n    {\n        this.textureCacheId = null;\n\n        this.originalRender = null;\n        this.originalRenderCanvas = null;\n        this.originalCalculateBounds = null;\n        this.originalGetLocalBounds = null;\n\n        this.originalUpdateTransform = null;\n        this.originalDestroy = null;\n        this.originalMask = null;\n        this.originalFilterArea = null;\n        this.originalContainsPoint = null;\n        this.sprite = null;\n    }\n}\n\nObject.defineProperties(DisplayObject.prototype, {\n    /**\n     * The resolution to use for cacheAsBitmap. By default this will use the renderer's resolution\n     * but can be overriden for performance. Lower values will reduce memory usage at the expense\n     * of render quality. A falsey value of `null` or `0` will default to the renderer's resolution.\n     * If `cacheAsBitmap` is set to `true`, this will re-render with the new resolution.\n     * @member {number} cacheAsBitmapResolution\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     */\n    cacheAsBitmapResolution: {\n        get(): number\n        {\n            return this._cacheAsBitmapResolution;\n        },\n        set(resolution: number): void\n        {\n            if (resolution === this._cacheAsBitmapResolution)\n            {\n                return;\n            }\n\n            this._cacheAsBitmapResolution = resolution;\n\n            if (this.cacheAsBitmap)\n            {\n                // Toggle to re-render at the new resolution\n                this.cacheAsBitmap = false;\n                this.cacheAsBitmap = true;\n            }\n        },\n    },\n\n    /**\n     * The number of samples to use for cacheAsBitmap. If set to `null`, the renderer's\n     * sample count is used.\n     * If `cacheAsBitmap` is set to `true`, this will re-render with the new number of samples.\n     * @member {number} cacheAsBitmapMultisample\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     */\n    cacheAsBitmapMultisample: {\n        get(): MSAA_QUALITY\n        {\n            return this._cacheAsBitmapMultisample;\n        },\n        set(multisample: MSAA_QUALITY): void\n        {\n            if (multisample === this._cacheAsBitmapMultisample)\n            {\n                return;\n            }\n\n            this._cacheAsBitmapMultisample = multisample;\n\n            if (this.cacheAsBitmap)\n            {\n                // Toggle to re-render with new multisample\n                this.cacheAsBitmap = false;\n                this.cacheAsBitmap = true;\n            }\n        },\n    },\n\n    /**\n     * Set this to true if you want this display object to be cached as a bitmap.\n     * This basically takes a snapshot of the display object as it is at that moment. It can\n     * provide a performance benefit for complex static displayObjects.\n     * To remove simply set this property to `false`\n     *\n     * IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true\n     * as it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     */\n    cacheAsBitmap: {\n        get(): CacheData\n        {\n            return this._cacheAsBitmap;\n        },\n        set(value: CacheData): void\n        {\n            if (this._cacheAsBitmap === value)\n            {\n                return;\n            }\n\n            this._cacheAsBitmap = value;\n\n            let data: CacheData;\n\n            if (value)\n            {\n                if (!this._cacheData)\n                {\n                    this._cacheData = new CacheData();\n                }\n\n                data = this._cacheData;\n\n                data.originalRender = this.render;\n                data.originalRenderCanvas = this.renderCanvas;\n\n                data.originalUpdateTransform = this.updateTransform;\n                data.originalCalculateBounds = this.calculateBounds;\n                data.originalGetLocalBounds = this.getLocalBounds;\n\n                data.originalDestroy = this.destroy;\n\n                data.originalContainsPoint = this.containsPoint;\n\n                data.originalMask = this._mask;\n                data.originalFilterArea = this.filterArea;\n\n                this.render = this._renderCached;\n                this.renderCanvas = this._renderCachedCanvas;\n\n                this.destroy = this._cacheAsBitmapDestroy;\n            }\n            else\n            {\n                data = this._cacheData;\n\n                if (data.sprite)\n                {\n                    this._destroyCachedDisplayObject();\n                }\n\n                this.render = data.originalRender;\n                this.renderCanvas = data.originalRenderCanvas;\n                this.calculateBounds = data.originalCalculateBounds;\n                this.getLocalBounds = data.originalGetLocalBounds;\n\n                this.destroy = data.originalDestroy;\n\n                this.updateTransform = data.originalUpdateTransform;\n                this.containsPoint = data.originalContainsPoint;\n\n                this._mask = data.originalMask;\n                this.filterArea = data.originalFilterArea;\n            }\n        },\n    },\n});\n\n/**\n * Renders a cached version of the sprite with WebGL\n * @private\n * @method _renderCached\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.Renderer} renderer - the WebGL renderer\n */\nDisplayObject.prototype._renderCached = function _renderCached(renderer: Renderer): void\n{\n    if (!this.visible || this.worldAlpha <= 0 || !this.renderable)\n    {\n        return;\n    }\n\n    this._initCachedDisplayObject(renderer);\n\n    this._cacheData.sprite.transform._worldID = this.transform._worldID;\n    this._cacheData.sprite.worldAlpha = this.worldAlpha;\n    (this._cacheData.sprite as any)._render(renderer);\n};\n\n/**\n * Prepares the WebGL renderer to cache the sprite\n * @private\n * @method _initCachedDisplayObject\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.Renderer} renderer - the WebGL renderer\n */\nDisplayObject.prototype._initCachedDisplayObject = function _initCachedDisplayObject(renderer: Renderer): void\n{\n    if (this._cacheData?.sprite)\n    {\n        return;\n    }\n\n    // make sure alpha is set to 1 otherwise it will get rendered as invisible!\n    const cacheAlpha = this.alpha;\n\n    this.alpha = 1;\n\n    // first we flush anything left in the renderer (otherwise it would get rendered to the cached texture)\n    renderer.batch.flush();\n    // this.filters= [];\n\n    // next we find the dimensions of the untransformed object\n    // this function also calls updatetransform on all its children as part of the measuring.\n    // This means we don't need to update the transform again in this function\n    // TODO pass an object to clone too? saves having to create a new one each time!\n    const bounds = (this as Container).getLocalBounds(null, true).clone();\n\n    // add some padding!\n    if (this.filters?.length)\n    {\n        const padding = this.filters[0].padding;\n\n        bounds.pad(padding);\n    }\n\n    bounds.ceil(settings.RESOLUTION);\n\n    // for now we cache the current renderTarget that the WebGL renderer is currently using.\n    // this could be more elegant..\n    const cachedRenderTexture = renderer.renderTexture.current;\n    const cachedSourceFrame = renderer.renderTexture.sourceFrame.clone();\n    const cachedDestinationFrame = renderer.renderTexture.destinationFrame.clone();\n    const cachedProjectionTransform = renderer.projection.transform;\n\n    // We also store the filter stack - I will definitely look to change how this works a little later down the line.\n    // const stack = renderer.filterManager.filterStack;\n\n    // this renderTexture will be used to store the cached DisplayObject\n    const renderTexture = RenderTexture.create({\n        width: bounds.width,\n        height: bounds.height,\n        resolution: this.cacheAsBitmapResolution || renderer.resolution,\n        multisample: this.cacheAsBitmapMultisample ?? renderer.multisample,\n    });\n\n    const textureCacheId = `cacheAsBitmap_${utils.uid()}`;\n\n    this._cacheData.textureCacheId = textureCacheId;\n\n    BaseTexture.addToCache(renderTexture.baseTexture, textureCacheId);\n    Texture.addToCache(renderTexture, textureCacheId);\n\n    // need to set //\n    const m = this.transform.localTransform.copyTo(_tempMatrix).invert().translate(-bounds.x, -bounds.y);\n\n    // set all properties to there original so we can render to a texture\n    this.render = this._cacheData.originalRender;\n\n    renderer.render(this, { renderTexture, clear: true, transform: m, skipUpdateTransform: false });\n    renderer.framebuffer.blit();\n\n    // now restore the state be setting the new properties\n    renderer.projection.transform = cachedProjectionTransform;\n    renderer.renderTexture.bind(cachedRenderTexture, cachedSourceFrame, cachedDestinationFrame);\n\n    // renderer.filterManager.filterStack = stack;\n\n    this.render = this._renderCached;\n    // the rest is the same as for Canvas\n    this.updateTransform = this.displayObjectUpdateTransform;\n    this.calculateBounds = this._calculateCachedBounds;\n    this.getLocalBounds = this._getCachedLocalBounds;\n\n    this._mask = null;\n    this.filterArea = null;\n    this.alpha = cacheAlpha;\n\n    // create our cached sprite\n    const cachedSprite = new Sprite(renderTexture);\n\n    cachedSprite.transform.worldTransform = this.transform.worldTransform;\n    cachedSprite.anchor.x = -(bounds.x / bounds.width);\n    cachedSprite.anchor.y = -(bounds.y / bounds.height);\n    cachedSprite.alpha = cacheAlpha;\n    cachedSprite._bounds = this._bounds;\n\n    this._cacheData.sprite = cachedSprite;\n\n    this.transform._parentID = -1;\n    // restore the transform of the cached sprite to avoid the nasty flicker..\n    if (!this.parent)\n    {\n        this.enableTempParent();\n        this.updateTransform();\n        this.disableTempParent(null);\n    }\n    else\n    {\n        this.updateTransform();\n    }\n\n    // map the hit test..\n    (this as Sprite).containsPoint = cachedSprite.containsPoint.bind(cachedSprite);\n};\n\n/**\n * Renders a cached version of the sprite with canvas\n * @private\n * @method _renderCachedCanvas\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.CanvasRenderer} renderer - The canvas renderer\n */\nDisplayObject.prototype._renderCachedCanvas = function _renderCachedCanvas(renderer: IRenderer): void\n{\n    if (!this.visible || this.worldAlpha <= 0 || !this.renderable)\n    {\n        return;\n    }\n\n    this._initCachedDisplayObjectCanvas(renderer);\n\n    this._cacheData.sprite.worldAlpha = this.worldAlpha;\n    (this._cacheData.sprite as any)._renderCanvas(renderer);\n};\n\n// TODO this can be the same as the WebGL version.. will need to do a little tweaking first though..\n/**\n * Prepares the Canvas renderer to cache the sprite\n * @private\n * @method _initCachedDisplayObjectCanvas\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.CanvasRenderer} renderer - The canvas renderer\n */\nDisplayObject.prototype._initCachedDisplayObjectCanvas = function _initCachedDisplayObjectCanvas(\n    renderer: CanvasRenderer\n): void\n{\n    if (this._cacheData?.sprite)\n    {\n        return;\n    }\n\n    // get bounds actually transforms the object for us already!\n    const bounds = (this as Container).getLocalBounds(null, true);\n\n    const cacheAlpha = this.alpha;\n\n    this.alpha = 1;\n\n    const cachedRenderTarget = renderer.canvasContext.activeContext;\n    const cachedProjectionTransform = (renderer as any)._projTransform;\n\n    bounds.ceil(settings.RESOLUTION);\n\n    const renderTexture = RenderTexture.create({ width: bounds.width, height: bounds.height });\n\n    const textureCacheId = `cacheAsBitmap_${utils.uid()}`;\n\n    this._cacheData.textureCacheId = textureCacheId;\n\n    BaseTexture.addToCache(renderTexture.baseTexture, textureCacheId);\n    Texture.addToCache(renderTexture, textureCacheId);\n\n    // need to set //\n    const m = _tempMatrix;\n\n    this.transform.localTransform.copyTo(m);\n    m.invert();\n\n    m.tx -= bounds.x;\n    m.ty -= bounds.y;\n\n    // m.append(this.transform.worldTransform.)\n    // set all properties to there original so we can render to a texture\n    this.renderCanvas = this._cacheData.originalRenderCanvas;\n\n    renderer.render(this, { renderTexture, clear: true, transform: m, skipUpdateTransform: false });\n    // now restore the state be setting the new properties\n    renderer.canvasContext.activeContext = cachedRenderTarget;\n    (renderer as any)._projTransform = cachedProjectionTransform;\n\n    this.renderCanvas = this._renderCachedCanvas;\n    // the rest is the same as for WebGL\n    this.updateTransform = this.displayObjectUpdateTransform;\n    this.calculateBounds = this._calculateCachedBounds;\n    this.getLocalBounds = this._getCachedLocalBounds;\n\n    this._mask = null;\n    this.filterArea = null;\n    this.alpha = cacheAlpha;\n\n    // create our cached sprite\n    const cachedSprite = new Sprite(renderTexture);\n\n    cachedSprite.transform.worldTransform = this.transform.worldTransform;\n    cachedSprite.anchor.x = -(bounds.x / bounds.width);\n    cachedSprite.anchor.y = -(bounds.y / bounds.height);\n    cachedSprite.alpha = cacheAlpha;\n    cachedSprite._bounds = this._bounds;\n\n    this._cacheData.sprite = cachedSprite;\n\n    this.transform._parentID = -1;\n    // restore the transform of the cached sprite to avoid the nasty flicker..\n    if (!this.parent)\n    {\n        this.parent = (renderer as any)._tempDisplayObjectParent;\n        this.updateTransform();\n        this.parent = null;\n    }\n    else\n    {\n        this.updateTransform();\n    }\n\n    // map the hit test..\n    (this as Sprite).containsPoint = cachedSprite.containsPoint.bind(cachedSprite);\n};\n\n/**\n * Calculates the bounds of the cached sprite\n * @private\n * @method\n */\nDisplayObject.prototype._calculateCachedBounds = function _calculateCachedBounds(): void\n{\n    this._bounds.clear();\n    this._cacheData.sprite.transform._worldID = this.transform._worldID;\n    (this._cacheData.sprite as any)._calculateBounds();\n    this._bounds.updateID = (this as any)._boundsID;\n};\n\n/**\n * Gets the bounds of the cached sprite.\n * @private\n * @method\n * @returns {Rectangle} The local bounds.\n */\nDisplayObject.prototype._getCachedLocalBounds = function _getCachedLocalBounds(): Rectangle\n{\n    return this._cacheData.sprite.getLocalBounds(null);\n};\n\n/**\n * Destroys the cached sprite.\n * @private\n * @method\n */\nDisplayObject.prototype._destroyCachedDisplayObject = function _destroyCachedDisplayObject(): void\n{\n    this._cacheData.sprite._texture.destroy(true);\n    this._cacheData.sprite = null;\n\n    BaseTexture.removeFromCache(this._cacheData.textureCacheId);\n    Texture.removeFromCache(this._cacheData.textureCacheId);\n\n    this._cacheData.textureCacheId = null;\n};\n\n/**\n * Destroys the cached object.\n * @private\n * @method\n * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n *  have been set to that value.\n *  Used when destroying containers, see the Container.destroy method.\n */\nDisplayObject.prototype._cacheAsBitmapDestroy = function _cacheAsBitmapDestroy(options?: IDestroyOptions | boolean): void\n{\n    this.cacheAsBitmap = false;\n    this.destroy(options);\n};\n", "/// <reference path=\"../global.d.ts\" />\nimport { Container, DisplayObject } from '@pixi/display';\n\n/**\n * The instance name of the object.\n * @memberof PIXI.DisplayObject#\n * @member {string} name\n */\nDisplayObject.prototype.name = null;\n\n/**\n * Returns the display object in the container.\n *\n * Recursive searches are done in a preorder traversal.\n * @method getChildByName\n * @memberof PIXI.Container#\n * @param {string} name - Instance name.\n * @param {boolean}[deep=false] - Whether to search recursively\n * @returns {PIXI.DisplayObject} The child with the specified name.\n */\nContainer.prototype.getChildByName = function getChildByName<T extends DisplayObject = DisplayObject>(\n    name: string,\n    deep?: boolean,\n): T | null\n{\n    for (let i = 0, j = this.children.length; i < j; i++)\n    {\n        if (this.children[i].name === name)\n        {\n            return this.children[i];\n        }\n    }\n\n    if (deep)\n    {\n        for (let i = 0, j = this.children.length; i < j; i++)\n        {\n            const child = (this.children[i] as Container);\n\n            if (!child.getChildByName)\n            {\n                continue;\n            }\n\n            const target = child.getChildByName<T>(name, true);\n\n            if (target)\n            {\n                return target;\n            }\n        }\n    }\n\n    return null;\n};\n", "/// <reference path=\"../global.d.ts\" />\nimport { Point } from '@pixi/core';\nimport { DisplayObject } from '@pixi/display';\n\n/**\n * Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.\n * @method getGlobalPosition\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.Point} [point=new PIXI.Point()] - The point to write the global value to.\n * @param {boolean} [skipUpdate=false] - Setting to true will stop the transforms of the scene graph from\n *  being updated. This means the calculation returned MAY be out of date BUT will give you a\n *  nice performance boost.\n * @returns {PIXI.Point} The updated point.\n */\nDisplayObject.prototype.getGlobalPosition = function getGlobalPosition(point: Point = new Point(), skipUpdate = false): Point\n{\n    if (this.parent)\n    {\n        this.parent.toGlobal(this.position, point, skipUpdate);\n    }\n    else\n    {\n        point.x = this.position.x;\n        point.y = this.position.y;\n    }\n\n    return point;\n};\n", "var fragment = \"varying vec2 vTextureCoord;\\n\\nuniform sampler2D uSampler;\\nuniform float uAlpha;\\n\\nvoid main(void)\\n{\\n   gl_FragColor = texture2D(uSampler, vTextureCoord) * uAlpha;\\n}\\n\";\n\nexport { fragment as default };\n//# sourceMappingURL=alpha.mjs.map\n", "import { defaultVertex, Filter } from '@pixi/core';\nimport fragment from './alpha.frag';\n\n/**\n * Simplest filter - applies alpha.\n *\n * Use this instead of Container's alpha property to avoid visual layering of individual elements.\n * AlphaFilter applies alpha evenly across the entire display object and any opaque elements it contains.\n * If elements are not opaque, they will blend with each other anyway.\n *\n * Very handy if you want to use common features of all filters:\n *\n * 1. Assign a blendMode to this filter, blend all elements inside display object with background.\n *\n * 2. To use clipping in display coordinates, assign a filterArea to the same container that has this filter.\n * @memberof PIXI\n */\nexport class AlphaFilter extends Filter\n{\n    /**\n     * @param alpha - Amount of alpha from 0 to 1, where 0 is transparent\n     */\n    constructor(alpha = 1.0)\n    {\n        super(defaultVertex, fragment, { uAlpha: 1 });\n\n        this.alpha = alpha;\n    }\n\n    /**\n     * Coefficient for alpha multiplication\n     * @default 1\n     */\n    get alpha(): number\n    {\n        return this.uniforms.uAlpha;\n    }\n\n    set alpha(value: number)\n    {\n        this.uniforms.uAlpha = value;\n    }\n}\n", "interface IGAUSSIAN_VALUES\n{\n    [x: number]: number[];\n}\nconst GAUSSIAN_VALUES: IGAUSSIAN_VALUES = {\n    5: [0.153388, 0.221461, 0.250301],\n    7: [0.071303, 0.131514, 0.189879, 0.214607],\n    9: [0.028532, 0.067234, 0.124009, 0.179044, 0.20236],\n    11: [0.0093, 0.028002, 0.065984, 0.121703, 0.175713, 0.198596],\n    13: [0.002406, 0.009255, 0.027867, 0.065666, 0.121117, 0.174868, 0.197641],\n    15: [0.000489, 0.002403, 0.009246, 0.02784, 0.065602, 0.120999, 0.174697, 0.197448],\n};\n\nconst fragTemplate = [\n    'varying vec2 vBlurTexCoords[%size%];',\n    'uniform sampler2D uSampler;',\n\n    'void main(void)',\n    '{',\n    '    gl_FragColor = vec4(0.0);',\n    '    %blur%',\n    '}',\n\n].join('\\n');\n\nexport function generateBlurFragSource(kernelSize: number): string\n{\n    const kernel = GAUSSIAN_VALUES[kernelSize];\n    const halfLength = kernel.length;\n\n    let fragSource = fragTemplate;\n\n    let blurLoop = '';\n    const template = 'gl_FragColor += texture2D(uSampler, vBlurTexCoords[%index%]) * %value%;';\n    let value: number;\n\n    for (let i = 0; i < kernelSize; i++)\n    {\n        let blur = template.replace('%index%', i.toString());\n\n        value = i;\n\n        if (i >= halfLength)\n        {\n            value = kernelSize - i - 1;\n        }\n\n        blur = blur.replace('%value%', kernel[value].toString());\n\n        blurLoop += blur;\n        blurLoop += '\\n';\n    }\n\n    fragSource = fragSource.replace('%blur%', blurLoop);\n    fragSource = fragSource.replace('%size%', kernelSize.toString());\n\n    return fragSource;\n}\n", "const vertTemplate = `\n    attribute vec2 aVertexPosition;\n\n    uniform mat3 projectionMatrix;\n\n    uniform float strength;\n\n    varying vec2 vBlurTexCoords[%size%];\n\n    uniform vec4 inputSize;\n    uniform vec4 outputFrame;\n\n    vec4 filterVertexPosition( void )\n    {\n        vec2 position = aVertexPosition * max(outputFrame.zw, vec2(0.)) + outputFrame.xy;\n\n        return vec4((projectionMatrix * vec3(position, 1.0)).xy, 0.0, 1.0);\n    }\n\n    vec2 filterTextureCoord( void )\n    {\n        return aVertexPosition * (outputFrame.zw * inputSize.zw);\n    }\n\n    void main(void)\n    {\n        gl_Position = filterVertexPosition();\n\n        vec2 textureCoord = filterTextureCoord();\n        %blur%\n    }`;\n\nexport function generateBlurVertSource(kernelSize: number, x: boolean): string\n{\n    const halfLength = Math.ceil(kernelSize / 2);\n\n    let vertSource = vertTemplate;\n\n    let blurLoop = '';\n    let template;\n\n    if (x)\n    {\n        template = 'vBlurTexCoords[%index%] =  textureCoord + vec2(%sampleIndex% * strength, 0.0);';\n    }\n    else\n    {\n        template = 'vBlurTexCoords[%index%] =  textureCoord + vec2(0.0, %sampleIndex% * strength);';\n    }\n\n    for (let i = 0; i < kernelSize; i++)\n    {\n        let blur = template.replace('%index%', i.toString());\n\n        blur = blur.replace('%sampleIndex%', `${i - (halfLength - 1)}.0`);\n\n        blurLoop += blur;\n        blurLoop += '\\n';\n    }\n\n    vertSource = vertSource.replace('%blur%', blurLoop);\n    vertSource = vertSource.replace('%size%', kernelSize.toString());\n\n    return vertSource;\n}\n", "import { CLEAR_MODES, Filter } from '@pixi/core';\nimport { generateBlurFragSource } from './generateBlurFragSource';\nimport { generateBlurVertSource } from './generateBlurVertSource';\n\nimport type { FilterSystem, RenderTexture } from '@pixi/core';\n\n/**\n * The BlurFilterPass applies a horizontal or vertical Gaussian blur to an object.\n * @memberof PIXI\n */\nexport class BlurFilterPass extends Filter\n{\n    public horizontal: boolean;\n    public strength!: number;\n    public passes!: number;\n\n    private _quality: number;\n\n    /**\n     * @param horizontal - Do pass along the x-axis (`true`) or y-axis (`false`).\n     * @param strength - The strength of the blur filter.\n     * @param quality - The quality of the blur filter.\n     * @param resolution - The resolution of the blur filter.\n     * @param kernelSize - The kernelSize of the blur filter.Options: 5, 7, 9, 11, 13, 15.\n     */\n    constructor(horizontal: boolean, strength = 8, quality = 4, resolution = Filter.defaultResolution, kernelSize = 5)\n    {\n        const vertSrc = generateBlurVertSource(kernelSize, horizontal);\n        const fragSrc = generateBlurFragSource(kernelSize);\n\n        super(\n            // vertex shader\n            vertSrc,\n            // fragment shader\n            fragSrc\n        );\n\n        this.horizontal = horizontal;\n\n        this.resolution = resolution;\n\n        this._quality = 0;\n\n        this.quality = quality;\n\n        this.blur = strength;\n    }\n\n    /**\n     * Applies the filter.\n     * @param filterManager - The manager.\n     * @param input - The input target.\n     * @param output - The output target.\n     * @param clearMode - How to clear\n     */\n    public apply(\n        filterManager: FilterSystem, input: RenderTexture, output: RenderTexture, clearMode: CLEAR_MODES\n    ): void\n    {\n        if (output)\n        {\n            if (this.horizontal)\n            {\n                this.uniforms.strength = (1 / output.width) * (output.width / input.width);\n            }\n            else\n            {\n                this.uniforms.strength = (1 / output.height) * (output.height / input.height);\n            }\n        }\n        else\n        {\n            if (this.horizontal) // eslint-disable-line\n            {\n                this.uniforms.strength = (1 / filterManager.renderer.width) * (filterManager.renderer.width / input.width);\n            }\n            else\n            {\n                this.uniforms.strength = (1 / filterManager.renderer.height) * (filterManager.renderer.height / input.height); // eslint-disable-line\n            }\n        }\n\n        // screen space!\n        this.uniforms.strength *= this.strength;\n        this.uniforms.strength /= this.passes;\n\n        if (this.passes === 1)\n        {\n            filterManager.applyFilter(this, input, output, clearMode);\n        }\n        else\n        {\n            const renderTarget = filterManager.getFilterTexture();\n            const renderer = filterManager.renderer;\n\n            let flip = input;\n            let flop = renderTarget;\n\n            this.state.blend = false;\n            filterManager.applyFilter(this, flip, flop, CLEAR_MODES.CLEAR);\n\n            for (let i = 1; i < this.passes - 1; i++)\n            {\n                filterManager.bindAndClear(flip, CLEAR_MODES.BLIT);\n\n                this.uniforms.uSampler = flop;\n\n                const temp = flop;\n\n                flop = flip;\n                flip = temp;\n\n                renderer.shader.bind(this);\n                renderer.geometry.draw(5);\n            }\n\n            this.state.blend = true;\n            filterManager.applyFilter(this, flop, output, clearMode);\n            filterManager.returnFilterTexture(renderTarget);\n        }\n    }\n    /**\n     * Sets the strength of both the blur.\n     * @default 16\n     */\n    get blur(): number\n    {\n        return this.strength;\n    }\n\n    set blur(value: number)\n    {\n        this.padding = 1 + (Math.abs(value) * 2);\n        this.strength = value;\n    }\n\n    /**\n     * Sets the quality of the blur by modifying the number of passes. More passes means higher\n     * quality bluring but the lower the performance.\n     * @default 4\n     */\n    get quality(): number\n    {\n        return this._quality;\n    }\n\n    set quality(value: number)\n    {\n        this._quality = value;\n        this.passes = value;\n    }\n}\n", "import { CLEAR_MODES, Filter } from '@pixi/core';\nimport { BlurFilterPass } from './BlurFilterPass';\n\nimport type { BLEND_MODES, FilterSystem, RenderTexture } from '@pixi/core';\n\n/**\n * The BlurFilter applies a Gaussian blur to an object.\n *\n * The strength of the blur can be set for the x-axis and y-axis separately.\n * @memberof PIXI\n */\nexport class BlurFilter extends Filter\n{\n    public blurXFilter: BlurFilterPass;\n    public blurYFilter: BlurFilterPass;\n\n    private _repeatEdgePixels = false;\n\n    /**\n     * @param strength - The strength of the blur filter.\n     * @param quality - The quality of the blur filter.\n     * @param [resolution=Filter.defaultResolution] - The resolution of the blur filter.\n     * @param kernelSize - The kernelSize of the blur filter.Options: 5, 7, 9, 11, 13, 15.\n     */\n    constructor(strength = 8, quality = 4, resolution = Filter.defaultResolution, kernelSize = 5)\n    {\n        super();\n\n        this.blurXFilter = new BlurFilterPass(true, strength, quality, resolution, kernelSize);\n        this.blurYFilter = new BlurFilterPass(false, strength, quality, resolution, kernelSize);\n\n        this.resolution = resolution;\n        this.quality = quality;\n        this.blur = strength;\n\n        this.repeatEdgePixels = false;\n    }\n\n    /**\n     * Applies the filter.\n     * @param filterManager - The manager.\n     * @param input - The input target.\n     * @param output - The output target.\n     * @param clearMode - How to clear\n     */\n    apply(filterManager: FilterSystem, input: RenderTexture, output: RenderTexture, clearMode: CLEAR_MODES): void\n    {\n        const xStrength = Math.abs(this.blurXFilter.strength);\n        const yStrength = Math.abs(this.blurYFilter.strength);\n\n        if (xStrength && yStrength)\n        {\n            const renderTarget = filterManager.getFilterTexture();\n\n            this.blurXFilter.apply(filterManager, input, renderTarget, CLEAR_MODES.CLEAR);\n            this.blurYFilter.apply(filterManager, renderTarget, output, clearMode);\n\n            filterManager.returnFilterTexture(renderTarget);\n        }\n        else if (yStrength)\n        {\n            this.blurYFilter.apply(filterManager, input, output, clearMode);\n        }\n        else\n        {\n            this.blurXFilter.apply(filterManager, input, output, clearMode);\n        }\n    }\n\n    protected updatePadding(): void\n    {\n        if (this._repeatEdgePixels)\n        {\n            this.padding = 0;\n        }\n        else\n        {\n            this.padding = Math.max(Math.abs(this.blurXFilter.strength), Math.abs(this.blurYFilter.strength)) * 2;\n        }\n    }\n\n    /**\n     * Sets the strength of both the blurX and blurY properties simultaneously\n     * @default 2\n     */\n    get blur(): number\n    {\n        return this.blurXFilter.blur;\n    }\n\n    set blur(value: number)\n    {\n        this.blurXFilter.blur = this.blurYFilter.blur = value;\n        this.updatePadding();\n    }\n\n    /**\n     * Sets the number of passes for blur. More passes means higher quality bluring.\n     * @default 1\n     */\n    get quality(): number\n    {\n        return this.blurXFilter.quality;\n    }\n\n    set quality(value: number)\n    {\n        this.blurXFilter.quality = this.blurYFilter.quality = value;\n    }\n\n    /**\n     * Sets the strength of the blurX property\n     * @default 2\n     */\n    get blurX(): number\n    {\n        return this.blurXFilter.blur;\n    }\n\n    set blurX(value: number)\n    {\n        this.blurXFilter.blur = value;\n        this.updatePadding();\n    }\n\n    /**\n     * Sets the strength of the blurY property\n     * @default 2\n     */\n    get blurY(): number\n    {\n        return this.blurYFilter.blur;\n    }\n\n    set blurY(value: number)\n    {\n        this.blurYFilter.blur = value;\n        this.updatePadding();\n    }\n\n    /**\n     * Sets the blendmode of the filter\n     * @default PIXI.BLEND_MODES.NORMAL\n     */\n    get blendMode(): BLEND_MODES\n    {\n        return this.blurYFilter.blendMode;\n    }\n\n    set blendMode(value: BLEND_MODES)\n    {\n        this.blurYFilter.blendMode = value;\n    }\n\n    /**\n     * If set to true the edge of the target will be clamped\n     * @default false\n     */\n    get repeatEdgePixels(): boolean\n    {\n        return this._repeatEdgePixels;\n    }\n\n    set repeatEdgePixels(value: boolean)\n    {\n        this._repeatEdgePixels = value;\n        this.updatePadding();\n    }\n}\n", "var fragment = \"varying vec2 vTextureCoord;\\nuniform sampler2D uSampler;\\nuniform float m[20];\\nuniform float uAlpha;\\n\\nvoid main(void)\\n{\\n    vec4 c = texture2D(uSampler, vTextureCoord);\\n\\n    if (uAlpha == 0.0) {\\n        gl_FragColor = c;\\n        return;\\n    }\\n\\n    // Un-premultiply alpha before applying the color matrix. See issue #3539.\\n    if (c.a > 0.0) {\\n      c.rgb /= c.a;\\n    }\\n\\n    vec4 result;\\n\\n    result.r = (m[0] * c.r);\\n        result.r += (m[1] * c.g);\\n        result.r += (m[2] * c.b);\\n        result.r += (m[3] * c.a);\\n        result.r += m[4];\\n\\n    result.g = (m[5] * c.r);\\n        result.g += (m[6] * c.g);\\n        result.g += (m[7] * c.b);\\n        result.g += (m[8] * c.a);\\n        result.g += m[9];\\n\\n    result.b = (m[10] * c.r);\\n       result.b += (m[11] * c.g);\\n       result.b += (m[12] * c.b);\\n       result.b += (m[13] * c.a);\\n       result.b += m[14];\\n\\n    result.a = (m[15] * c.r);\\n       result.a += (m[16] * c.g);\\n       result.a += (m[17] * c.b);\\n       result.a += (m[18] * c.a);\\n       result.a += m[19];\\n\\n    vec3 rgb = mix(c.rgb, result.rgb, uAlpha);\\n\\n    // Premultiply alpha again.\\n    rgb *= result.a;\\n\\n    gl_FragColor = vec4(rgb, result.a);\\n}\\n\";\n\nexport { fragment as default };\n//# sourceMappingURL=colorMatrix.mjs.map\n", "import { Color, defaultFilterVertex, Filter } from '@pixi/core';\nimport fragment from './colorMatrix.frag';\n\nimport type { utils } from '@pixi/core';\n\nexport type ColorMatrix = utils.ArrayFixed<number, 20>;\n\n/**\n * The ColorMatrixFilter class lets you apply a 5x4 matrix transformation on the RGBA\n * color and alpha values of every pixel on your displayObject to produce a result\n * with a new set of RGBA color and alpha values. It's pretty powerful!\n * @example\n * import { filters } from 'pixi.js';\n *\n * const colorMatrix = new filters.ColorMatrixFilter();\n * container.filters = [colorMatrix];\n * colorMatrix.contrast(2);\n * @author Clément Chenebault <clement@goodboydigital.com>\n * @memberof PIXI\n */\nexport class ColorMatrixFilter extends Filter\n{\n    constructor()\n    {\n        const uniforms = {\n            m: new Float32Array([1, 0, 0, 0, 0,\n                0, 1, 0, 0, 0,\n                0, 0, 1, 0, 0,\n                0, 0, 0, 1, 0]),\n            uAlpha: 1,\n        };\n\n        super(defaultFilterVertex, fragment, uniforms);\n\n        this.alpha = 1;\n    }\n\n    /**\n     * Transforms current matrix and set the new one\n     * @param {number[]} matrix - 5x4 matrix\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    private _loadMatrix(matrix: ColorMatrix, multiply = false): void\n    {\n        let newMatrix = matrix;\n\n        if (multiply)\n        {\n            this._multiply(newMatrix, this.uniforms.m, matrix);\n            newMatrix = this._colorMatrix(newMatrix) as any;\n        }\n\n        // set the new matrix\n        this.uniforms.m = newMatrix;\n    }\n\n    /**\n     * Multiplies two mat5's\n     * @private\n     * @param out - 5x4 matrix the receiving matrix\n     * @param a - 5x4 matrix the first operand\n     * @param b - 5x4 matrix the second operand\n     * @returns {number[]} 5x4 matrix\n     */\n    private _multiply(out: ColorMatrix, a: ColorMatrix, b: ColorMatrix): ColorMatrix\n    {\n        // Red Channel\n        out[0] = (a[0] * b[0]) + (a[1] * b[5]) + (a[2] * b[10]) + (a[3] * b[15]);\n        out[1] = (a[0] * b[1]) + (a[1] * b[6]) + (a[2] * b[11]) + (a[3] * b[16]);\n        out[2] = (a[0] * b[2]) + (a[1] * b[7]) + (a[2] * b[12]) + (a[3] * b[17]);\n        out[3] = (a[0] * b[3]) + (a[1] * b[8]) + (a[2] * b[13]) + (a[3] * b[18]);\n        out[4] = (a[0] * b[4]) + (a[1] * b[9]) + (a[2] * b[14]) + (a[3] * b[19]) + a[4];\n\n        // Green Channel\n        out[5] = (a[5] * b[0]) + (a[6] * b[5]) + (a[7] * b[10]) + (a[8] * b[15]);\n        out[6] = (a[5] * b[1]) + (a[6] * b[6]) + (a[7] * b[11]) + (a[8] * b[16]);\n        out[7] = (a[5] * b[2]) + (a[6] * b[7]) + (a[7] * b[12]) + (a[8] * b[17]);\n        out[8] = (a[5] * b[3]) + (a[6] * b[8]) + (a[7] * b[13]) + (a[8] * b[18]);\n        out[9] = (a[5] * b[4]) + (a[6] * b[9]) + (a[7] * b[14]) + (a[8] * b[19]) + a[9];\n\n        // Blue Channel\n        out[10] = (a[10] * b[0]) + (a[11] * b[5]) + (a[12] * b[10]) + (a[13] * b[15]);\n        out[11] = (a[10] * b[1]) + (a[11] * b[6]) + (a[12] * b[11]) + (a[13] * b[16]);\n        out[12] = (a[10] * b[2]) + (a[11] * b[7]) + (a[12] * b[12]) + (a[13] * b[17]);\n        out[13] = (a[10] * b[3]) + (a[11] * b[8]) + (a[12] * b[13]) + (a[13] * b[18]);\n        out[14] = (a[10] * b[4]) + (a[11] * b[9]) + (a[12] * b[14]) + (a[13] * b[19]) + a[14];\n\n        // Alpha Channel\n        out[15] = (a[15] * b[0]) + (a[16] * b[5]) + (a[17] * b[10]) + (a[18] * b[15]);\n        out[16] = (a[15] * b[1]) + (a[16] * b[6]) + (a[17] * b[11]) + (a[18] * b[16]);\n        out[17] = (a[15] * b[2]) + (a[16] * b[7]) + (a[17] * b[12]) + (a[18] * b[17]);\n        out[18] = (a[15] * b[3]) + (a[16] * b[8]) + (a[17] * b[13]) + (a[18] * b[18]);\n        out[19] = (a[15] * b[4]) + (a[16] * b[9]) + (a[17] * b[14]) + (a[18] * b[19]) + a[19];\n\n        return out;\n    }\n\n    /**\n     * Create a Float32 Array and normalize the offset component to 0-1\n     * @param {number[]} matrix - 5x4 matrix\n     * @returns {number[]} 5x4 matrix with all values between 0-1\n     */\n    private _colorMatrix(matrix: ColorMatrix): ColorMatrix\n    {\n        // Create a Float32 Array and normalize the offset component to 0-1\n        const m = new Float32Array(matrix);\n\n        m[4] /= 255;\n        m[9] /= 255;\n        m[14] /= 255;\n        m[19] /= 255;\n\n        return m as any;\n    }\n\n    /**\n     * Adjusts brightness\n     * @param b - value of the brigthness (0-1, where 0 is black)\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public brightness(b: number, multiply: boolean): void\n    {\n        const matrix: ColorMatrix = [\n            b, 0, 0, 0, 0,\n            0, b, 0, 0, 0,\n            0, 0, b, 0, 0,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * Sets each channel on the diagonal of the color matrix.\n     * This can be used to achieve a tinting effect on Containers similar to the tint field of some\n     * display objects like Sprite, Text, Graphics, and Mesh.\n     * @param color - Color of the tint. This is a hex value.\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public tint(color: number, multiply?: boolean): void\n    {\n        const [r, g, b] = Color.shared.setValue(color).toArray();\n        const matrix: ColorMatrix = [\n            r, 0, 0, 0, 0,\n            0, g, 0, 0, 0,\n            0, 0, b, 0, 0,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * Set the matrices in grey scales\n     * @param scale - value of the grey (0-1, where 0 is black)\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public greyscale(scale: number, multiply: boolean): void\n    {\n        const matrix: ColorMatrix = [\n            scale, scale, scale, 0, 0,\n            scale, scale, scale, 0, 0,\n            scale, scale, scale, 0, 0,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * Americanized alias of greyscale.\n     * @method\n     * @param scale - value of the grey (0-1, where 0 is black)\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     * @returns {void}\n     * @see PIXI.ColorMatrixFilter.greyscale\n     */\n    public grayscale!: (scale: number, multiply: boolean) => void;\n\n    /**\n     * Set the black and white matrice.\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public blackAndWhite(multiply: boolean): void\n    {\n        const matrix: ColorMatrix = [\n            0.3, 0.6, 0.1, 0, 0,\n            0.3, 0.6, 0.1, 0, 0,\n            0.3, 0.6, 0.1, 0, 0,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * Set the hue property of the color\n     * @param rotation - in degrees\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public hue(rotation: number, multiply: boolean): void\n    {\n        rotation = (rotation || 0) / 180 * Math.PI;\n\n        const cosR = Math.cos(rotation);\n        const sinR = Math.sin(rotation);\n        const sqrt = Math.sqrt;\n\n        /* a good approximation for hue rotation\n         This matrix is far better than the versions with magic luminance constants\n         formerly used here, but also used in the starling framework (flash) and known from this\n         old part of the internet: quasimondo.com/archives/000565.php\n\n         This new matrix is based on rgb cube rotation in space. Look here for a more descriptive\n         implementation as a shader not a general matrix:\n         https://github.com/evanw/glfx.js/blob/58841c23919bd59787effc0333a4897b43835412/src/filters/adjust/huesaturation.js\n\n         This is the source for the code:\n         see http://stackoverflow.com/questions/8507885/shift-hue-of-an-rgb-color/8510751#8510751\n         */\n\n        const w = 1 / 3;\n        const sqrW = sqrt(w); // weight is\n\n        const a00 = cosR + ((1.0 - cosR) * w);\n        const a01 = (w * (1.0 - cosR)) - (sqrW * sinR);\n        const a02 = (w * (1.0 - cosR)) + (sqrW * sinR);\n\n        const a10 = (w * (1.0 - cosR)) + (sqrW * sinR);\n        const a11 = cosR + (w * (1.0 - cosR));\n        const a12 = (w * (1.0 - cosR)) - (sqrW * sinR);\n\n        const a20 = (w * (1.0 - cosR)) - (sqrW * sinR);\n        const a21 = (w * (1.0 - cosR)) + (sqrW * sinR);\n        const a22 = cosR + (w * (1.0 - cosR));\n\n        const matrix: ColorMatrix = [\n            a00, a01, a02, 0, 0,\n            a10, a11, a12, 0, 0,\n            a20, a21, a22, 0, 0,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * Set the contrast matrix, increase the separation between dark and bright\n     * Increase contrast : shadows darker and highlights brighter\n     * Decrease contrast : bring the shadows up and the highlights down\n     * @param amount - value of the contrast (0-1)\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public contrast(amount: number, multiply: boolean): void\n    {\n        const v = (amount || 0) + 1;\n        const o = -0.5 * (v - 1);\n\n        const matrix: ColorMatrix = [\n            v, 0, 0, 0, o,\n            0, v, 0, 0, o,\n            0, 0, v, 0, o,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * Set the saturation matrix, increase the separation between colors\n     * Increase saturation : increase contrast, brightness, and sharpness\n     * @param amount - The saturation amount (0-1)\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public saturate(amount = 0, multiply?: boolean): void\n    {\n        const x = (amount * 2 / 3) + 1;\n        const y = ((x - 1) * -0.5);\n\n        const matrix: ColorMatrix = [\n            x, y, y, 0, 0,\n            y, x, y, 0, 0,\n            y, y, x, 0, 0,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /** Desaturate image (remove color) Call the saturate function */\n    public desaturate(): void // eslint-disable-line no-unused-vars\n    {\n        this.saturate(-1);\n    }\n\n    /**\n     * Negative image (inverse of classic rgb matrix)\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public negative(multiply: boolean): void\n    {\n        const matrix: ColorMatrix = [\n            -1, 0, 0, 1, 0,\n            0, -1, 0, 1, 0,\n            0, 0, -1, 1, 0,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * Sepia image\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public sepia(multiply: boolean): void\n    {\n        const matrix: ColorMatrix = [\n            0.393, 0.7689999, 0.18899999, 0, 0,\n            0.349, 0.6859999, 0.16799999, 0, 0,\n            0.272, 0.5339999, 0.13099999, 0, 0,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * Color motion picture process invented in 1916 (thanks Dominic Szablewski)\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public technicolor(multiply: boolean): void\n    {\n        const matrix: ColorMatrix = [\n            1.9125277891456083, -0.8545344976951645, -0.09155508482755585, 0, 11.793603434377337,\n            -0.3087833385928097, 1.7658908555458428, -0.10601743074722245, 0, -70.35205161461398,\n            -0.231103377548616, -0.7501899197440212, 1.847597816108189, 0, 30.950940869491138,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * Polaroid filter\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public polaroid(multiply: boolean): void\n    {\n        const matrix: ColorMatrix = [\n            1.438, -0.062, -0.062, 0, 0,\n            -0.122, 1.378, -0.122, 0, 0,\n            -0.016, -0.016, 1.483, 0, 0,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * Filter who transforms : Red -> Blue and Blue -> Red\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public toBGR(multiply: boolean): void\n    {\n        const matrix: ColorMatrix = [\n            0, 0, 1, 0, 0,\n            0, 1, 0, 0, 0,\n            1, 0, 0, 0, 0,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * Color reversal film introduced by Eastman Kodak in 1935. (thanks Dominic Szablewski)\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public kodachrome(multiply: boolean): void\n    {\n        const matrix: ColorMatrix = [\n            1.1285582396593525, -0.3967382283601348, -0.03992559172921793, 0, 63.72958762196502,\n            -0.16404339962244616, 1.0835251566291304, -0.05498805115633132, 0, 24.732407896706203,\n            -0.16786010706155763, -0.5603416277695248, 1.6014850761964943, 0, 35.62982807460946,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * Brown delicious browni filter (thanks Dominic Szablewski)\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public browni(multiply: boolean): void\n    {\n        const matrix: ColorMatrix = [\n            0.5997023498159715, 0.34553243048391263, -0.2708298674538042, 0, 47.43192855600873,\n            -0.037703249837783157, 0.8609577587992641, 0.15059552388459913, 0, -36.96841498319127,\n            0.24113635128153335, -0.07441037908422492, 0.44972182064877153, 0, -7.562075277591283,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * Vintage filter (thanks Dominic Szablewski)\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public vintage(multiply: boolean): void\n    {\n        const matrix: ColorMatrix = [\n            0.6279345635605994, 0.3202183420819367, -0.03965408211312453, 0, 9.651285835294123,\n            0.02578397704808868, 0.6441188644374771, 0.03259127616149294, 0, 7.462829176470591,\n            0.0466055556782719, -0.0851232987247891, 0.5241648018700465, 0, 5.159190588235296,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * We don't know exactly what it does, kind of gradient map, but funny to play with!\n     * @param desaturation - Tone values.\n     * @param toned - Tone values.\n     * @param lightColor - Tone values, example: `0xFFE580`\n     * @param darkColor - Tone values, example: `0xFFE580`\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public colorTone(desaturation: number, toned: number, lightColor: number, darkColor: number, multiply: boolean): void\n    {\n        desaturation = desaturation || 0.2;\n        toned = toned || 0.15;\n        lightColor = lightColor || 0xFFE580;\n        darkColor = darkColor || 0x338000;\n\n        const temp = Color.shared;\n        const [lR, lG, lB] = temp.setValue(lightColor).toArray();\n        const [dR, dG, dB] = temp.setValue(darkColor).toArray();\n\n        const matrix: ColorMatrix = [\n            0.3, 0.59, 0.11, 0, 0,\n            lR, lG, lB, desaturation, 0,\n            dR, dG, dB, toned, 0,\n            lR - dR, lG - dG, lB - dB, 0, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * Night effect\n     * @param intensity - The intensity of the night effect.\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public night(intensity: number, multiply: boolean): void\n    {\n        intensity = intensity || 0.1;\n\n        const matrix: ColorMatrix = [\n            intensity * (-2.0), -intensity, 0, 0, 0,\n            -intensity, 0, intensity, 0, 0,\n            0, intensity, intensity * 2.0, 0, 0,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * Predator effect\n     *\n     * Erase the current matrix by setting a new indepent one\n     * @param amount - how much the predator feels his future victim\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public predator(amount: number, multiply: boolean): void\n    {\n        const matrix: ColorMatrix = [\n            // row 1\n            11.224130630493164 * amount,\n            -4.794486999511719 * amount,\n            -2.8746118545532227 * amount,\n            0 * amount,\n            0.40342438220977783 * amount,\n            // row 2\n            -3.6330697536468506 * amount,\n            9.193157196044922 * amount,\n            -2.951810836791992 * amount,\n            0 * amount,\n            -1.316135048866272 * amount,\n            // row 3\n            -3.2184197902679443 * amount,\n            -4.2375030517578125 * amount,\n            7.476448059082031 * amount,\n            0 * amount,\n            0.8044459223747253 * amount,\n            // row 4\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * LSD effect\n     *\n     * Multiply the current matrix\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public lsd(multiply: boolean): void\n    {\n        const matrix: ColorMatrix = [\n            2, -0.4, 0.5, 0, 0,\n            -0.5, 2, -0.4, 0, 0,\n            -0.4, -0.5, 3, 0, 0,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /** Erase the current matrix by setting the default one. */\n    public reset(): void\n    {\n        const matrix: ColorMatrix = [\n            1, 0, 0, 0, 0,\n            0, 1, 0, 0, 0,\n            0, 0, 1, 0, 0,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, false);\n    }\n\n    /**\n     * The matrix of the color matrix filter\n     * @member {number[]}\n     * @default [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0]\n     */\n    get matrix(): ColorMatrix\n    {\n        return this.uniforms.m;\n    }\n\n    set matrix(value: ColorMatrix)\n    {\n        this.uniforms.m = value;\n    }\n\n    /**\n     * The opacity value to use when mixing the original and resultant colors.\n     *\n     * When the value is 0, the original color is used without modification.\n     * When the value is 1, the result color is used.\n     * When in the range (0, 1) the color is interpolated between the original and result by this amount.\n     * @default 1\n     */\n    get alpha(): number\n    {\n        return this.uniforms.uAlpha;\n    }\n\n    set alpha(value: number)\n    {\n        this.uniforms.uAlpha = value;\n    }\n}\n\n// Americanized alias\nColorMatrixFilter.prototype.grayscale = ColorMatrixFilter.prototype.greyscale;\n", "var fragment = \"varying vec2 vFilterCoord;\\nvarying vec2 vTextureCoord;\\n\\nuniform vec2 scale;\\nuniform mat2 rotation;\\nuniform sampler2D uSampler;\\nuniform sampler2D mapSampler;\\n\\nuniform highp vec4 inputSize;\\nuniform vec4 inputClamp;\\n\\nvoid main(void)\\n{\\n  vec4 map =  texture2D(mapSampler, vFilterCoord);\\n\\n  map -= 0.5;\\n  map.xy = scale * inputSize.zw * (rotation * map.xy);\\n\\n  gl_FragColor = texture2D(uSampler, clamp(vec2(vTextureCoord.x + map.x, vTextureCoord.y + map.y), inputClamp.xy, inputClamp.zw));\\n}\\n\";\n\nexport { fragment as default };\n//# sourceMappingURL=displacement.mjs.map\n", "var vertex = \"attribute vec2 aVertexPosition;\\n\\nuniform mat3 projectionMatrix;\\nuniform mat3 filterMatrix;\\n\\nvarying vec2 vTextureCoord;\\nvarying vec2 vFilterCoord;\\n\\nuniform vec4 inputSize;\\nuniform vec4 outputFrame;\\n\\nvec4 filterVertexPosition( void )\\n{\\n    vec2 position = aVertexPosition * max(outputFrame.zw, vec2(0.)) + outputFrame.xy;\\n\\n    return vec4((projectionMatrix * vec3(position, 1.0)).xy, 0.0, 1.0);\\n}\\n\\nvec2 filterTextureCoord( void )\\n{\\n    return aVertexPosition * (outputFrame.zw * inputSize.zw);\\n}\\n\\nvoid main(void)\\n{\\n\\tgl_Position = filterVertexPosition();\\n\\tvTextureCoord = filterTextureCoord();\\n\\tvFilterCoord = ( filterMatrix * vec3( vTextureCoord, 1.0)  ).xy;\\n}\\n\";\n\nexport { vertex as default };\n//# sourceMappingURL=displacement2.mjs.map\n", "import { Filter, Matrix, Point } from '@pixi/core';\nimport fragment from './displacement.frag';\nimport vertex from './displacement.vert';\n\nimport type { CLEAR_MODES, FilterSystem, ISpriteMaskTarget, RenderTexture, Texture } from '@pixi/core';\n\n/**\n * The DisplacementFilter class uses the pixel values from the specified texture\n * (called the displacement map) to perform a displacement of an object.\n *\n * You can use this filter to apply all manor of crazy warping effects.\n * Currently the `r` property of the texture is used to offset the `x`\n * and the `g` property of the texture is used to offset the `y`.\n *\n * The way it works is it uses the values of the displacement map to look up the\n * correct pixels to output. This means it's not technically moving the original.\n * Instead, it's starting at the output and asking \"which pixel from the original goes here\".\n * For example, if a displacement map pixel has `red = 1` and the filter scale is `20`,\n * this filter will output the pixel approximately 20 pixels to the right of the original.\n * @memberof PIXI\n */\nexport class DisplacementFilter extends Filter\n{\n    public maskSprite: ISpriteMaskTarget;\n    public maskMatrix: Matrix;\n    public scale: Point;\n\n    /**\n     * @param {PIXI.Sprite} sprite - The sprite used for the displacement map. (make sure its added to the scene!)\n     * @param scale - The scale of the displacement\n     */\n    constructor(sprite: ISpriteMaskTarget, scale?: number)\n    {\n        const maskMatrix = new Matrix();\n\n        sprite.renderable = false;\n\n        super(vertex, fragment, {\n            mapSampler: sprite._texture,\n            filterMatrix: maskMatrix,\n            scale: { x: 1, y: 1 },\n            rotation: new Float32Array([1, 0, 0, 1]),\n        });\n\n        this.maskSprite = sprite;\n        this.maskMatrix = maskMatrix;\n\n        if (scale === null || scale === undefined)\n        {\n            scale = 20;\n        }\n\n        /**\n         * scaleX, scaleY for displacements\n         * @member {PIXI.Point}\n         */\n        this.scale = new Point(scale, scale);\n    }\n\n    /**\n     * Applies the filter.\n     * @param filterManager - The manager.\n     * @param input - The input target.\n     * @param output - The output target.\n     * @param clearMode - clearMode.\n     */\n    public apply(\n        filterManager: FilterSystem, input: RenderTexture, output: RenderTexture, clearMode: CLEAR_MODES\n    ): void\n    {\n        // fill maskMatrix with _normalized sprite texture coords_\n        this.uniforms.filterMatrix = filterManager.calculateSpriteMatrix(this.maskMatrix, this.maskSprite);\n        this.uniforms.scale.x = this.scale.x;\n        this.uniforms.scale.y = this.scale.y;\n\n        // Extract rotation from world transform\n        const wt = this.maskSprite.worldTransform;\n        const lenX = Math.sqrt((wt.a * wt.a) + (wt.b * wt.b));\n        const lenY = Math.sqrt((wt.c * wt.c) + (wt.d * wt.d));\n\n        if (lenX !== 0 && lenY !== 0)\n        {\n            this.uniforms.rotation[0] = wt.a / lenX;\n            this.uniforms.rotation[1] = wt.b / lenX;\n            this.uniforms.rotation[2] = wt.c / lenY;\n            this.uniforms.rotation[3] = wt.d / lenY;\n        }\n\n        // draw the filter...\n        filterManager.applyFilter(this, input, output, clearMode);\n    }\n\n    /** The texture used for the displacement map. Must be power of 2 sized texture. */\n    get map(): Texture\n    {\n        return this.uniforms.mapSampler;\n    }\n\n    set map(value: Texture)\n    {\n        this.uniforms.mapSampler = value;\n    }\n}\n", "var fragment = \"varying vec2 v_rgbNW;\\nvarying vec2 v_rgbNE;\\nvarying vec2 v_rgbSW;\\nvarying vec2 v_rgbSE;\\nvarying vec2 v_rgbM;\\n\\nvarying vec2 vFragCoord;\\nuniform sampler2D uSampler;\\nuniform highp vec4 inputSize;\\n\\n\\n/**\\n Basic FXAA implementation based on the code on geeks3d.com with the\\n modification that the texture2DLod stuff was removed since it's\\n unsupported by WebGL.\\n\\n --\\n\\n From:\\n https://github.com/mitsuhiko/webgl-meincraft\\n\\n Copyright (c) 2011 by Armin Ronacher.\\n\\n Some rights reserved.\\n\\n Redistribution and use in source and binary forms, with or without\\n modification, are permitted provided that the following conditions are\\n met:\\n\\n * Redistributions of source code must retain the above copyright\\n notice, this list of conditions and the following disclaimer.\\n\\n * Redistributions in binary form must reproduce the above\\n copyright notice, this list of conditions and the following\\n disclaimer in the documentation and/or other materials provided\\n with the distribution.\\n\\n * The names of the contributors may not be used to endorse or\\n promote products derived from this software without specific\\n prior written permission.\\n\\n THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\\n \\\"AS IS\\\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\\n LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\\n A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\\n OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\\n SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\\n DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\\n THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\\n (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\\n OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n */\\n\\n#ifndef FXAA_REDUCE_MIN\\n#define FXAA_REDUCE_MIN   (1.0/ 128.0)\\n#endif\\n#ifndef FXAA_REDUCE_MUL\\n#define FXAA_REDUCE_MUL   (1.0 / 8.0)\\n#endif\\n#ifndef FXAA_SPAN_MAX\\n#define FXAA_SPAN_MAX     8.0\\n#endif\\n\\n//optimized version for mobile, where dependent\\n//texture reads can be a bottleneck\\nvec4 fxaa(sampler2D tex, vec2 fragCoord, vec2 inverseVP,\\n          vec2 v_rgbNW, vec2 v_rgbNE,\\n          vec2 v_rgbSW, vec2 v_rgbSE,\\n          vec2 v_rgbM) {\\n    vec4 color;\\n    vec3 rgbNW = texture2D(tex, v_rgbNW).xyz;\\n    vec3 rgbNE = texture2D(tex, v_rgbNE).xyz;\\n    vec3 rgbSW = texture2D(tex, v_rgbSW).xyz;\\n    vec3 rgbSE = texture2D(tex, v_rgbSE).xyz;\\n    vec4 texColor = texture2D(tex, v_rgbM);\\n    vec3 rgbM  = texColor.xyz;\\n    vec3 luma = vec3(0.299, 0.587, 0.114);\\n    float lumaNW = dot(rgbNW, luma);\\n    float lumaNE = dot(rgbNE, luma);\\n    float lumaSW = dot(rgbSW, luma);\\n    float lumaSE = dot(rgbSE, luma);\\n    float lumaM  = dot(rgbM,  luma);\\n    float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));\\n    float lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));\\n\\n    mediump vec2 dir;\\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\\n\\n    float dirReduce = max((lumaNW + lumaNE + lumaSW + lumaSE) *\\n                          (0.25 * FXAA_REDUCE_MUL), FXAA_REDUCE_MIN);\\n\\n    float rcpDirMin = 1.0 / (min(abs(dir.x), abs(dir.y)) + dirReduce);\\n    dir = min(vec2(FXAA_SPAN_MAX, FXAA_SPAN_MAX),\\n              max(vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\\n                  dir * rcpDirMin)) * inverseVP;\\n\\n    vec3 rgbA = 0.5 * (\\n                       texture2D(tex, fragCoord * inverseVP + dir * (1.0 / 3.0 - 0.5)).xyz +\\n                       texture2D(tex, fragCoord * inverseVP + dir * (2.0 / 3.0 - 0.5)).xyz);\\n    vec3 rgbB = rgbA * 0.5 + 0.25 * (\\n                                     texture2D(tex, fragCoord * inverseVP + dir * -0.5).xyz +\\n                                     texture2D(tex, fragCoord * inverseVP + dir * 0.5).xyz);\\n\\n    float lumaB = dot(rgbB, luma);\\n    if ((lumaB < lumaMin) || (lumaB > lumaMax))\\n        color = vec4(rgbA, texColor.a);\\n    else\\n        color = vec4(rgbB, texColor.a);\\n    return color;\\n}\\n\\nvoid main() {\\n\\n      vec4 color;\\n\\n      color = fxaa(uSampler, vFragCoord, inputSize.zw, v_rgbNW, v_rgbNE, v_rgbSW, v_rgbSE, v_rgbM);\\n\\n      gl_FragColor = color;\\n}\\n\";\n\nexport { fragment as default };\n//# sourceMappingURL=fxaa.mjs.map\n", "var vertex = \"\\nattribute vec2 aVertexPosition;\\n\\nuniform mat3 projectionMatrix;\\n\\nvarying vec2 v_rgbNW;\\nvarying vec2 v_rgbNE;\\nvarying vec2 v_rgbSW;\\nvarying vec2 v_rgbSE;\\nvarying vec2 v_rgbM;\\n\\nvarying vec2 vFragCoord;\\n\\nuniform vec4 inputSize;\\nuniform vec4 outputFrame;\\n\\nvec4 filterVertexPosition( void )\\n{\\n    vec2 position = aVertexPosition * max(outputFrame.zw, vec2(0.)) + outputFrame.xy;\\n\\n    return vec4((projectionMatrix * vec3(position, 1.0)).xy, 0.0, 1.0);\\n}\\n\\nvoid texcoords(vec2 fragCoord, vec2 inverseVP,\\n               out vec2 v_rgbNW, out vec2 v_rgbNE,\\n               out vec2 v_rgbSW, out vec2 v_rgbSE,\\n               out vec2 v_rgbM) {\\n    v_rgbNW = (fragCoord + vec2(-1.0, -1.0)) * inverseVP;\\n    v_rgbNE = (fragCoord + vec2(1.0, -1.0)) * inverseVP;\\n    v_rgbSW = (fragCoord + vec2(-1.0, 1.0)) * inverseVP;\\n    v_rgbSE = (fragCoord + vec2(1.0, 1.0)) * inverseVP;\\n    v_rgbM = vec2(fragCoord * inverseVP);\\n}\\n\\nvoid main(void) {\\n\\n   gl_Position = filterVertexPosition();\\n\\n   vFragCoord = aVertexPosition * outputFrame.zw;\\n\\n   texcoords(vFragCoord, inputSize.zw, v_rgbNW, v_rgbNE, v_rgbSW, v_rgbSE, v_rgbM);\\n}\\n\";\n\nexport { vertex as default };\n//# sourceMappingURL=fxaa2.mjs.map\n", "import { Filter } from '@pixi/core';\nimport fragment from './fxaa.frag';\nimport vertex from './fxaa.vert';\n\n/**\n * Basic FXAA (Fast Approximate Anti-Aliasing) implementation based on the code on geeks3d.com\n * with the modification that the texture2DLod stuff was removed since it is unsupported by WebGL.\n * @see https://github.com/mitsuhiko/webgl-meincraft\n * @memberof PIXI\n */\nexport class FXAAFilter extends Filter\n{\n    constructor()\n    {\n        // TODO - needs work\n        super(vertex, fragment);\n    }\n}\n", "var fragment = \"precision highp float;\\n\\nvarying vec2 vTextureCoord;\\nvarying vec4 vColor;\\n\\nuniform float uNoise;\\nuniform float uSeed;\\nuniform sampler2D uSampler;\\n\\nfloat rand(vec2 co)\\n{\\n    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\\n}\\n\\nvoid main()\\n{\\n    vec4 color = texture2D(uSampler, vTextureCoord);\\n    float randomValue = rand(gl_FragCoord.xy * uSeed);\\n    float diff = (randomValue - 0.5) * uNoise;\\n\\n    // Un-premultiply alpha before applying the color matrix. See issue #3539.\\n    if (color.a > 0.0) {\\n        color.rgb /= color.a;\\n    }\\n\\n    color.r += diff;\\n    color.g += diff;\\n    color.b += diff;\\n\\n    // Premultiply alpha again.\\n    color.rgb *= color.a;\\n\\n    gl_FragColor = color;\\n}\\n\";\n\nexport { fragment as default };\n//# sourceMappingURL=noise.mjs.map\n", "import { defaultFilterVertex, Filter } from '@pixi/core';\nimport fragment from './noise.frag';\n\n/**\n * A Noise effect filter.\n *\n * original filter: https://github.com/evanw/glfx.js/blob/master/src/filters/adjust/noise.js\n * @memberof PIXI\n * @author Vico @vicocotea\n */\nexport class NoiseFilter extends Filter\n{\n    /**\n     * @param {number} [noise=0.5] - The noise intensity, should be a normalized value in the range [0, 1].\n     * @param {number} [seed] - A random seed for the noise generation. Default is `Math.random()`.\n     */\n    constructor(noise = 0.5, seed = Math.random())\n    {\n        super(defaultFilterVertex, fragment, {\n            uNoise: 0,\n            uSeed: 0,\n        });\n\n        this.noise = noise;\n        this.seed = seed;\n    }\n\n    /**\n     * The amount of noise to apply, this value should be in the range (0, 1].\n     * @default 0.5\n     */\n    get noise(): number\n    {\n        return this.uniforms.uNoise;\n    }\n\n    set noise(value: number)\n    {\n        this.uniforms.uNoise = value;\n    }\n\n    /** A seed value to apply to the random noise generation. `Math.random()` is a good value to use. */\n    get seed(): number\n    {\n        return this.uniforms.uSeed;\n    }\n\n    set seed(value: number)\n    {\n        this.uniforms.uSeed = value;\n    }\n}\n", "import { utils } from '@pixi/core';\nimport { AlphaFilter } from '@pixi/filter-alpha';\nimport { BlurFilter, BlurFilterPass } from '@pixi/filter-blur';\nimport { ColorMatrixFilter } from '@pixi/filter-color-matrix';\nimport { DisplacementFilter } from '@pixi/filter-displacement';\nimport { FXAAFilter } from '@pixi/filter-fxaa';\nimport { NoiseFilter } from '@pixi/filter-noise';\n\n/**\n * Filters namespace has been removed. All filters are now available directly from the root of the package.\n * @namespace PIXI.filters\n * @deprecated\n */\nconst filters = {\n    /**\n     * @class\n     * @memberof PIXI.filters\n     * @deprecated since 7.1.0\n     * @see PIXI.AlphaFilter\n     */\n    AlphaFilter,\n    /**\n     * @class\n     * @memberof PIXI.filters\n     * @deprecated since 7.1.0\n     * @see PIXI.BlurFilter\n     */\n    BlurFilter,\n    /**\n     * @class\n     * @memberof PIXI.filters\n     * @deprecated since 7.1.0\n     * @see PIXI.BlurFilterPass\n     */\n    BlurFilterPass,\n    /**\n     * @class\n     * @memberof PIXI.filters\n     * @deprecated since 7.1.0\n     * @see PIXI.ColorMatrixFilter\n     */\n    ColorMatrixFilter,\n    /**\n     * @class\n     * @memberof PIXI.filters\n     * @deprecated since 7.1.0\n     * @see PIXI.DisplacementFilter\n     */\n    DisplacementFilter,\n    /**\n     * @class\n     * @memberof PIXI.filters\n     * @deprecated since 7.1.0\n     * @see PIXI.FXAAFilter\n     */\n    FXAAFilter,\n    /**\n     * @class\n     * @memberof PIXI.filters\n     * @deprecated since 7.1.0\n     * @see PIXI.NoiseFilter\n     */\n    NoiseFilter,\n};\n\nObject.entries(filters).forEach(([key, FilterClass]) =>\n{\n    Object.defineProperty(filters, key, {\n        get()\n        {\n            // #if _DEBUG\n            utils.deprecation('7.1.0', `filters.${key} has moved to ${key}`);\n            // #endif\n\n            return FilterClass;\n        },\n    });\n});\n\nexport { filters };\n", "import { Ticker, UPDATE_PRIORITY } from '@pixi/core';\n\nimport type { EventSystem } from './EventSystem';\n\n/**\n * This class handles automatic firing of PointerEvents\n * in the case where the pointer is stationary for too long.\n * This is to ensure that hit-tests are still run on moving objects.\n * @memberof PIXI\n * @since 7.2.0\n * @see PIXI.EventsTicker\n */\nclass EventsTickerClass\n{\n    /** The event system. */\n    public events: EventSystem;\n    /** The DOM element to listen to events on. */\n    public domElement: HTMLElement;\n    /** The frequency that fake events will be fired. */\n    public interactionFrequency = 10;\n\n    private _deltaTime = 0;\n    private _didMove = false;\n    private tickerAdded = false;\n    private _pauseUpdate = true;\n\n    /**\n     * Initializes the event ticker.\n     * @param events - The event system.\n     */\n    public init(events: EventSystem): void\n    {\n        this.removeTickerListener();\n        this.events = events;\n        this.interactionFrequency = 10;\n        this._deltaTime = 0;\n        this._didMove = false;\n        this.tickerAdded = false;\n        this._pauseUpdate = true;\n    }\n\n    /** Whether to pause the update checks or not. */\n    get pauseUpdate(): boolean\n    {\n        return this._pauseUpdate;\n    }\n\n    set pauseUpdate(paused: boolean)\n    {\n        this._pauseUpdate = paused;\n    }\n\n    /** Adds the ticker listener. */\n    public addTickerListener(): void\n    {\n        if (this.tickerAdded || !this.domElement)\n        {\n            return;\n        }\n\n        Ticker.system.add(this.tickerUpdate, this, UPDATE_PRIORITY.INTERACTION);\n\n        this.tickerAdded = true;\n    }\n\n    /** Removes the ticker listener. */\n    public removeTickerListener(): void\n    {\n        if (!this.tickerAdded)\n        {\n            return;\n        }\n\n        Ticker.system.remove(this.tickerUpdate, this);\n\n        this.tickerAdded = false;\n    }\n\n    /** Sets flag to not fire extra events when the user has already moved there mouse */\n    public pointerMoved(): void\n    {\n        this._didMove = true;\n    }\n\n    /** Updates the state of interactive objects. */\n    private update(): void\n    {\n        if (!this.domElement || this._pauseUpdate)\n        {\n            return;\n        }\n\n        // if the user move the mouse this check has already been done using the mouse move!\n        if (this._didMove)\n        {\n            this._didMove = false;\n\n            return;\n        }\n\n        // eslint-disable-next-line dot-notation\n        const rootPointerEvent = this.events['rootPointerEvent'];\n\n        if (this.events.supportsTouchEvents && (rootPointerEvent as PointerEvent).pointerType === 'touch')\n        {\n            return;\n        }\n\n        globalThis.document.dispatchEvent(new PointerEvent('pointermove', {\n            clientX: rootPointerEvent.clientX,\n            clientY: rootPointerEvent.clientY,\n        }));\n    }\n\n    /**\n     * Updates the state of interactive objects if at least {@link interactionFrequency}\n     * milliseconds have passed since the last invocation.\n     *\n     * Invoked by a throttled ticker update from {@link PIXI.Ticker.system}.\n     * @param deltaTime - time delta since the last call\n     */\n    private tickerUpdate(deltaTime: number): void\n    {\n        this._deltaTime += deltaTime;\n\n        if (this._deltaTime < this.interactionFrequency)\n        {\n            return;\n        }\n\n        this._deltaTime = 0;\n\n        this.update();\n    }\n}\n\n/**\n * This class handles automatic firing of PointerEvents\n * in the case where the pointer is stationary for too long.\n * This is to ensure that hit-tests are still run on moving objects.\n * @memberof PIXI\n * @type {PIXI.EventsTickerClass}\n * @since 7.2.0\n */\nexport const EventsTicker = new EventsTickerClass();\n", "import { Point } from '@pixi/core';\n\nimport type { EventBoundary } from './EventBoundary';\nimport type { FederatedEventTarget } from './FederatedEventTarget';\n\n/**\n * An DOM-compatible synthetic event implementation that is \"forwarded\" on behalf of an original\n * FederatedEvent or native {@link https://dom.spec.whatwg.org/#event Event}.\n * @memberof PIXI\n * @typeParam N - The type of native event held.\n */\nexport class FederatedEvent<N extends UIEvent = UIEvent> implements UIEvent\n{\n    /** Flags whether this event bubbles. This will take effect only if it is set before propagation. */\n    public bubbles = true;\n\n    /** @deprecated since 7.0.0 */\n    public cancelBubble = true;\n\n    /**\n     * Flags whether this event can be canceled using {@link PIXI.FederatedEvent.preventDefault}. This is always\n     * false (for now).\n     */\n    public readonly cancelable = false;\n\n    /**\n     * Flag added for compatibility with DOM {@code Event}. It is not used in the Federated Events\n     * API.\n     * @see https://dom.spec.whatwg.org/#dom-event-composed\n     */\n    public readonly composed = false;\n\n    /** The listeners of the event target that are being notified. */\n    public currentTarget: FederatedEventTarget;\n\n    /** Flags whether the default response of the user agent was prevent through this event. */\n    public defaultPrevented = false;\n\n    /**\n     * The propagation phase.\n     * @default {@link PIXI.FederatedEvent.NONE}\n     */\n    public eventPhase = FederatedEvent.prototype.NONE;\n\n    /** Flags whether this is a user-trusted event */\n    public isTrusted: boolean;\n\n    /** @deprecated since 7.0.0 */\n    public returnValue: boolean;\n\n    /** @deprecated since 7.0.0 */\n    public srcElement: EventTarget;\n\n    /** The event target that this will be dispatched to. */\n    public target: FederatedEventTarget;\n\n    /** The timestamp of when the event was created. */\n    public timeStamp: number;\n\n    /** The type of event, e.g. {@code \"mouseup\"}. */\n    public type: string;\n\n    /** The native event that caused the foremost original event. */\n    public nativeEvent: N;\n\n    /** The original event that caused this event, if any. */\n    public originalEvent: FederatedEvent<N>;\n\n    /** Flags whether propagation was stopped. */\n    public propagationStopped = false;\n\n    /** Flags whether propagation was immediately stopped. */\n    public propagationImmediatelyStopped = false;\n\n    /** The composed path of the event's propagation. The {@code target} is at the end. */\n    public path: FederatedEventTarget[];\n\n    /** The {@link PIXI.EventBoundary} that manages this event. Null for root events. */\n    public readonly manager: EventBoundary;\n\n    /** Event-specific detail */\n    public detail: number;\n\n    /** The global Window object. */\n    public view: WindowProxy;\n\n    /**\n     * Not supported.\n     * @deprecated since 7.0.0\n     */\n    public which: number;\n\n    /** The coordinates of the evnet relative to the nearest DOM layer. This is a non-standard property. */\n    public layer: Point = new Point();\n\n    /** @readonly */\n    get layerX(): number { return this.layer.x; }\n\n    /** @readonly */\n    get layerY(): number { return this.layer.y; }\n\n    /** The coordinates of the event relative to the DOM document. This is a non-standard property. */\n    public page: Point = new Point();\n\n    /** @readonly */\n    get pageX(): number { return this.page.x; }\n\n    /** @readonly */\n    get pageY(): number { return this.page.y; }\n\n    /**\n     * @param manager - The event boundary which manages this event. Propagation can only occur\n     *  within the boundary's jurisdiction.\n     */\n    constructor(manager: EventBoundary)\n    {\n        this.manager = manager;\n    }\n\n    /**\n     * Fallback for the deprecated @code{PIXI.InteractionEvent.data}.\n     * @deprecated since 7.0.0\n     */\n    get data(): this\n    {\n        return this;\n    }\n\n    /** The propagation path for this event. Alias for {@link PIXI.EventBoundary.propagationPath}. */\n    composedPath(): FederatedEventTarget[]\n    {\n        // Find the propagation path if it isn't cached or if the target has changed since since\n        // the last evaluation.\n        if (this.manager && (!this.path || this.path[this.path.length - 1] !== this.target))\n        {\n            this.path = this.target ? this.manager.propagationPath(this.target) : [];\n        }\n\n        return this.path;\n    }\n\n    /**\n     * Unimplemented method included for implementing the DOM interface {@code Event}. It will throw an {@code Error}.\n     * @deprecated\n     * @param _type\n     * @param _bubbles\n     * @param _cancelable\n     */\n    initEvent(_type: string, _bubbles?: boolean, _cancelable?: boolean): void\n    {\n        throw new Error('initEvent() is a legacy DOM API. It is not implemented in the Federated Events API.');\n    }\n\n    /**\n     * Unimplemented method included for implementing the DOM interface {@code UIEvent}. It will throw an {@code Error}.\n     * @deprecated\n     * @param _typeArg\n     * @param _bubblesArg\n     * @param _cancelableArg\n     * @param _viewArg\n     * @param _detailArg\n     */\n    initUIEvent(_typeArg: string, _bubblesArg?: boolean, _cancelableArg?: boolean, _viewArg?: Window | null,\n        _detailArg?: number): void\n    {\n        throw new Error('initUIEvent() is a legacy DOM API. It is not implemented in the Federated Events API.');\n    }\n\n    /** Prevent default behavior of PixiJS and the user agent. */\n    preventDefault(): void\n    {\n        if (this.nativeEvent instanceof Event && this.nativeEvent.cancelable)\n        {\n            this.nativeEvent.preventDefault();\n        }\n\n        this.defaultPrevented = true;\n    }\n\n    /**\n     * Stop this event from propagating to any addition listeners, including on the\n     * {@link PIXI.FederatedEventTarget.currentTarget currentTarget} and also the following\n     * event targets on the propagation path.\n     */\n    stopImmediatePropagation(): void\n    {\n        this.propagationImmediatelyStopped = true;\n    }\n\n    /**\n     * Stop this event from propagating to the next {@link PIXI.FederatedEventTarget}. The rest of the listeners\n     * on the {@link PIXI.FederatedEventTarget.currentTarget currentTarget} will still be notified.\n     */\n    stopPropagation(): void\n    {\n        this.propagationStopped = true;\n    }\n\n    readonly NONE = 0;\n    readonly CAPTURING_PHASE = 1;\n    readonly AT_TARGET = 2;\n    readonly BUBBLING_PHASE = 3;\n}\n", "import { Point } from '@pixi/core';\nimport { FederatedEvent } from './FederatedEvent';\n\nimport type { IPointData } from '@pixi/core';\nimport type { DisplayObject } from '@pixi/display';\n\n/**\n * A {@link PIXI.FederatedEvent} for mouse events.\n * @memberof PIXI\n */\nexport class FederatedMouseEvent extends FederatedEvent<\nMouseEvent | PointerEvent | TouchEvent\n> implements MouseEvent\n{\n    /** Whether the \"alt\" key was pressed when this mouse event occurred. */\n    altKey: boolean;\n\n    /** The specific button that was pressed in this mouse event. */\n    button: number;\n\n    /** The button depressed when this event occurred. */\n    buttons: number;\n\n    /** Whether the \"control\" key was pressed when this mouse event occurred. */\n    ctrlKey: boolean;\n\n    /** Whether the \"meta\" key was pressed when this mouse event occurred. */\n    metaKey: boolean;\n\n    /** This is currently not implemented in the Federated Events API. */\n    relatedTarget: EventTarget;\n\n    /** Whether the \"shift\" key was pressed when this mouse event occurred. */\n    shiftKey: boolean;\n\n    /** The coordinates of the mouse event relative to the canvas. */\n    public client: Point = new Point();\n\n    /** @readonly */\n    public get clientX(): number { return this.client.x; }\n\n    /** @readonly */\n    public get clientY(): number { return this.client.y; }\n\n    /**\n     * Alias for {@link PIXI.FederatedMouseEvent.clientX this.clientX}.\n     * @readonly\n     */\n    get x(): number { return this.clientX; }\n\n    /**\n     * Alias for {@link PIXI.FederatedMouseEvent.clientY this.clientY}.\n     * @readonly\n     */\n    get y(): number { return this.clientY; }\n\n    /** This is the number of clicks that occurs in 200ms/click of each other. */\n    public detail: number;\n\n    /** The movement in this pointer relative to the last `mousemove` event. */\n    public movement: Point = new Point();\n\n    /** @readonly */\n    get movementX(): number { return this.movement.x; }\n\n    /** @readonly */\n    get movementY(): number { return this.movement.y; }\n\n    /**\n     * The offset of the pointer coordinates w.r.t. target DisplayObject in world space. This is\n     * not supported at the moment.\n     */\n    public offset: Point = new Point();\n\n    /** @readonly */\n    get offsetX(): number { return this.offset.x; }\n\n    /** @readonly */\n    get offsetY(): number { return this.offset.y; }\n\n    /** The pointer coordinates in world space. */\n    public global: Point = new Point();\n\n    /** @readonly */\n    get globalX(): number { return this.global.x; }\n\n    /** @readonly */\n    get globalY(): number { return this.global.y; }\n\n    /**\n     * The pointer coordinates in the renderer's {@link PIXI.Renderer.screen screen}. This has slightly\n     * different semantics than native PointerEvent screenX/screenY.\n     */\n    public screen: Point = new Point();\n\n    /**\n     * The pointer coordinates in the renderer's screen. Alias for {@code screen.x}.\n     * @readonly\n     */\n    get screenX(): number { return this.screen.x; }\n\n    /**\n     * The pointer coordinates in the renderer's screen. Alias for {@code screen.y}.\n     * @readonly\n     */\n    get screenY(): number { return this.screen.y; }\n\n    /**\n     * This will return the local coordinates of the specified displayObject for this InteractionData\n     * @param {PIXI.DisplayObject} displayObject - The DisplayObject that you would like the local\n     *  coords off\n     * @param {PIXI.IPointData} point - A Point object in which to store the value, optional (otherwise\n     *  will create a new point)\n     * @param {PIXI.IPointData} globalPos - A Point object containing your custom global coords, optional\n     *  (otherwise will use the current global coords)\n     * @returns - A point containing the coordinates of the InteractionData position relative\n     *  to the DisplayObject\n     */\n    public getLocalPosition<P extends IPointData = Point>(displayObject: DisplayObject, point?: P, globalPos?: IPointData): P\n    {\n        return displayObject.worldTransform.applyInverse<P>(globalPos || this.global, point);\n    }\n\n    /**\n     * Whether the modifier key was pressed when this event natively occurred.\n     * @param key - The modifier key.\n     */\n    getModifierState(key: string): boolean\n    {\n        return 'getModifierState' in this.nativeEvent && this.nativeEvent.getModifierState(key);\n    }\n\n    /**\n     * Not supported.\n     * @param _typeArg\n     * @param _canBubbleArg\n     * @param _cancelableArg\n     * @param _viewArg\n     * @param _detailArg\n     * @param _screenXArg\n     * @param _screenYArg\n     * @param _clientXArg\n     * @param _clientYArg\n     * @param _ctrlKeyArg\n     * @param _altKeyArg\n     * @param _shiftKeyArg\n     * @param _metaKeyArg\n     * @param _buttonArg\n     * @param _relatedTargetArg\n     * @deprecated since 7.0.0\n     */\n    // eslint-disable-next-line max-params\n    initMouseEvent(\n        _typeArg: string,\n        _canBubbleArg: boolean,\n        _cancelableArg: boolean,\n        _viewArg: Window,\n        _detailArg: number,\n        _screenXArg: number,\n        _screenYArg: number,\n        _clientXArg: number,\n        _clientYArg: number,\n        _ctrlKeyArg: boolean,\n        _altKeyArg: boolean,\n        _shiftKeyArg: boolean,\n        _metaKeyArg: boolean,\n        _buttonArg: number,\n        _relatedTargetArg: EventTarget\n    ): void\n    {\n        throw new Error('Method not implemented.');\n    }\n}\n", "import { FederatedMouseEvent } from './FederatedMouseEvent';\n\n/**\n * A {@link PIXI.FederatedEvent} for pointer events.\n * @memberof PIXI\n */\nexport class FederatedPointerEvent extends FederatedMouseEvent implements PointerEvent\n{\n    /**\n     * The unique identifier of the pointer.\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerId}\n     */\n    public pointerId: number;\n\n    /**\n     * The width of the pointer's contact along the x-axis, measured in CSS pixels.\n     * radiusX of TouchEvents will be represented by this value.\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/width\n     */\n    public width = 0;\n\n    /**\n     * The height of the pointer's contact along the y-axis, measured in CSS pixels.\n     * radiusY of TouchEvents will be represented by this value.\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/height\n     */\n    public height = 0;\n\n    /**\n     * Indicates whether or not the pointer device that created the event is the primary pointer.\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/isPrimary\n     */\n    public isPrimary = false;\n\n    /**\n     * The type of pointer that triggered the event.\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerType\n     */\n    public pointerType: string;\n\n    /**\n     * Pressure applied by the pointing device during the event.\n     *s\n     * A Touch's force property will be represented by this value.\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pressure\n     */\n    public pressure: number;\n\n    /**\n     * Barrel pressure on a stylus pointer.\n     * @see https://w3c.github.io/pointerevents/#pointerevent-interface\n     */\n    public tangentialPressure: number;\n\n    /**\n     * The angle, in degrees, between the pointer device and the screen.\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/tiltX\n     */\n    public tiltX: number;\n\n    /**\n     * The angle, in degrees, between the pointer device and the screen.\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/tiltY\n     */\n    public tiltY: number;\n\n    /**\n     * Twist of a stylus pointer.\n     * @see https://w3c.github.io/pointerevents/#pointerevent-interface\n     */\n    public twist: number;\n\n    /** This is the number of clicks that occurs in 200ms/click of each other. */\n    public detail: number;\n\n    // Only included for completeness for now\n    getCoalescedEvents(): PointerEvent[]\n    {\n        if (this.type === 'pointermove' || this.type === 'mousemove' || this.type === 'touchmove')\n        {\n            return [this];\n        }\n\n        return [];\n    }\n\n    // Only included for completeness for now\n    getPredictedEvents(): PointerEvent[]\n    {\n        throw new Error('getPredictedEvents is not supported!');\n    }\n}\n", "import { FederatedMouseEvent } from './FederatedMouseEvent';\n\n/**\n * A {@link PIXI.FederatedEvent} for wheel events.\n * @memberof PIXI\n */\nexport class FederatedWheelEvent extends FederatedMouseEvent implements WheelEvent\n{\n    /**\n     * The units of `deltaX`, `deltaY`, and `deltaZ`. This is one of `DOM_DELTA_LINE`,\n     * `DOM_DELTA_PAGE`, `DOM_DELTA_PIXEL`.\n     */\n    deltaMode: number;\n\n    /** Horizontal scroll amount */\n    deltaX: number;\n\n    /** Vertical scroll amount */\n    deltaY: number;\n\n    /** z-axis scroll amount. */\n    deltaZ: number;\n\n    /** Units specified in pixels. */\n    static readonly DOM_DELTA_PIXEL = 0;\n\n    /** Units specified in pixels. */\n    readonly DOM_DELTA_PIXEL = 0;\n\n    /** Units specified in lines. */\n    static readonly DOM_DELTA_LINE = 1;\n\n    /** Units specified in lines. */\n    readonly DOM_DELTA_LINE = 1;\n\n    /** Units specified in pages. */\n    static readonly DOM_DELTA_PAGE = 2;\n\n    /** Units specified in pages. */\n    readonly DOM_DELTA_PAGE = 2;\n}\n", "import { Point, utils } from '@pixi/core';\nimport { EventsTicker } from './EventTicker';\nimport { FederatedMouseEvent } from './FederatedMouseEvent';\nimport { FederatedPointerEvent } from './FederatedPointerEvent';\nimport { FederatedWheelEvent } from './FederatedWheelEvent';\n\nimport type { DisplayObject } from '@pixi/display';\nimport type { EmitterListeners, TrackingData } from './EventBoundaryTypes';\nimport type { FederatedEvent } from './FederatedEvent';\nimport type {\n    Cursor, EventMode, FederatedEventHandler,\n    FederatedEventTarget,\n    IFederatedDisplayObject\n} from './FederatedEventTarget';\n\n// The maximum iterations used in propagation. This prevent infinite loops.\nconst PROPAGATION_LIMIT = 2048;\n\nconst tempHitLocation = new Point();\nconst tempLocalMapping = new Point();\n\n/**\n * Event boundaries are \"barriers\" where events coming from an upstream scene are modified before downstream propagation.\n *\n * ## Root event boundary\n *\n * The {@link PIXI.EventSystem#rootBoundary rootBoundary} handles events coming from the &lt;canvas /&gt;.\n * {@link PIXI.EventSystem} handles the normalization from native {@link https://dom.spec.whatwg.org/#event Events}\n * into {@link PIXI.FederatedEvent FederatedEvents}. The rootBoundary then does the hit-testing and event dispatch\n * for the upstream normalized event.\n *\n * ## Additional event boundaries\n *\n * An additional event boundary may be desired within an application's scene graph. For example, if a portion of the scene is\n * is flat with many children at one level - a spatial hash maybe needed to accelerate hit testing. In this scenario, the\n * container can be detached from the scene and glued using a custom event boundary.\n *\n * ```ts\n * import { Container } from '@pixi/display';\n * import { EventBoundary } from '@pixi/events';\n * import { SpatialHash } from 'pixi-spatial-hash';\n *\n * class HashedHitTestingEventBoundary\n * {\n *     private spatialHash: SpatialHash;\n *\n *     constructor(scene: Container, spatialHash: SpatialHash)\n *     {\n *         super(scene);\n *         this.spatialHash = spatialHash;\n *     }\n *\n *     hitTestRecursive(...)\n *     {\n *         // TODO: If target === this.rootTarget, then use spatial hash to get a\n *         // list of possible children that match the given (x,y) coordinates.\n *     }\n * }\n *\n * class VastScene extends DisplayObject\n * {\n *     protected eventBoundary: EventBoundary;\n *     protected scene: Container;\n *     protected spatialHash: SpatialHash;\n *\n *     constructor()\n *     {\n *         this.scene = new Container();\n *         this.spatialHash = new SpatialHash();\n *         this.eventBoundary = new HashedHitTestingEventBoundary(this.scene, this.spatialHash);\n *\n *         // Populate this.scene with a ton of children, while updating this.spatialHash\n *     }\n * }\n * ```\n * @memberof PIXI\n */\nexport class EventBoundary\n{\n    /**\n     * The root event-target residing below the event boundary.\n     *\n     * All events are dispatched trickling down and bubbling up to this `rootTarget`.\n     */\n    public rootTarget: DisplayObject;\n\n    /**\n     * Emits events after they were dispatched into the scene graph.\n     *\n     * This can be used for global events listening, regardless of the scene graph being used. It should\n     * not be used by interactive libraries for normal use.\n     *\n     * Special events that do not bubble all the way to the root target are not emitted from here,\n     * e.g. pointerenter, pointerleave, click.\n     */\n    public dispatch: utils.EventEmitter = new utils.EventEmitter();\n\n    /** The cursor preferred by the event targets underneath this boundary. */\n    public cursor: Cursor | string;\n\n    /**\n     * This flag would emit `pointermove`, `touchmove`, and `mousemove` events on all DisplayObjects.\n     *\n     * The `moveOnAll` semantics mirror those of earlier versions of PixiJS. This was disabled in favor of\n     * the Pointer Event API's approach.\n     */\n    public moveOnAll = false;\n\n    /** Enables the global move events. `globalpointermove`, `globaltouchmove`, and `globalmousemove` */\n    public enableGlobalMoveEvents = true;\n\n    /**\n     * Maps event types to forwarding handles for them.\n     *\n     * {@link PIXI.EventBoundary EventBoundary} provides mapping for \"pointerdown\", \"pointermove\",\n     * \"pointerout\", \"pointerleave\", \"pointerover\", \"pointerup\", and \"pointerupoutside\" by default.\n     * @see PIXI.EventBoundary#addEventMapping\n     */\n    protected mappingTable: Record<string, Array<{\n        fn: (e: FederatedEvent) => void,\n        priority: number\n    }>>;\n\n    /**\n     * State object for mapping methods.\n     * @see PIXI.EventBoundary#trackingData\n     */\n    protected mappingState: Record<string, any> = {\n        trackingData: {}\n    };\n\n    /**\n     * The event pool maps event constructors to an free pool of instances of those specific events.\n     * @see PIXI.EventBoundary#allocateEvent\n     * @see PIXI.EventBoundary#freeEvent\n     */\n    protected eventPool: Map<typeof FederatedEvent, FederatedEvent[]> = new Map();\n\n    /** Every interactive element gathered from the scene. Only used in `pointermove` */\n    private _allInteractiveElements: FederatedEventTarget[] = [];\n    /** Every element that passed the hit test. Only used in `pointermove` */\n    private _hitElements: FederatedEventTarget[] = [];\n    /** Whether or not to collect all the interactive elements from the scene. Enabled in `pointermove` */\n    private _isPointerMoveEvent = false;\n\n    /**\n     * @param rootTarget - The holder of the event boundary.\n     */\n    constructor(rootTarget?: DisplayObject)\n    {\n        this.rootTarget = rootTarget;\n\n        this.hitPruneFn = this.hitPruneFn.bind(this);\n        this.hitTestFn = this.hitTestFn.bind(this);\n        this.mapPointerDown = this.mapPointerDown.bind(this);\n        this.mapPointerMove = this.mapPointerMove.bind(this);\n        this.mapPointerOut = this.mapPointerOut.bind(this);\n        this.mapPointerOver = this.mapPointerOver.bind(this);\n        this.mapPointerUp = this.mapPointerUp.bind(this);\n        this.mapPointerUpOutside = this.mapPointerUpOutside.bind(this);\n        this.mapWheel = this.mapWheel.bind(this);\n\n        this.mappingTable = {};\n        this.addEventMapping('pointerdown', this.mapPointerDown);\n        this.addEventMapping('pointermove', this.mapPointerMove);\n        this.addEventMapping('pointerout', this.mapPointerOut);\n        this.addEventMapping('pointerleave', this.mapPointerOut);\n        this.addEventMapping('pointerover', this.mapPointerOver);\n        this.addEventMapping('pointerup', this.mapPointerUp);\n        this.addEventMapping('pointerupoutside', this.mapPointerUpOutside);\n        this.addEventMapping('wheel', this.mapWheel);\n    }\n\n    /**\n     * Adds an event mapping for the event `type` handled by `fn`.\n     *\n     * Event mappings can be used to implement additional or custom events. They take an event\n     * coming from the upstream scene (or directly from the {@link PIXI.EventSystem}) and dispatch new downstream events\n     * generally trickling down and bubbling up to {@link PIXI.EventBoundary.rootTarget this.rootTarget}.\n     *\n     * To modify the semantics of existing events, the built-in mapping methods of EventBoundary should be overridden\n     * instead.\n     * @param type - The type of upstream event to map.\n     * @param fn - The mapping method. The context of this function must be bound manually, if desired.\n     */\n    public addEventMapping(type: string, fn: (e: FederatedEvent) => void): void\n    {\n        if (!this.mappingTable[type])\n        {\n            this.mappingTable[type] = [];\n        }\n\n        this.mappingTable[type].push({\n            fn,\n            priority: 0,\n        });\n        this.mappingTable[type].sort((a, b) => a.priority - b.priority);\n    }\n\n    /**\n     * Dispatches the given event\n     * @param e\n     * @param type\n     */\n    public dispatchEvent(e: FederatedEvent, type?: string): void\n    {\n        e.propagationStopped = false;\n        e.propagationImmediatelyStopped = false;\n\n        this.propagate(e, type);\n        this.dispatch.emit(type || e.type, e);\n    }\n\n    /**\n     * Maps the given upstream event through the event boundary and propagates it downstream.\n     * @param e\n     */\n    public mapEvent(e: FederatedEvent): void\n    {\n        if (!this.rootTarget)\n        {\n            return;\n        }\n\n        const mappers = this.mappingTable[e.type];\n\n        if (mappers)\n        {\n            for (let i = 0, j = mappers.length; i < j; i++)\n            {\n                mappers[i].fn(e);\n            }\n        }\n        else\n        {\n            console.warn(`[EventBoundary]: Event mapping not defined for ${e.type}`);\n        }\n    }\n\n    /**\n     * Finds the DisplayObject that is the target of a event at the given coordinates.\n     *\n     * The passed (x,y) coordinates are in the world space above this event boundary.\n     * @param x\n     * @param y\n     */\n    public hitTest(\n        x: number,\n        y: number,\n    ): DisplayObject\n    {\n        EventsTicker.pauseUpdate = true;\n        // if we are using global move events, we need to hit test the whole scene graph\n        const useMove = this._isPointerMoveEvent && this.enableGlobalMoveEvents;\n        const fn = useMove ? 'hitTestMoveRecursive' : 'hitTestRecursive';\n        const invertedPath = this[fn](\n            this.rootTarget,\n            this.rootTarget.eventMode,\n            tempHitLocation.set(x, y),\n            this.hitTestFn,\n            this.hitPruneFn,\n        );\n\n        return invertedPath && invertedPath[0];\n    }\n\n    /**\n     * Propagate the passed event from from {@link PIXI.EventBoundary.rootTarget this.rootTarget} to its\n     * target {@code e.target}.\n     * @param e - The event to propagate.\n     * @param type\n     */\n    public propagate(e: FederatedEvent, type?: string): void\n    {\n        if (!e.target)\n        {\n            // This usually occurs when the scene graph is not interactive.\n            return;\n        }\n\n        const composedPath = e.composedPath();\n\n        // Capturing phase\n        e.eventPhase = e.CAPTURING_PHASE;\n\n        for (let i = 0, j = composedPath.length - 1; i < j; i++)\n        {\n            e.currentTarget = composedPath[i];\n\n            this.notifyTarget(e, type);\n\n            if (e.propagationStopped || e.propagationImmediatelyStopped) return;\n        }\n\n        // At target phase\n        e.eventPhase = e.AT_TARGET;\n        e.currentTarget = e.target;\n\n        this.notifyTarget(e, type);\n\n        if (e.propagationStopped || e.propagationImmediatelyStopped) return;\n\n        // Bubbling phase\n        e.eventPhase = e.BUBBLING_PHASE;\n\n        for (let i = composedPath.length - 2; i >= 0; i--)\n        {\n            e.currentTarget = composedPath[i];\n\n            this.notifyTarget(e, type);\n\n            if (e.propagationStopped || e.propagationImmediatelyStopped) return;\n        }\n    }\n\n    /**\n     * Emits the event {@code e} to all interactive display objects. The event is propagated in the bubbling phase always.\n     *\n     * This is used in the `globalpointermove` event.\n     * @param e - The emitted event.\n     * @param type - The listeners to notify.\n     * @param targets - The targets to notify.\n     */\n    public all(e: FederatedEvent, type?: string | string[], targets = this._allInteractiveElements): void\n    {\n        if (targets.length === 0) return;\n\n        e.eventPhase = e.BUBBLING_PHASE;\n\n        const events = Array.isArray(type) ? type : [type];\n\n        // loop through all interactive elements and notify them of the event\n        // loop through targets backwards\n        for (let i = targets.length - 1; i >= 0; i--)\n        {\n            events.forEach((event) =>\n            {\n                e.currentTarget = targets[i];\n                this.notifyTarget(e, event);\n            });\n        }\n    }\n\n    /**\n     * Finds the propagation path from {@link PIXI.EventBoundary.rootTarget rootTarget} to the passed\n     * {@code target}. The last element in the path is {@code target}.\n     * @param target\n     */\n    public propagationPath(target: FederatedEventTarget): FederatedEventTarget[]\n    {\n        const propagationPath = [target];\n\n        for (let i = 0; i < PROPAGATION_LIMIT && target !== this.rootTarget; i++)\n        {\n            if (!target.parent)\n            {\n                throw new Error('Cannot find propagation path to disconnected target');\n            }\n\n            propagationPath.push(target.parent);\n\n            target = target.parent;\n        }\n\n        propagationPath.reverse();\n\n        return propagationPath;\n    }\n\n    protected hitTestMoveRecursive(\n        currentTarget: DisplayObject,\n        eventMode: EventMode,\n        location: Point,\n        testFn: (object: DisplayObject, pt: Point) => boolean,\n        pruneFn?: (object: DisplayObject, pt: Point) => boolean,\n        ignore = false\n    ): DisplayObject[]\n    {\n        let shouldReturn = false;\n\n        // only bail out early if it is not interactive\n        if (this._interactivePrune(currentTarget)) return null;\n\n        if (currentTarget.eventMode === 'dynamic' || eventMode === 'dynamic')\n        {\n            EventsTicker.pauseUpdate = false;\n        }\n\n        if (currentTarget.interactiveChildren && currentTarget.children)\n        {\n            const children = currentTarget.children;\n\n            for (let i = children.length - 1; i >= 0; i--)\n            {\n                const child = children[i] as DisplayObject;\n\n                const nestedHit = this.hitTestMoveRecursive(\n                    child,\n                    this._isInteractive(eventMode) ? eventMode : child.eventMode,\n                    location,\n                    testFn,\n                    pruneFn,\n                    ignore || pruneFn(currentTarget, location)\n                );\n\n                if (nestedHit)\n                {\n                    // Its a good idea to check if a child has lost its parent.\n                    // this means it has been removed whilst looping so its best\n                    if (nestedHit.length > 0 && !nestedHit[nestedHit.length - 1].parent)\n                    {\n                        continue;\n                    }\n\n                    // Only add the current hit-test target to the hit-test chain if the chain\n                    // has already started (i.e. the event target has been found) or if the current\n                    // target is interactive (i.e. it becomes the event target).\n                    const isInteractive = currentTarget.isInteractive();\n\n                    if (nestedHit.length > 0 || isInteractive)\n                    {\n                        if (isInteractive) this._allInteractiveElements.push(currentTarget);\n                        nestedHit.push(currentTarget);\n                    }\n\n                    // store all hit elements to be returned once we have traversed the whole tree\n                    if (this._hitElements.length === 0) this._hitElements = nestedHit;\n\n                    shouldReturn = true;\n                }\n            }\n        }\n\n        const isInteractiveMode = this._isInteractive(eventMode);\n        const isInteractiveTarget = currentTarget.isInteractive();\n\n        if (isInteractiveTarget && isInteractiveTarget) this._allInteractiveElements.push(currentTarget);\n\n        // we don't carry on hit testing something once we have found a hit,\n        // now only care about gathering the interactive elements\n        if (ignore || this._hitElements.length > 0) return null;\n\n        if (shouldReturn) return this._hitElements as DisplayObject[];\n\n        // Finally, hit test this DisplayObject itself.\n        if (isInteractiveMode && (!pruneFn(currentTarget, location) && testFn(currentTarget, location)))\n        {\n            // The current hit-test target is the event's target only if it is interactive. Otherwise,\n            // the first interactive ancestor will be the event's target.\n            return isInteractiveTarget ? [currentTarget] : [];\n        }\n\n        return null;\n    }\n\n    /**\n     * Recursive implementation for {@link PIXI.EventBoundary.hitTest hitTest}.\n     * @param currentTarget - The DisplayObject that is to be hit tested.\n     * @param eventMode - The event mode for the `currentTarget` or one of its parents.\n     * @param location - The location that is being tested for overlap.\n     * @param testFn - Callback that determines whether the target passes hit testing. This callback\n     *  can assume that `pruneFn` failed to prune the display object.\n     * @param pruneFn - Callback that determiness whether the target and all of its children\n     *  cannot pass the hit test. It is used as a preliminary optimization to prune entire subtrees\n     *  of the scene graph.\n     * @returns An array holding the hit testing target and all its ancestors in order. The first element\n     *  is the target itself and the last is {@link PIXI.EventBoundary.rootTarget rootTarget}. This is the opposite\n     *  order w.r.t. the propagation path. If no hit testing target is found, null is returned.\n     */\n    protected hitTestRecursive(\n        currentTarget: DisplayObject,\n        eventMode: EventMode,\n        location: Point,\n        testFn: (object: DisplayObject, pt: Point) => boolean,\n        pruneFn?: (object: DisplayObject, pt: Point) => boolean\n    ): DisplayObject[]\n    {\n        // Attempt to prune this DisplayObject and its subtree as an optimization.\n        if (this._interactivePrune(currentTarget) || pruneFn(currentTarget, location))\n        {\n            return null;\n        }\n\n        if (currentTarget.eventMode === 'dynamic' || eventMode === 'dynamic')\n        {\n            EventsTicker.pauseUpdate = false;\n        }\n\n        // Find a child that passes the hit testing and return one, if any.\n        if (currentTarget.interactiveChildren && currentTarget.children)\n        {\n            const children = currentTarget.children;\n\n            for (let i = children.length - 1; i >= 0; i--)\n            {\n                const child = children[i] as DisplayObject;\n\n                const nestedHit = this.hitTestRecursive(\n                    child,\n                    this._isInteractive(eventMode) ? eventMode : child.eventMode,\n                    location,\n                    testFn,\n                    pruneFn\n                );\n\n                if (nestedHit)\n                {\n                    // Its a good idea to check if a child has lost its parent.\n                    // this means it has been removed whilst looping so its best\n                    if (nestedHit.length > 0 && !nestedHit[nestedHit.length - 1].parent)\n                    {\n                        continue;\n                    }\n\n                    // Only add the current hit-test target to the hit-test chain if the chain\n                    // has already started (i.e. the event target has been found) or if the current\n                    // target is interactive (i.e. it becomes the event target).\n                    const isInteractive = currentTarget.isInteractive();\n\n                    if (nestedHit.length > 0 || isInteractive) nestedHit.push(currentTarget);\n\n                    return nestedHit;\n                }\n            }\n        }\n\n        const isInteractiveMode = this._isInteractive(eventMode);\n        const isInteractiveTarget = currentTarget.isInteractive();\n\n        // Finally, hit test this DisplayObject itself.\n        if (isInteractiveMode && testFn(currentTarget, location))\n        {\n            // The current hit-test target is the event's target only if it is interactive. Otherwise,\n            // the first interactive ancestor will be the event's target.\n            return isInteractiveTarget ? [currentTarget] : [];\n        }\n\n        return null;\n    }\n\n    private _isInteractive(int: EventMode): int is 'static' | 'dynamic'\n    {\n        return int === 'static' || int === 'dynamic';\n    }\n\n    private _interactivePrune(displayObject: DisplayObject): boolean\n    {\n        // If displayObject is a mask, invisible, or not renderable then it cannot be hit directly.\n        if (!displayObject || displayObject.isMask || !displayObject.visible || !displayObject.renderable)\n        {\n            return true;\n        }\n\n        // If this DisplayObject is none then it cannot be hit by anything.\n        if (displayObject.eventMode === 'none')\n        {\n            return true;\n        }\n\n        // If this DisplayObject is passive and it has no interactive children then it cannot be hit\n        if (displayObject.eventMode === 'passive' && !displayObject.interactiveChildren)\n        {\n            return true;\n        }\n\n        // If displayObject is a mask then it cannot be hit directly.\n        if (displayObject.isMask)\n        {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Checks whether the display object or any of its children cannot pass the hit test at all.\n     *\n     * {@link PIXI.EventBoundary}'s implementation uses the {@link PIXI.DisplayObject.hitArea hitArea}\n     * and {@link PIXI.DisplayObject._mask} for pruning.\n     * @param displayObject\n     * @param location\n     */\n    protected hitPruneFn(displayObject: DisplayObject, location: Point): boolean\n    {\n        if (displayObject.hitArea)\n        {\n            displayObject.worldTransform.applyInverse(location, tempLocalMapping);\n\n            if (!displayObject.hitArea.contains(tempLocalMapping.x, tempLocalMapping.y))\n            {\n                return true;\n            }\n        }\n\n        if (displayObject._mask)\n        {\n            const maskObject = ((displayObject._mask as any).isMaskData\n                ? (displayObject._mask as any).maskObject : displayObject._mask);\n\n            if (maskObject && !maskObject.containsPoint?.(location))\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Checks whether the display object passes hit testing for the given location.\n     * @param displayObject\n     * @param location\n     * @returns - Whether `displayObject` passes hit testing for `location`.\n     */\n    protected hitTestFn(displayObject: DisplayObject, location: Point): boolean\n    {\n        // If the displayObject is passive then it cannot be hit directly.\n        if (displayObject.eventMode === 'passive')\n        {\n            return false;\n        }\n\n        // If the display object failed pruning with a hitArea, then it must pass it.\n        if (displayObject.hitArea)\n        {\n            return true;\n        }\n\n        if ((displayObject as any).containsPoint)\n        {\n            return (displayObject as any).containsPoint(location) as boolean;\n        }\n\n        // TODO: Should we hit test based on bounds?\n\n        return false;\n    }\n\n    /**\n     * Notify all the listeners to the event's `currentTarget`.\n     *\n     * If the `currentTarget` contains the property `on<type>`, then it is called here,\n     * simulating the behavior from version 6.x and prior.\n     * @param e - The event passed to the target.\n     * @param type\n     */\n    protected notifyTarget(e: FederatedEvent, type?: string): void\n    {\n        type = type ?? e.type;\n\n        // call the `on${type}` for the current target if it exists\n        const handlerKey = `on${type}` as keyof IFederatedDisplayObject;\n\n        (e.currentTarget[handlerKey] as FederatedEventHandler<FederatedEvent<UIEvent>>)?.(e);\n\n        const key = e.eventPhase === e.CAPTURING_PHASE || e.eventPhase === e.AT_TARGET ? `${type}capture` : type;\n\n        this.notifyListeners(e, key);\n\n        if (e.eventPhase === e.AT_TARGET)\n        {\n            this.notifyListeners(e, type);\n        }\n    }\n\n    /**\n     * Maps the upstream `pointerdown` events to a downstream `pointerdown` event.\n     *\n     * `touchstart`, `rightdown`, `mousedown` events are also dispatched for specific pointer types.\n     * @param from\n     */\n    protected mapPointerDown(from: FederatedEvent): void\n    {\n        if (!(from instanceof FederatedPointerEvent))\n        {\n            console.warn('EventBoundary cannot map a non-pointer event as a pointer event');\n\n            return;\n        }\n\n        const e = this.createPointerEvent(from);\n\n        this.dispatchEvent(e, 'pointerdown');\n\n        if (e.pointerType === 'touch')\n        {\n            this.dispatchEvent(e, 'touchstart');\n        }\n        else if (e.pointerType === 'mouse' || e.pointerType === 'pen')\n        {\n            const isRightButton = e.button === 2;\n\n            this.dispatchEvent(e, isRightButton ? 'rightdown' : 'mousedown');\n        }\n\n        const trackingData = this.trackingData(from.pointerId);\n\n        trackingData.pressTargetsByButton[from.button] = e.composedPath();\n\n        this.freeEvent(e);\n    }\n\n    /**\n     * Maps the upstream `pointermove` to downstream `pointerout`, `pointerover`, and `pointermove` events, in that order.\n     *\n     * The tracking data for the specific pointer has an updated `overTarget`. `mouseout`, `mouseover`,\n     * `mousemove`, and `touchmove` events are fired as well for specific pointer types.\n     * @param from - The upstream `pointermove` event.\n     */\n    protected mapPointerMove(from: FederatedEvent): void\n    {\n        if (!(from instanceof FederatedPointerEvent))\n        {\n            console.warn('EventBoundary cannot map a non-pointer event as a pointer event');\n\n            return;\n        }\n\n        this._allInteractiveElements.length = 0;\n        this._hitElements.length = 0;\n        this._isPointerMoveEvent = true;\n        const e = this.createPointerEvent(from);\n\n        this._isPointerMoveEvent = false;\n        const isMouse = e.pointerType === 'mouse' || e.pointerType === 'pen';\n        const trackingData = this.trackingData(from.pointerId);\n        const outTarget = this.findMountedTarget(trackingData.overTargets);\n\n        // First pointerout/pointerleave\n        if (trackingData.overTargets?.length > 0 && outTarget !== e.target)\n        {\n            // pointerout always occurs on the overTarget when the pointer hovers over another element.\n            const outType = from.type === 'mousemove' ? 'mouseout' : 'pointerout';\n            const outEvent = this.createPointerEvent(from, outType, outTarget);\n\n            this.dispatchEvent(outEvent, 'pointerout');\n            if (isMouse) this.dispatchEvent(outEvent, 'mouseout');\n\n            // If the pointer exits overTarget and its descendants, then a pointerleave event is also fired. This event\n            // is dispatched to all ancestors that no longer capture the pointer.\n            if (!e.composedPath().includes(outTarget))\n            {\n                const leaveEvent = this.createPointerEvent(from, 'pointerleave', outTarget);\n\n                leaveEvent.eventPhase = leaveEvent.AT_TARGET;\n\n                while (leaveEvent.target && !e.composedPath().includes(leaveEvent.target))\n                {\n                    leaveEvent.currentTarget = leaveEvent.target;\n\n                    this.notifyTarget(leaveEvent);\n                    if (isMouse) this.notifyTarget(leaveEvent, 'mouseleave');\n\n                    leaveEvent.target = leaveEvent.target.parent;\n                }\n\n                this.freeEvent(leaveEvent);\n            }\n\n            this.freeEvent(outEvent);\n        }\n\n        // Then pointerover\n        if (outTarget !== e.target)\n        {\n            // pointerover always occurs on the new overTarget\n            const overType = from.type === 'mousemove' ? 'mouseover' : 'pointerover';\n            const overEvent = this.clonePointerEvent(e, overType);// clone faster\n\n            this.dispatchEvent(overEvent, 'pointerover');\n            if (isMouse) this.dispatchEvent(overEvent, 'mouseover');\n\n            // Probe whether the newly hovered DisplayObject is an ancestor of the original overTarget.\n            let overTargetAncestor = outTarget?.parent;\n\n            while (overTargetAncestor && overTargetAncestor !== this.rootTarget.parent)\n            {\n                if (overTargetAncestor === e.target) break;\n\n                overTargetAncestor = overTargetAncestor.parent;\n            }\n\n            // The pointer has entered a non-ancestor of the original overTarget. This means we need a pointerentered\n            // event.\n            const didPointerEnter = !overTargetAncestor || overTargetAncestor === this.rootTarget.parent;\n\n            if (didPointerEnter)\n            {\n                const enterEvent = this.clonePointerEvent(e, 'pointerenter');\n\n                enterEvent.eventPhase = enterEvent.AT_TARGET;\n\n                while (enterEvent.target\n                        && enterEvent.target !== outTarget\n                        && enterEvent.target !== this.rootTarget.parent)\n                {\n                    enterEvent.currentTarget = enterEvent.target;\n\n                    this.notifyTarget(enterEvent);\n                    if (isMouse) this.notifyTarget(enterEvent, 'mouseenter');\n\n                    enterEvent.target = enterEvent.target.parent;\n                }\n\n                this.freeEvent(enterEvent);\n            }\n\n            this.freeEvent(overEvent);\n        }\n\n        const allMethods: string[] = [];\n        const allowGlobalPointerEvents = this.enableGlobalMoveEvents ?? true;\n\n        /* eslint-disable @typescript-eslint/no-unused-expressions */\n        this.moveOnAll ? allMethods.push('pointermove') : this.dispatchEvent(e, 'pointermove');\n        allowGlobalPointerEvents && allMethods.push('globalpointermove');\n\n        // Then pointermove\n        if (e.pointerType === 'touch')\n        {\n            this.moveOnAll ? allMethods.splice(1, 0, 'touchmove') : this.dispatchEvent(e, 'touchmove');\n            allowGlobalPointerEvents && allMethods.push('globaltouchmove');\n        }\n\n        if (isMouse)\n        {\n            this.moveOnAll ? allMethods.splice(1, 0, 'mousemove') : this.dispatchEvent(e, 'mousemove');\n            allowGlobalPointerEvents && allMethods.push('globalmousemove');\n            this.cursor = e.target?.cursor;\n        }\n\n        if (allMethods.length > 0)\n        {\n            this.all(e, allMethods);\n        }\n        this._allInteractiveElements.length = 0;\n        this._hitElements.length = 0;\n        /* eslint-enable @typescript-eslint/no-unused-expressions */\n\n        trackingData.overTargets = e.composedPath();\n\n        this.freeEvent(e);\n    }\n\n    /**\n     * Maps the upstream `pointerover` to downstream `pointerover` and `pointerenter` events, in that order.\n     *\n     * The tracking data for the specific pointer gets a new `overTarget`.\n     * @param from - The upstream `pointerover` event.\n     */\n    protected mapPointerOver(from: FederatedEvent): void\n    {\n        if (!(from instanceof FederatedPointerEvent))\n        {\n            console.warn('EventBoundary cannot map a non-pointer event as a pointer event');\n\n            return;\n        }\n\n        const trackingData = this.trackingData(from.pointerId);\n        const e = this.createPointerEvent(from);\n        const isMouse = e.pointerType === 'mouse' || e.pointerType === 'pen';\n\n        this.dispatchEvent(e, 'pointerover');\n        if (isMouse) this.dispatchEvent(e, 'mouseover');\n        if (e.pointerType === 'mouse') this.cursor = e.target?.cursor;\n\n        // pointerenter events must be fired since the pointer entered from upstream.\n        const enterEvent = this.clonePointerEvent(e, 'pointerenter');\n\n        enterEvent.eventPhase = enterEvent.AT_TARGET;\n\n        while (enterEvent.target && enterEvent.target !== this.rootTarget.parent)\n        {\n            enterEvent.currentTarget = enterEvent.target;\n\n            this.notifyTarget(enterEvent);\n            if (isMouse) this.notifyTarget(enterEvent, 'mouseenter');\n\n            enterEvent.target = enterEvent.target.parent;\n        }\n\n        trackingData.overTargets = e.composedPath();\n\n        this.freeEvent(e);\n        this.freeEvent(enterEvent);\n    }\n\n    /**\n     * Maps the upstream `pointerout` to downstream `pointerout`, `pointerleave` events, in that order.\n     *\n     * The tracking data for the specific pointer is cleared of a `overTarget`.\n     * @param from - The upstream `pointerout` event.\n     */\n    protected mapPointerOut(from: FederatedEvent): void\n    {\n        if (!(from instanceof FederatedPointerEvent))\n        {\n            console.warn('EventBoundary cannot map a non-pointer event as a pointer event');\n\n            return;\n        }\n\n        const trackingData = this.trackingData(from.pointerId);\n\n        if (trackingData.overTargets)\n        {\n            const isMouse = from.pointerType === 'mouse' || from.pointerType === 'pen';\n            const outTarget = this.findMountedTarget(trackingData.overTargets);\n\n            // pointerout first\n            const outEvent = this.createPointerEvent(from, 'pointerout', outTarget);\n\n            this.dispatchEvent(outEvent);\n            if (isMouse) this.dispatchEvent(outEvent, 'mouseout');\n\n            // pointerleave(s) are also dispatched b/c the pointer must've left rootTarget and its descendants to\n            // get an upstream pointerout event (upstream events do not know rootTarget has descendants).\n            const leaveEvent = this.createPointerEvent(from, 'pointerleave', outTarget);\n\n            leaveEvent.eventPhase = leaveEvent.AT_TARGET;\n\n            while (leaveEvent.target && leaveEvent.target !== this.rootTarget.parent)\n            {\n                leaveEvent.currentTarget = leaveEvent.target;\n\n                this.notifyTarget(leaveEvent);\n                if (isMouse) this.notifyTarget(leaveEvent, 'mouseleave');\n\n                leaveEvent.target = leaveEvent.target.parent;\n            }\n\n            trackingData.overTargets = null;\n\n            this.freeEvent(outEvent);\n            this.freeEvent(leaveEvent);\n        }\n\n        this.cursor = null;\n    }\n\n    /**\n     * Maps the upstream `pointerup` event to downstream `pointerup`, `pointerupoutside`,\n     * and `click`/`rightclick`/`pointertap` events, in that order.\n     *\n     * The `pointerupoutside` event bubbles from the original `pointerdown` target to the most specific\n     * ancestor of the `pointerdown` and `pointerup` targets, which is also the `click` event's target. `touchend`,\n     * `rightup`, `mouseup`, `touchendoutside`, `rightupoutside`, `mouseupoutside`, and `tap` are fired as well for\n     * specific pointer types.\n     * @param from - The upstream `pointerup` event.\n     */\n    protected mapPointerUp(from: FederatedEvent): void\n    {\n        if (!(from instanceof FederatedPointerEvent))\n        {\n            console.warn('EventBoundary cannot map a non-pointer event as a pointer event');\n\n            return;\n        }\n\n        const now = performance.now();\n        const e = this.createPointerEvent(from);\n\n        this.dispatchEvent(e, 'pointerup');\n\n        if (e.pointerType === 'touch')\n        {\n            this.dispatchEvent(e, 'touchend');\n        }\n        else if (e.pointerType === 'mouse' || e.pointerType === 'pen')\n        {\n            const isRightButton = e.button === 2;\n\n            this.dispatchEvent(e, isRightButton ? 'rightup' : 'mouseup');\n        }\n\n        const trackingData = this.trackingData(from.pointerId);\n        const pressTarget = this.findMountedTarget(trackingData.pressTargetsByButton[from.button]);\n\n        let clickTarget = pressTarget;\n\n        // pointerupoutside only bubbles. It only bubbles upto the parent that doesn't contain\n        // the pointerup location.\n        if (pressTarget && !e.composedPath().includes(pressTarget))\n        {\n            let currentTarget = pressTarget;\n\n            while (currentTarget && !e.composedPath().includes(currentTarget))\n            {\n                e.currentTarget = currentTarget;\n\n                this.notifyTarget(e, 'pointerupoutside');\n\n                if (e.pointerType === 'touch')\n                {\n                    this.notifyTarget(e, 'touchendoutside');\n                }\n                else if (e.pointerType === 'mouse' || e.pointerType === 'pen')\n                {\n                    const isRightButton = e.button === 2;\n\n                    this.notifyTarget(e, isRightButton ? 'rightupoutside' : 'mouseupoutside');\n                }\n\n                currentTarget = currentTarget.parent;\n            }\n\n            delete trackingData.pressTargetsByButton[from.button];\n\n            // currentTarget is the most specific ancestor holding both the pointerdown and pointerup\n            // targets. That is - it's our click target!\n            clickTarget = currentTarget;\n        }\n\n        // click!\n        if (clickTarget)\n        {\n            const clickEvent = this.clonePointerEvent(e, 'click');\n\n            clickEvent.target = clickTarget;\n            clickEvent.path = null;\n\n            if (!trackingData.clicksByButton[from.button])\n            {\n                trackingData.clicksByButton[from.button] = {\n                    clickCount: 0,\n                    target: clickEvent.target,\n                    timeStamp: now,\n                };\n            }\n\n            const clickHistory = trackingData.clicksByButton[from.button];\n\n            if (clickHistory.target === clickEvent.target\n                && now - clickHistory.timeStamp < 200)\n            {\n                ++clickHistory.clickCount;\n            }\n            else\n            {\n                clickHistory.clickCount = 1;\n            }\n\n            clickHistory.target = clickEvent.target;\n            clickHistory.timeStamp = now;\n\n            clickEvent.detail = clickHistory.clickCount;\n\n            if (clickEvent.pointerType === 'mouse')\n            {\n                const isRightButton = clickEvent.button === 2;\n\n                this.dispatchEvent(clickEvent, isRightButton ? 'rightclick' : 'click');\n            }\n            else if (clickEvent.pointerType === 'touch')\n            {\n                this.dispatchEvent(clickEvent, 'tap');\n            }\n\n            this.dispatchEvent(clickEvent, 'pointertap');\n\n            this.freeEvent(clickEvent);\n        }\n\n        this.freeEvent(e);\n    }\n\n    /**\n     * Maps the upstream `pointerupoutside` event to a downstream `pointerupoutside` event, bubbling from the original\n     * `pointerdown` target to `rootTarget`.\n     *\n     * (The most specific ancestor of the `pointerdown` event and the `pointerup` event must the\n     * `{@link PIXI.EventBoundary}'s root because the `pointerup` event occurred outside of the boundary.)\n     *\n     * `touchendoutside`, `mouseupoutside`, and `rightupoutside` events are fired as well for specific pointer\n     * types. The tracking data for the specific pointer is cleared of a `pressTarget`.\n     * @param from - The upstream `pointerupoutside` event.\n     */\n    protected mapPointerUpOutside(from: FederatedEvent): void\n    {\n        if (!(from instanceof FederatedPointerEvent))\n        {\n            console.warn('EventBoundary cannot map a non-pointer event as a pointer event');\n\n            return;\n        }\n\n        const trackingData = this.trackingData(from.pointerId);\n        const pressTarget = this.findMountedTarget(trackingData.pressTargetsByButton[from.button]);\n        const e = this.createPointerEvent(from);\n\n        if (pressTarget)\n        {\n            let currentTarget = pressTarget;\n\n            while (currentTarget)\n            {\n                e.currentTarget = currentTarget;\n\n                this.notifyTarget(e, 'pointerupoutside');\n\n                if (e.pointerType === 'touch')\n                {\n                    this.notifyTarget(e, 'touchendoutside');\n                }\n                else if (e.pointerType === 'mouse' || e.pointerType === 'pen')\n                {\n                    this.notifyTarget(e, e.button === 2 ? 'rightupoutside' : 'mouseupoutside');\n                }\n\n                currentTarget = currentTarget.parent;\n            }\n\n            delete trackingData.pressTargetsByButton[from.button];\n        }\n\n        this.freeEvent(e);\n    }\n\n    /**\n     * Maps the upstream `wheel` event to a downstream `wheel` event.\n     * @param from - The upstream `wheel` event.\n     */\n    protected mapWheel(from: FederatedEvent): void\n    {\n        if (!(from instanceof FederatedWheelEvent))\n        {\n            console.warn('EventBoundary cannot map a non-wheel event as a wheel event');\n\n            return;\n        }\n\n        const wheelEvent = this.createWheelEvent(from);\n\n        this.dispatchEvent(wheelEvent);\n        this.freeEvent(wheelEvent);\n    }\n\n    /**\n     * Finds the most specific event-target in the given propagation path that is still mounted in the scene graph.\n     *\n     * This is used to find the correct `pointerup` and `pointerout` target in the case that the original `pointerdown`\n     * or `pointerover` target was unmounted from the scene graph.\n     * @param propagationPath - The propagation path was valid in the past.\n     * @returns - The most specific event-target still mounted at the same location in the scene graph.\n     */\n    protected findMountedTarget(propagationPath: FederatedEventTarget[]): FederatedEventTarget\n    {\n        if (!propagationPath)\n        {\n            return null;\n        }\n\n        let currentTarget = propagationPath[0];\n\n        for (let i = 1; i < propagationPath.length; i++)\n        {\n            // Set currentTarget to the next target in the path only if it is still attached to the\n            // scene graph (i.e. parent still points to the expected ancestor).\n            if (propagationPath[i].parent === currentTarget)\n            {\n                currentTarget = propagationPath[i];\n            }\n            else\n            {\n                break;\n            }\n        }\n\n        return currentTarget;\n    }\n\n    /**\n     * Creates an event whose {@code originalEvent} is {@code from}, with an optional `type` and `target` override.\n     *\n     * The event is allocated using {@link PIXI.EventBoundary#allocateEvent this.allocateEvent}.\n     * @param from - The {@code originalEvent} for the returned event.\n     * @param [type=from.type] - The type of the returned event.\n     * @param target - The target of the returned event.\n     */\n    protected createPointerEvent(\n        from: FederatedPointerEvent,\n        type?: string,\n        target?: FederatedEventTarget\n    ): FederatedPointerEvent\n    {\n        const event = this.allocateEvent(FederatedPointerEvent);\n\n        this.copyPointerData(from, event);\n        this.copyMouseData(from, event);\n        this.copyData(from, event);\n\n        event.nativeEvent = from.nativeEvent;\n        event.originalEvent = from;\n        event.target = target\n            ?? this.hitTest(event.global.x, event.global.y) as FederatedEventTarget\n            ?? this._hitElements[0];\n\n        if (typeof type === 'string')\n        {\n            event.type = type;\n        }\n\n        return event;\n    }\n\n    /**\n     * Creates a wheel event whose {@code originalEvent} is {@code from}.\n     *\n     * The event is allocated using {@link PIXI.EventBoundary#allocateEvent this.allocateEvent}.\n     * @param from - The upstream wheel event.\n     */\n    protected createWheelEvent(from: FederatedWheelEvent): FederatedWheelEvent\n    {\n        const event = this.allocateEvent(FederatedWheelEvent);\n\n        this.copyWheelData(from, event);\n        this.copyMouseData(from, event);\n        this.copyData(from, event);\n\n        event.nativeEvent = from.nativeEvent;\n        event.originalEvent = from;\n        event.target = this.hitTest(event.global.x, event.global.y);\n\n        return event;\n    }\n\n    /**\n     * Clones the event {@code from}, with an optional {@code type} override.\n     *\n     * The event is allocated using {@link PIXI.EventBoundary#allocateEvent this.allocateEvent}.\n     * @param from - The event to clone.\n     * @param [type=from.type] - The type of the returned event.\n     */\n    protected clonePointerEvent(from: FederatedPointerEvent, type?: string): FederatedPointerEvent\n    {\n        const event = this.allocateEvent(FederatedPointerEvent);\n\n        event.nativeEvent = from.nativeEvent;\n        event.originalEvent = from.originalEvent;\n\n        this.copyPointerData(from, event);\n        this.copyMouseData(from, event);\n        this.copyData(from, event);\n\n        // copy propagation path for perf\n        event.target = from.target;\n        event.path = from.composedPath().slice();\n        event.type = type ?? event.type;\n\n        return event;\n    }\n\n    /**\n     * Copies wheel {@link PIXI.FederatedWheelEvent} data from {@code from} into {@code to}.\n     *\n     * The following properties are copied:\n     * + deltaMode\n     * + deltaX\n     * + deltaY\n     * + deltaZ\n     * @param from\n     * @param to\n     */\n    protected copyWheelData(from: FederatedWheelEvent, to: FederatedWheelEvent): void\n    {\n        to.deltaMode = from.deltaMode;\n        to.deltaX = from.deltaX;\n        to.deltaY = from.deltaY;\n        to.deltaZ = from.deltaZ;\n    }\n\n    /**\n     * Copies pointer {@link PIXI.FederatedPointerEvent} data from {@code from} into {@code to}.\n     *\n     * The following properties are copied:\n     * + pointerId\n     * + width\n     * + height\n     * + isPrimary\n     * + pointerType\n     * + pressure\n     * + tangentialPressure\n     * + tiltX\n     * + tiltY\n     * @param from\n     * @param to\n     */\n    protected copyPointerData(from: FederatedEvent, to: FederatedEvent): void\n    {\n        if (!(from instanceof FederatedPointerEvent && to instanceof FederatedPointerEvent)) return;\n\n        to.pointerId = from.pointerId;\n        to.width = from.width;\n        to.height = from.height;\n        to.isPrimary = from.isPrimary;\n        to.pointerType = from.pointerType;\n        to.pressure = from.pressure;\n        to.tangentialPressure = from.tangentialPressure;\n        to.tiltX = from.tiltX;\n        to.tiltY = from.tiltY;\n        to.twist = from.twist;\n    }\n\n    /**\n     * Copies mouse {@link PIXI.FederatedMouseEvent} data from {@code from} to {@code to}.\n     *\n     * The following properties are copied:\n     * + altKey\n     * + button\n     * + buttons\n     * + clientX\n     * + clientY\n     * + metaKey\n     * + movementX\n     * + movementY\n     * + pageX\n     * + pageY\n     * + x\n     * + y\n     * + screen\n     * + shiftKey\n     * + global\n     * @param from\n     * @param to\n     */\n    protected copyMouseData(from: FederatedEvent, to: FederatedEvent): void\n    {\n        if (!(from instanceof FederatedMouseEvent && to instanceof FederatedMouseEvent)) return;\n\n        to.altKey = from.altKey;\n        to.button = from.button;\n        to.buttons = from.buttons;\n        to.client.copyFrom(from.client);\n        to.ctrlKey = from.ctrlKey;\n        to.metaKey = from.metaKey;\n        to.movement.copyFrom(from.movement);\n        to.screen.copyFrom(from.screen);\n        to.shiftKey = from.shiftKey;\n        to.global.copyFrom(from.global);\n    }\n\n    /**\n     * Copies base {@link PIXI.FederatedEvent} data from {@code from} into {@code to}.\n     *\n     * The following properties are copied:\n     * + isTrusted\n     * + srcElement\n     * + timeStamp\n     * + type\n     * @param from - The event to copy data from.\n     * @param to - The event to copy data into.\n     */\n    protected copyData(from: FederatedEvent, to: FederatedEvent): void\n    {\n        to.isTrusted = from.isTrusted;\n        to.srcElement = from.srcElement;\n        to.timeStamp = performance.now();\n        to.type = from.type;\n        to.detail = from.detail;\n        to.view = from.view;\n        to.which = from.which;\n        to.layer.copyFrom(from.layer);\n        to.page.copyFrom(from.page);\n    }\n\n    /**\n     * @param id - The pointer ID.\n     * @returns The tracking data stored for the given pointer. If no data exists, a blank\n     *  state will be created.\n     */\n    protected trackingData(id: number): TrackingData\n    {\n        if (!this.mappingState.trackingData[id])\n        {\n            this.mappingState.trackingData[id] = {\n                pressTargetsByButton: {},\n                clicksByButton: {},\n                overTarget: null\n            };\n        }\n\n        return this.mappingState.trackingData[id];\n    }\n\n    /**\n     * Allocate a specific type of event from {@link PIXI.EventBoundary#eventPool this.eventPool}.\n     *\n     * This allocation is constructor-agnostic, as long as it only takes one argument - this event\n     * boundary.\n     * @param constructor - The event's constructor.\n     */\n    protected allocateEvent<T extends FederatedEvent>(\n        constructor: { new(boundary: EventBoundary): T }\n    ): T\n    {\n        if (!this.eventPool.has(constructor as any))\n        {\n            this.eventPool.set(constructor as any, []);\n        }\n\n        const event = this.eventPool.get(constructor as any).pop() as T\n            || new constructor(this);\n\n        event.eventPhase = event.NONE;\n        event.currentTarget = null;\n        event.path = null;\n        event.target = null;\n\n        return event;\n    }\n\n    /**\n     * Frees the event and puts it back into the event pool.\n     *\n     * It is illegal to reuse the event until it is allocated again, using `this.allocateEvent`.\n     *\n     * It is also advised that events not allocated from {@link PIXI.EventBoundary#allocateEvent this.allocateEvent}\n     * not be freed. This is because of the possibility that the same event is freed twice, which can cause\n     * it to be allocated twice & result in overwriting.\n     * @param event - The event to be freed.\n     * @throws Error if the event is managed by another event boundary.\n     */\n    protected freeEvent<T extends FederatedEvent>(event: T): void\n    {\n        if (event.manager !== this) throw new Error('It is illegal to free an event not managed by this EventBoundary!');\n\n        const constructor = event.constructor;\n\n        if (!this.eventPool.has(constructor as any))\n        {\n            this.eventPool.set(constructor as any, []);\n        }\n\n        this.eventPool.get(constructor as any).push(event);\n    }\n\n    /**\n     * Similar to {@link PIXI.EventEmitter.emit}, except it stops if the `propagationImmediatelyStopped` flag\n     * is set on the event.\n     * @param e - The event to call each listener with.\n     * @param type - The event key.\n     */\n    private notifyListeners(e: FederatedEvent, type: string): void\n    {\n        const listeners = ((e.currentTarget as any)._events as EmitterListeners)[type];\n\n        if (!listeners) return;\n        if (!e.currentTarget.isInteractive()) return;\n\n        if ('fn' in listeners)\n        {\n            if (listeners.once) e.currentTarget.removeListener(type, listeners.fn, undefined, true);\n            listeners.fn.call(listeners.context, e);\n        }\n        else\n        {\n            for (\n                let i = 0, j = listeners.length;\n                i < j && !e.propagationImmediatelyStopped;\n                i++)\n            {\n                if (listeners[i].once) e.currentTarget.removeListener(type, listeners[i].fn, undefined, true);\n                listeners[i].fn.call(listeners[i].context, e);\n            }\n        }\n    }\n}\n", "import { extensions, ExtensionType } from '@pixi/core';\nimport { EventBoundary } from './EventBoundary';\nimport { EventsTicker } from './EventTicker';\nimport { FederatedPointerEvent } from './FederatedPointerEvent';\nimport { FederatedWheelEvent } from './FederatedWheelEvent';\n\nimport type { ExtensionMetadata, IPointData, IRenderer, ISystem } from '@pixi/core';\nimport type { DisplayObject } from '@pixi/display';\nimport type { EventMode } from './FederatedEventTarget';\nimport type { FederatedMouseEvent } from './FederatedMouseEvent';\n\nconst MOUSE_POINTER_ID = 1;\nconst TOUCH_TO_POINTER: Record<string, string> = {\n    touchstart: 'pointerdown',\n    touchend: 'pointerup',\n    touchendoutside: 'pointerupoutside',\n    touchmove: 'pointermove',\n    touchcancel: 'pointercancel',\n};\n\n/** @ignore */\nexport interface EventSystemOptions\n{\n    /**\n     * The default event mode mode for all display objects.\n     * This option only is available when using **@pixi/events** package\n     * (included in the **pixi.js** and **pixi.js-legacy** bundle), otherwise it will be ignored.\n     * @memberof PIXI.IRendererOptions\n     */\n    eventMode?: EventMode;\n\n    /**\n     * The event features that are enabled by the EventSystem\n     * This option only is available when using **@pixi/events** package\n     * (included in the **pixi.js** and **pixi.js-legacy** bundle), otherwise it will be ignored.\n     * @memberof PIXI.IRendererOptions\n     * @example\n     * const app = new PIXI.Application({\n     *   view: canvas,\n     *   events: {\n     *     move: true,\n     *     globalMove: false,\n     *     click: true,\n     *     wheel: true,\n     *   },\n     * });\n     */\n    eventFeatures?: Partial<EventSystemFeatures>\n}\n\n/**\n * The event features that are enabled by the EventSystem\n * This option only is available when using **@pixi/events** package\n * (included in the **pixi.js** and **pixi.js-legacy** bundle), otherwise it will be ignored.\n * @memberof PIXI\n * @since 7.2.0\n */\ninterface EventSystemFeatures\n{\n    /**\n     * Enables pointer events associated with pointer movement:\n     * - `pointermove` / `mousemove` / `touchmove`\n     * - `pointerout` / `mouseout`\n     * - `pointerover` / `mouseover`\n     */\n    move: boolean;\n    // eslint-disable-next-line jsdoc/multiline-blocks\n    /**\n     * Enables global pointer move events:\n     * - `globalpointermove`\n     * - `globalmousemove`\n     * - `globaltouchemove`\n     */\n    globalMove: boolean;\n    /**\n     * Enables pointer events associated with clicking:\n     * - `pointerup` / `mouseup` / `touchend` / 'rightup'\n     * - `pointerupoutside` / `mouseupoutside` / `touchendoutside` / 'rightupoutside'\n     * - `pointerdown` / 'mousedown' / `touchstart` / 'rightdown'\n     * - `click` / `tap`\n     */\n    click: boolean;\n    /** - Enables wheel events. */\n    wheel: boolean;\n}\n\n/**\n * The system for handling UI events.\n * @memberof PIXI\n */\nexport class EventSystem implements ISystem<EventSystemOptions>\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        name: 'events',\n        type: [\n            ExtensionType.RendererSystem,\n            ExtensionType.CanvasRendererSystem\n        ],\n    };\n\n    /**\n     * The event features that are enabled by the EventSystem\n     * This option only is available when using **@pixi/events** package\n     * (included in the **pixi.js** and **pixi.js-legacy** bundle), otherwise it will be ignored.\n     * @since 7.2.0\n     */\n    public static defaultEventFeatures: EventSystemFeatures = {\n        move: true,\n        globalMove: true,\n        click: true,\n        wheel: true,\n    };\n\n    private static _defaultEventMode: EventMode;\n\n    /**\n     * The default interaction mode for all display objects.\n     * @see PIXI.DisplayObject.eventMode\n     * @type {PIXI.EventMode}\n     * @readonly\n     * @since 7.2.0\n     */\n    public static get defaultEventMode()\n    {\n        return this._defaultEventMode;\n    }\n\n    /**\n     * The {@link PIXI.EventBoundary} for the stage.\n     *\n     * The {@link PIXI.EventBoundary#rootTarget rootTarget} of this root boundary is automatically set to\n     * the last rendered object before any event processing is initiated. This means the main scene\n     * needs to be rendered atleast once before UI events will start propagating.\n     *\n     * The root boundary should only be changed during initialization. Otherwise, any state held by the\n     * event boundary may be lost (like hovered & pressed DisplayObjects).\n     */\n    public readonly rootBoundary: EventBoundary;\n\n    /** Does the device support touch events https://www.w3.org/TR/touch-events/ */\n    public readonly supportsTouchEvents = 'ontouchstart' in globalThis;\n\n    /** Does the device support pointer events https://www.w3.org/Submission/pointer-events/ */\n    public readonly supportsPointerEvents = !!globalThis.PointerEvent;\n\n    /**\n     * Should default browser actions automatically be prevented.\n     * Does not apply to pointer events for backwards compatibility\n     * preventDefault on pointer events stops mouse events from firing\n     * Thus, for every pointer event, there will always be either a mouse of touch event alongside it.\n     * @default true\n     */\n    public autoPreventDefault: boolean;\n\n    /**\n     * Dictionary of how different cursor modes are handled. Strings are handled as CSS cursor\n     * values, objects are handled as dictionaries of CSS values for {@code domElement},\n     * and functions are called instead of changing the CSS.\n     * Default CSS cursor values are provided for 'default' and 'pointer' modes.\n     */\n    public cursorStyles: Record<string, string | ((mode: string) => void) | CSSStyleDeclaration>;\n\n    /**\n     * The DOM element to which the root event listeners are bound. This is automatically set to\n     * the renderer's {@link PIXI.Renderer#view view}.\n     */\n    public domElement: HTMLElement = null;\n\n    /** The resolution used to convert between the DOM client space into world space. */\n    public resolution = 1;\n\n    /** The renderer managing this {@link PIXI.EventSystem}. */\n    public renderer: IRenderer;\n\n    /**\n     * The event features that are enabled by the EventSystem\n     * This option only is available when using **@pixi/events** package\n     * (included in the **pixi.js** and **pixi.js-legacy** bundle), otherwise it will be ignored.\n     * @since 7.2.0\n     * @example\n     * const app = new PIXI.Application()\n     * app.renderer.events.features.globalMove = false\n     *\n     * // to override all features use Object.assign\n     * Object.assign(app.renderer.events.features, {\n     *  move: false,\n     *  globalMove: false,\n     *  click: false,\n     *  wheel: false,\n     * })\n     */\n    public readonly features: EventSystemFeatures;\n\n    private currentCursor: string;\n    private rootPointerEvent: FederatedPointerEvent;\n    private rootWheelEvent: FederatedWheelEvent;\n    private eventsAdded: boolean;\n\n    /**\n     * @param {PIXI.Renderer} renderer\n     */\n    constructor(renderer: IRenderer)\n    {\n        this.renderer = renderer;\n        this.rootBoundary = new EventBoundary(null);\n        EventsTicker.init(this);\n\n        this.autoPreventDefault = true;\n        this.eventsAdded = false;\n\n        this.rootPointerEvent = new FederatedPointerEvent(null);\n        this.rootWheelEvent = new FederatedWheelEvent(null);\n\n        this.cursorStyles = {\n            default: 'inherit',\n            pointer: 'pointer',\n        };\n\n        this.features = new Proxy({ ...EventSystem.defaultEventFeatures }, {\n            set: (target, key, value) =>\n            {\n                if (key === 'globalMove')\n                {\n                    this.rootBoundary.enableGlobalMoveEvents = value;\n                }\n                target[key as keyof EventSystemFeatures] = value;\n\n                return true;\n            }\n        });\n\n        this.onPointerDown = this.onPointerDown.bind(this);\n        this.onPointerMove = this.onPointerMove.bind(this);\n        this.onPointerUp = this.onPointerUp.bind(this);\n        this.onPointerOverOut = this.onPointerOverOut.bind(this);\n        this.onWheel = this.onWheel.bind(this);\n    }\n\n    /**\n     * Runner init called, view is available at this point.\n     * @ignore\n     */\n    init(options: EventSystemOptions): void\n    {\n        const { view, resolution } = this.renderer;\n\n        this.setTargetElement(view as HTMLCanvasElement);\n        this.resolution = resolution;\n        EventSystem._defaultEventMode = options.eventMode ?? 'auto';\n        Object.assign(this.features, options.eventFeatures ?? {});\n        this.rootBoundary.enableGlobalMoveEvents = this.features.globalMove;\n    }\n\n    /**\n     * Handle changing resolution.\n     * @ignore\n     */\n    resolutionChange(resolution: number): void\n    {\n        this.resolution = resolution;\n    }\n\n    /** Destroys all event listeners and detaches the renderer. */\n    destroy(): void\n    {\n        this.setTargetElement(null);\n        this.renderer = null;\n    }\n\n    /**\n     * Sets the current cursor mode, handling any callbacks or CSS style changes.\n     * @param mode - cursor mode, a key from the cursorStyles dictionary\n     */\n    public setCursor(mode: string): void\n    {\n        mode = mode || 'default';\n        let applyStyles = true;\n\n        // offscreen canvas does not support setting styles, but cursor modes can be functions,\n        // in order to handle pixi rendered cursors, so we can't bail\n        if (globalThis.OffscreenCanvas && this.domElement instanceof OffscreenCanvas)\n        {\n            applyStyles = false;\n        }\n        // if the mode didn't actually change, bail early\n        if (this.currentCursor === mode)\n        {\n            return;\n        }\n        this.currentCursor = mode;\n        const style = this.cursorStyles[mode];\n\n        // only do things if there is a cursor style for it\n        if (style)\n        {\n            switch (typeof style)\n            {\n                case 'string':\n                    // string styles are handled as cursor CSS\n                    if (applyStyles)\n                    {\n                        this.domElement.style.cursor = style;\n                    }\n                    break;\n                case 'function':\n                    // functions are just called, and passed the cursor mode\n                    style(mode);\n                    break;\n                case 'object':\n                    // if it is an object, assume that it is a dictionary of CSS styles,\n                    // apply it to the interactionDOMElement\n                    if (applyStyles)\n                    {\n                        Object.assign(this.domElement.style, style);\n                    }\n                    break;\n            }\n        }\n        else if (applyStyles && typeof mode === 'string' && !Object.prototype.hasOwnProperty.call(this.cursorStyles, mode))\n        {\n            // if it mode is a string (not a Symbol) and cursorStyles doesn't have any entry\n            // for the mode, then assume that the dev wants it to be CSS for the cursor.\n            this.domElement.style.cursor = mode;\n        }\n    }\n\n    /**\n     * The global pointer event.\n     * Useful for getting the pointer position without listening to events.\n     * @since 7.2.0\n     */\n    public get pointer(): Readonly<FederatedPointerEvent>\n    {\n        return this.rootPointerEvent;\n    }\n\n    /**\n     * Event handler for pointer down events on {@link PIXI.EventSystem#domElement this.domElement}.\n     * @param nativeEvent - The native mouse/pointer/touch event.\n     */\n    private onPointerDown(nativeEvent: MouseEvent | PointerEvent | TouchEvent): void\n    {\n        if (!this.features.click) return;\n        this.rootBoundary.rootTarget = this.renderer.lastObjectRendered as DisplayObject;\n\n        // if we support touch events, then only use those for touch events, not pointer events\n        if (this.supportsTouchEvents && (nativeEvent as PointerEvent).pointerType === 'touch') return;\n\n        const events = this.normalizeToPointerData(nativeEvent);\n\n        /*\n         * No need to prevent default on natural pointer events, as there are no side effects\n         * Normalized events, however, may have the double mousedown/touchstart issue on the native android browser,\n         * so still need to be prevented.\n         */\n\n        // Guaranteed that there will be at least one event in events, and all events must have the same pointer type\n\n        if (this.autoPreventDefault && (events[0] as any).isNormalized)\n        {\n            const cancelable = nativeEvent.cancelable || !('cancelable' in nativeEvent);\n\n            if (cancelable)\n            {\n                nativeEvent.preventDefault();\n            }\n        }\n\n        for (let i = 0, j = events.length; i < j; i++)\n        {\n            const nativeEvent = events[i];\n            const federatedEvent = this.bootstrapEvent(this.rootPointerEvent, nativeEvent);\n\n            this.rootBoundary.mapEvent(federatedEvent);\n        }\n\n        this.setCursor(this.rootBoundary.cursor);\n    }\n\n    /**\n     * Event handler for pointer move events on on {@link PIXI.EventSystem#domElement this.domElement}.\n     * @param nativeEvent - The native mouse/pointer/touch events.\n     */\n    private onPointerMove(nativeEvent: MouseEvent | PointerEvent | TouchEvent): void\n    {\n        if (!this.features.move) return;\n        this.rootBoundary.rootTarget = this.renderer.lastObjectRendered as DisplayObject;\n\n        // if we support touch events, then only use those for touch events, not pointer events\n        if (this.supportsTouchEvents && (nativeEvent as PointerEvent).pointerType === 'touch') return;\n\n        EventsTicker.pointerMoved();\n\n        const normalizedEvents = this.normalizeToPointerData(nativeEvent);\n\n        for (let i = 0, j = normalizedEvents.length; i < j; i++)\n        {\n            const event = this.bootstrapEvent(this.rootPointerEvent, normalizedEvents[i]);\n\n            this.rootBoundary.mapEvent(event);\n        }\n\n        this.setCursor(this.rootBoundary.cursor);\n    }\n\n    /**\n     * Event handler for pointer up events on {@link PIXI.EventSystem#domElement this.domElement}.\n     * @param nativeEvent - The native mouse/pointer/touch event.\n     */\n    private onPointerUp(nativeEvent: MouseEvent | PointerEvent | TouchEvent): void\n    {\n        if (!this.features.click) return;\n        this.rootBoundary.rootTarget = this.renderer.lastObjectRendered as DisplayObject;\n\n        // if we support touch events, then only use those for touch events, not pointer events\n        if (this.supportsTouchEvents && (nativeEvent as PointerEvent).pointerType === 'touch') return;\n\n        let target = nativeEvent.target;\n\n        // if in shadow DOM use composedPath to access target\n        if (nativeEvent.composedPath && nativeEvent.composedPath().length > 0)\n        {\n            target = nativeEvent.composedPath()[0];\n        }\n\n        const outside = target !== this.domElement ? 'outside' : '';\n        const normalizedEvents = this.normalizeToPointerData(nativeEvent);\n\n        for (let i = 0, j = normalizedEvents.length; i < j; i++)\n        {\n            const event = this.bootstrapEvent(this.rootPointerEvent, normalizedEvents[i]);\n\n            event.type += outside;\n\n            this.rootBoundary.mapEvent(event);\n        }\n\n        this.setCursor(this.rootBoundary.cursor);\n    }\n\n    /**\n     * Event handler for pointer over & out events on {@link PIXI.EventSystem#domElement this.domElement}.\n     * @param nativeEvent - The native mouse/pointer/touch event.\n     */\n    private onPointerOverOut(nativeEvent: MouseEvent | PointerEvent | TouchEvent): void\n    {\n        if (!this.features.click) return;\n        this.rootBoundary.rootTarget = this.renderer.lastObjectRendered as DisplayObject;\n\n        // if we support touch events, then only use those for touch events, not pointer events\n        if (this.supportsTouchEvents && (nativeEvent as PointerEvent).pointerType === 'touch') return;\n\n        const normalizedEvents = this.normalizeToPointerData(nativeEvent);\n\n        for (let i = 0, j = normalizedEvents.length; i < j; i++)\n        {\n            const event = this.bootstrapEvent(this.rootPointerEvent, normalizedEvents[i]);\n\n            this.rootBoundary.mapEvent(event);\n        }\n\n        this.setCursor(this.rootBoundary.cursor);\n    }\n\n    /**\n     * Passive handler for `wheel` events on {@link PIXI.EventSystem.domElement this.domElement}.\n     * @param nativeEvent - The native wheel event.\n     */\n    protected onWheel(nativeEvent: WheelEvent): void\n    {\n        if (!this.features.wheel) return;\n        const wheelEvent = this.normalizeWheelEvent(nativeEvent);\n\n        this.rootBoundary.rootTarget = this.renderer.lastObjectRendered as DisplayObject;\n        this.rootBoundary.mapEvent(wheelEvent);\n    }\n\n    /**\n     * Sets the {@link PIXI.EventSystem#domElement domElement} and binds event listeners.\n     *\n     * To deregister the current DOM element without setting a new one, pass {@code null}.\n     * @param element - The new DOM element.\n     */\n    public setTargetElement(element: HTMLElement): void\n    {\n        this.removeEvents();\n        this.domElement = element;\n        EventsTicker.domElement = element;\n        this.addEvents();\n    }\n\n    /** Register event listeners on {@link PIXI.Renderer#domElement this.domElement}. */\n    private addEvents(): void\n    {\n        if (this.eventsAdded || !this.domElement)\n        {\n            return;\n        }\n\n        EventsTicker.addTickerListener();\n\n        const style = this.domElement.style as CrossCSSStyleDeclaration;\n\n        if (style)\n        {\n            if ((globalThis.navigator as any).msPointerEnabled)\n            {\n                style.msContentZooming = 'none';\n                style.msTouchAction = 'none';\n            }\n            else if (this.supportsPointerEvents)\n            {\n                style.touchAction = 'none';\n            }\n        }\n\n        /*\n         * These events are added first, so that if pointer events are normalized, they are fired\n         * in the same order as non-normalized events. ie. pointer event 1st, mouse / touch 2nd\n         */\n        if (this.supportsPointerEvents)\n        {\n            globalThis.document.addEventListener('pointermove', this.onPointerMove, true);\n            this.domElement.addEventListener('pointerdown', this.onPointerDown, true);\n            // pointerout is fired in addition to pointerup (for touch events) and pointercancel\n            // we already handle those, so for the purposes of what we do in onPointerOut, we only\n            // care about the pointerleave event\n            this.domElement.addEventListener('pointerleave', this.onPointerOverOut, true);\n            this.domElement.addEventListener('pointerover', this.onPointerOverOut, true);\n            // globalThis.addEventListener('pointercancel', this.onPointerCancel, true);\n            globalThis.addEventListener('pointerup', this.onPointerUp, true);\n        }\n        else\n        {\n            globalThis.document.addEventListener('mousemove', this.onPointerMove, true);\n            this.domElement.addEventListener('mousedown', this.onPointerDown, true);\n            this.domElement.addEventListener('mouseout', this.onPointerOverOut, true);\n            this.domElement.addEventListener('mouseover', this.onPointerOverOut, true);\n            globalThis.addEventListener('mouseup', this.onPointerUp, true);\n        }\n\n        // Always look directly for touch events so that we can provide original data\n        // In a future version we should change this to being just a fallback and rely solely on\n        // PointerEvents whenever available\n        if (this.supportsTouchEvents)\n        {\n            this.domElement.addEventListener('touchstart', this.onPointerDown, true);\n            // this.domElement.addEventListener('touchcancel', this.onPointerCancel, true);\n            this.domElement.addEventListener('touchend', this.onPointerUp, true);\n            this.domElement.addEventListener('touchmove', this.onPointerMove, true);\n        }\n\n        this.domElement.addEventListener('wheel', this.onWheel, {\n            passive: true,\n            capture: true,\n        });\n\n        this.eventsAdded = true;\n    }\n\n    /** Unregister event listeners on {@link PIXI.EventSystem#domElement this.domElement}. */\n    private removeEvents(): void\n    {\n        if (!this.eventsAdded || !this.domElement)\n        {\n            return;\n        }\n\n        EventsTicker.removeTickerListener();\n\n        const style = this.domElement.style as CrossCSSStyleDeclaration;\n\n        if ((globalThis.navigator as any).msPointerEnabled)\n        {\n            style.msContentZooming = '';\n            style.msTouchAction = '';\n        }\n        else if (this.supportsPointerEvents)\n        {\n            style.touchAction = '';\n        }\n\n        if (this.supportsPointerEvents)\n        {\n            globalThis.document.removeEventListener('pointermove', this.onPointerMove, true);\n            this.domElement.removeEventListener('pointerdown', this.onPointerDown, true);\n            this.domElement.removeEventListener('pointerleave', this.onPointerOverOut, true);\n            this.domElement.removeEventListener('pointerover', this.onPointerOverOut, true);\n            // globalThis.removeEventListener('pointercancel', this.onPointerCancel, true);\n            globalThis.removeEventListener('pointerup', this.onPointerUp, true);\n        }\n        else\n        {\n            globalThis.document.removeEventListener('mousemove', this.onPointerMove, true);\n            this.domElement.removeEventListener('mousedown', this.onPointerDown, true);\n            this.domElement.removeEventListener('mouseout', this.onPointerOverOut, true);\n            this.domElement.removeEventListener('mouseover', this.onPointerOverOut, true);\n            globalThis.removeEventListener('mouseup', this.onPointerUp, true);\n        }\n\n        if (this.supportsTouchEvents)\n        {\n            this.domElement.removeEventListener('touchstart', this.onPointerDown, true);\n            // this.domElement.removeEventListener('touchcancel', this.onPointerCancel, true);\n            this.domElement.removeEventListener('touchend', this.onPointerUp, true);\n            this.domElement.removeEventListener('touchmove', this.onPointerMove, true);\n        }\n\n        this.domElement.removeEventListener('wheel', this.onWheel, true);\n\n        this.domElement = null;\n        this.eventsAdded = false;\n    }\n\n    /**\n     * Maps x and y coords from a DOM object and maps them correctly to the PixiJS view. The\n     * resulting value is stored in the point. This takes into account the fact that the DOM\n     * element could be scaled and positioned anywhere on the screen.\n     * @param  {PIXI.IPointData} point - the point that the result will be stored in\n     * @param  {number} x - the x coord of the position to map\n     * @param  {number} y - the y coord of the position to map\n     */\n    public mapPositionToPoint(point: IPointData, x: number, y: number): void\n    {\n        let rect;\n\n        // IE 11 fix\n        if (!this.domElement.parentElement)\n        {\n            rect = {\n                x: 0,\n                y: 0,\n                width: (this.domElement as any).width,\n                height: (this.domElement as any).height,\n                left: 0,\n                top: 0\n            };\n        }\n        else\n        {\n            rect = this.domElement.getBoundingClientRect();\n        }\n\n        const resolutionMultiplier = 1.0 / this.resolution;\n\n        point.x = ((x - rect.left) * ((this.domElement as any).width / rect.width)) * resolutionMultiplier;\n        point.y = ((y - rect.top) * ((this.domElement as any).height / rect.height)) * resolutionMultiplier;\n    }\n\n    /**\n     * Ensures that the original event object contains all data that a regular pointer event would have\n     * @param event - The original event data from a touch or mouse event\n     * @returns An array containing a single normalized pointer event, in the case of a pointer\n     *  or mouse event, or a multiple normalized pointer events if there are multiple changed touches\n     */\n    private normalizeToPointerData(event: TouchEvent | MouseEvent | PointerEvent): PointerEvent[]\n    {\n        const normalizedEvents = [];\n\n        if (this.supportsTouchEvents && event instanceof TouchEvent)\n        {\n            for (let i = 0, li = event.changedTouches.length; i < li; i++)\n            {\n                const touch = event.changedTouches[i] as PixiTouch;\n\n                if (typeof touch.button === 'undefined') touch.button = 0;\n                if (typeof touch.buttons === 'undefined') touch.buttons = 1;\n                if (typeof touch.isPrimary === 'undefined')\n                {\n                    touch.isPrimary = event.touches.length === 1 && event.type === 'touchstart';\n                }\n                if (typeof touch.width === 'undefined') touch.width = touch.radiusX || 1;\n                if (typeof touch.height === 'undefined') touch.height = touch.radiusY || 1;\n                if (typeof touch.tiltX === 'undefined') touch.tiltX = 0;\n                if (typeof touch.tiltY === 'undefined') touch.tiltY = 0;\n                if (typeof touch.pointerType === 'undefined') touch.pointerType = 'touch';\n                if (typeof touch.pointerId === 'undefined') touch.pointerId = touch.identifier || 0;\n                if (typeof touch.pressure === 'undefined') touch.pressure = touch.force || 0.5;\n                if (typeof touch.twist === 'undefined') touch.twist = 0;\n                if (typeof touch.tangentialPressure === 'undefined') touch.tangentialPressure = 0;\n                // TODO: Remove these, as layerX/Y is not a standard, is deprecated, has uneven\n                // support, and the fill ins are not quite the same\n                // offsetX/Y might be okay, but is not the same as clientX/Y when the canvas's top\n                // left is not 0,0 on the page\n                if (typeof touch.layerX === 'undefined') touch.layerX = touch.offsetX = touch.clientX;\n                if (typeof touch.layerY === 'undefined') touch.layerY = touch.offsetY = touch.clientY;\n\n                // mark the touch as normalized, just so that we know we did it\n                touch.isNormalized = true;\n                touch.type = event.type;\n\n                normalizedEvents.push(touch);\n            }\n        }\n        // apparently PointerEvent subclasses MouseEvent, so yay\n        else if (!globalThis.MouseEvent\n            || (event instanceof MouseEvent && (!this.supportsPointerEvents || !(event instanceof globalThis.PointerEvent))))\n        {\n            const tempEvent = event as PixiPointerEvent;\n\n            if (typeof tempEvent.isPrimary === 'undefined') tempEvent.isPrimary = true;\n            if (typeof tempEvent.width === 'undefined') tempEvent.width = 1;\n            if (typeof tempEvent.height === 'undefined') tempEvent.height = 1;\n            if (typeof tempEvent.tiltX === 'undefined') tempEvent.tiltX = 0;\n            if (typeof tempEvent.tiltY === 'undefined') tempEvent.tiltY = 0;\n            if (typeof tempEvent.pointerType === 'undefined') tempEvent.pointerType = 'mouse';\n            if (typeof tempEvent.pointerId === 'undefined') tempEvent.pointerId = MOUSE_POINTER_ID;\n            if (typeof tempEvent.pressure === 'undefined') tempEvent.pressure = 0.5;\n            if (typeof tempEvent.twist === 'undefined') tempEvent.twist = 0;\n            if (typeof tempEvent.tangentialPressure === 'undefined') tempEvent.tangentialPressure = 0;\n\n            // mark the mouse event as normalized, just so that we know we did it\n            tempEvent.isNormalized = true;\n\n            normalizedEvents.push(tempEvent);\n        }\n        else\n        {\n            normalizedEvents.push(event);\n        }\n\n        return normalizedEvents as PointerEvent[];\n    }\n\n    /**\n     * Normalizes the native {@link https://w3c.github.io/uievents/#interface-wheelevent WheelEvent}.\n     *\n     * The returned {@link PIXI.FederatedWheelEvent} is a shared instance. It will not persist across\n     * multiple native wheel events.\n     * @param nativeEvent - The native wheel event that occurred on the canvas.\n     * @returns A federated wheel event.\n     */\n    protected normalizeWheelEvent(nativeEvent: WheelEvent): FederatedWheelEvent\n    {\n        const event = this.rootWheelEvent;\n\n        this.transferMouseData(event, nativeEvent);\n\n        // When WheelEvent is triggered by scrolling with mouse wheel, reading WheelEvent.deltaMode\n        // before deltaX/deltaY/deltaZ on Firefox will result in WheelEvent.DOM_DELTA_LINE (1),\n        // while reading WheelEvent.deltaMode after deltaX/deltaY/deltaZ on Firefox or reading\n        // in any order on other browsers will result in WheelEvent.DOM_DELTA_PIXEL (0).\n        // Therefore, we need to read WheelEvent.deltaMode after deltaX/deltaY/deltaZ in order to\n        // make its behavior more consistent across browsers.\n        // @see https://github.com/pixijs/pixijs/issues/8970\n        event.deltaX = nativeEvent.deltaX;\n        event.deltaY = nativeEvent.deltaY;\n        event.deltaZ = nativeEvent.deltaZ;\n        event.deltaMode = nativeEvent.deltaMode;\n\n        this.mapPositionToPoint(event.screen, nativeEvent.clientX, nativeEvent.clientY);\n        event.global.copyFrom(event.screen);\n        event.offset.copyFrom(event.screen);\n\n        event.nativeEvent = nativeEvent;\n        event.type = nativeEvent.type;\n\n        return event;\n    }\n\n    /**\n     * Normalizes the `nativeEvent` into a federateed {@link PIXI.FederatedPointerEvent}.\n     * @param event\n     * @param nativeEvent\n     */\n    private bootstrapEvent(event: FederatedPointerEvent, nativeEvent: PointerEvent): FederatedPointerEvent\n    {\n        event.originalEvent = null;\n        event.nativeEvent = nativeEvent;\n\n        event.pointerId = nativeEvent.pointerId;\n        event.width = nativeEvent.width;\n        event.height = nativeEvent.height;\n        event.isPrimary = nativeEvent.isPrimary;\n        event.pointerType = nativeEvent.pointerType;\n        event.pressure = nativeEvent.pressure;\n        event.tangentialPressure = nativeEvent.tangentialPressure;\n        event.tiltX = nativeEvent.tiltX;\n        event.tiltY = nativeEvent.tiltY;\n        event.twist = nativeEvent.twist;\n        this.transferMouseData(event, nativeEvent);\n\n        this.mapPositionToPoint(event.screen, nativeEvent.clientX, nativeEvent.clientY);\n        event.global.copyFrom(event.screen);// global = screen for top-level\n        event.offset.copyFrom(event.screen);// EventBoundary recalculates using its rootTarget\n\n        event.isTrusted = nativeEvent.isTrusted;\n        if (event.type === 'pointerleave')\n        {\n            event.type = 'pointerout';\n        }\n        if (event.type.startsWith('mouse'))\n        {\n            event.type = event.type.replace('mouse', 'pointer');\n        }\n        if (event.type.startsWith('touch'))\n        {\n            event.type = TOUCH_TO_POINTER[event.type] || event.type;\n        }\n\n        return event;\n    }\n\n    /**\n     * Transfers base & mouse event data from the {@code nativeEvent} to the federated event.\n     * @param event\n     * @param nativeEvent\n     */\n    private transferMouseData(event: FederatedMouseEvent, nativeEvent: MouseEvent): void\n    {\n        event.isTrusted = nativeEvent.isTrusted;\n        event.srcElement = nativeEvent.srcElement;\n        event.timeStamp = performance.now();\n        event.type = nativeEvent.type;\n\n        event.altKey = nativeEvent.altKey;\n        event.button = nativeEvent.button;\n        event.buttons = nativeEvent.buttons;\n        event.client.x = nativeEvent.clientX;\n        event.client.y = nativeEvent.clientY;\n        event.ctrlKey = nativeEvent.ctrlKey;\n        event.metaKey = nativeEvent.metaKey;\n        event.movement.x = nativeEvent.movementX;\n        event.movement.y = nativeEvent.movementY;\n        event.page.x = nativeEvent.pageX;\n        event.page.y = nativeEvent.pageY;\n        event.relatedTarget = null;\n        event.shiftKey = nativeEvent.shiftKey;\n    }\n}\n\ninterface CrossCSSStyleDeclaration extends CSSStyleDeclaration\n{\n    msContentZooming: string;\n    msTouchAction: string;\n}\n\ninterface PixiPointerEvent extends PointerEvent\n{\n    isPrimary: boolean;\n    width: number;\n    height: number;\n    tiltX: number;\n    tiltY: number;\n    pointerType: string;\n    pointerId: number;\n    pressure: number;\n    twist: number;\n    tangentialPressure: number;\n    isNormalized: boolean;\n    type: string;\n}\n\ninterface PixiTouch extends Touch\n{\n    button: number;\n    buttons: number;\n    isPrimary: boolean;\n    width: number;\n    height: number;\n    tiltX: number;\n    tiltY: number;\n    pointerType: string;\n    pointerId: number;\n    pressure: number;\n    twist: number;\n    tangentialPressure: number;\n    layerX: number;\n    layerY: number;\n    offsetX: number;\n    offsetY: number;\n    isNormalized: boolean;\n    type: string;\n}\n\nextensions.add(EventSystem);\n", "import { utils } from '@pixi/core';\nimport { DisplayObject } from '@pixi/display';\nimport { EventSystem } from './EventSystem';\nimport { FederatedEvent } from './FederatedEvent';\n\nimport type { AllFederatedEventMap } from './FederatedEventMap';\nimport type { FederatedPointerEvent } from './FederatedPointerEvent';\nimport type { FederatedWheelEvent } from './FederatedWheelEvent';\n\nexport type Cursor = 'auto'\n| 'default'\n| 'none'\n| 'context-menu'\n| 'help'\n| 'pointer'\n| 'progress'\n| 'wait'\n| 'cell'\n| 'crosshair'\n| 'text'\n| 'vertical-text'\n| 'alias'\n| 'copy'\n| 'move'\n| 'no-drop'\n| 'not-allowed'\n| 'e-resize'\n| 'n-resize'\n| 'ne-resize'\n| 'nw-resize'\n| 's-resize'\n| 'se-resize'\n| 'sw-resize'\n| 'w-resize'\n| 'ns-resize'\n| 'ew-resize'\n| 'nesw-resize'\n| 'col-resize'\n| 'nwse-resize'\n| 'row-resize'\n| 'all-scroll'\n| 'zoom-in'\n| 'zoom-out'\n| 'grab'\n| 'grabbing';\n\n// @ignore - This is documented elsewhere.\nexport interface IHitArea\n{\n    contains(x: number, y: number): boolean;\n}\n\n/**\n * Function type for handlers, e.g., onclick\n * @memberof PIXI\n */\nexport type FederatedEventHandler<T= FederatedPointerEvent> = (event: T) => void;\n\n/**\n * The type of interaction a DisplayObject can be. For more information on values and their meaning,\n * see {@link PIXI.DisplayObject.eventMode DisplayObject's eventMode property}.\n * @memberof PIXI\n * @since 7.2.0\n */\nexport type EventMode = 'none' | 'passive' | 'auto' | 'static' | 'dynamic';\n\n/**\n * Describes the shape for a {@link PIXI.FederatedEvent}'s' `eventTarget`.\n * @memberof PIXI\n */\nexport interface FederatedEventTarget extends utils.EventEmitter, EventTarget\n{\n    /** The cursor preferred when the mouse pointer is hovering over. */\n    cursor: Cursor | string;\n\n    /** The parent of this event target. */\n    readonly parent?: FederatedEventTarget;\n\n    /** The children of this event target. */\n    readonly children?: ReadonlyArray<FederatedEventTarget>;\n\n    /** Whether this event target should fire UI events. */\n    interactive: boolean\n    _internalInteractive: boolean;\n    /** The mode of interaction for this object */\n    eventMode: EventMode;\n    _internalEventMode: EventMode;\n\n    /** Returns true if the DisplayObject has interactive 'static' or 'dynamic' */\n    isInteractive: () => boolean;\n\n    /** Whether this event target has any children that need UI events. This can be used optimize event propagation. */\n    interactiveChildren: boolean;\n\n    /** The hit-area specifies the area for which pointer events should be captured by this event target. */\n    hitArea: IHitArea | null;\n\n    // In Angular projects, zone.js is monkey patching the `EventTarget`\n    // by adding its own `removeAllListeners(event?: string): void;` method,\n    // so we have to override this signature when extending both `EventTarget` and `utils.EventEmitter`\n    // to make it compatible with Angular projects\n    // @see https://github.com/pixijs/pixijs/issues/8794\n\n    /** Remove all listeners, or those of the specified event. */\n    removeAllListeners(event?: string | symbol): this;\n\n    /** Handler for 'click' event */\n    onclick: FederatedEventHandler | null;\n    /** Handler for 'mousedown' event */\n    onmousedown: FederatedEventHandler | null;\n    /** Handler for 'mouseenter' event */\n    onmouseenter: FederatedEventHandler | null;\n    /** Handler for 'mouseleave' event */\n    onmouseleave: FederatedEventHandler | null;\n    /** Handler for 'mousemove' event */\n    onmousemove: FederatedEventHandler | null;\n    /** Handler for 'globalmousemove' event */\n    onglobalmousemove: FederatedEventHandler | null;\n    /** Handler for 'mouseout' event */\n    onmouseout: FederatedEventHandler | null;\n    /** Handler for 'mouseover' event */\n    onmouseover: FederatedEventHandler | null;\n    /** Handler for 'mouseup' event */\n    onmouseup: FederatedEventHandler | null;\n    /** Handler for 'mouseupoutside' event */\n    onmouseupoutside: FederatedEventHandler | null;\n    /** Handler for 'pointercancel' event */\n    onpointercancel: FederatedEventHandler | null;\n    /** Handler for 'pointerdown' event */\n    onpointerdown: FederatedEventHandler | null;\n    /** Handler for 'pointerenter' event */\n    onpointerenter: FederatedEventHandler | null;\n    /** Handler for 'pointerleave' event */\n    onpointerleave: FederatedEventHandler | null;\n    /** Handler for 'pointermove' event */\n    onpointermove: FederatedEventHandler | null;\n    /** Handler for 'globalpointermove' event */\n    onglobalpointermove: FederatedEventHandler | null;\n    /** Handler for 'pointerout' event */\n    onpointerout: FederatedEventHandler | null;\n    /** Handler for 'pointerover' event */\n    onpointerover: FederatedEventHandler | null;\n    /** Handler for 'pointertap' event */\n    onpointertap: FederatedEventHandler | null;\n    /** Handler for 'pointerup' event */\n    onpointerup: FederatedEventHandler | null;\n    /** Handler for 'pointerupoutside' event */\n    onpointerupoutside: FederatedEventHandler | null;\n    /** Handler for 'rightclick' event */\n    onrightclick: FederatedEventHandler | null;\n    /** Handler for 'rightdown' event */\n    onrightdown: FederatedEventHandler | null;\n    /** Handler for 'rightup' event */\n    onrightup: FederatedEventHandler | null;\n    /** Handler for 'rightupoutside' event */\n    onrightupoutside: FederatedEventHandler | null;\n    /** Handler for 'tap' event */\n    ontap: FederatedEventHandler | null;\n    /** Handler for 'touchcancel' event */\n    ontouchcancel: FederatedEventHandler | null;\n    /** Handler for 'touchend' event */\n    ontouchend: FederatedEventHandler | null;\n    /** Handler for 'touchendoutside' event */\n    ontouchendoutside: FederatedEventHandler | null;\n    /** Handler for 'touchmove' event */\n    ontouchmove: FederatedEventHandler | null;\n    /** Handler for 'globaltouchmove' event */\n    onglobaltouchmove: FederatedEventHandler | null;\n    /** Handler for 'touchstart' event */\n    ontouchstart: FederatedEventHandler | null;\n    /** Handler for 'wheel' event */\n    onwheel: FederatedEventHandler<FederatedWheelEvent> | null;\n}\n\ntype AddListenerOptions = boolean | AddEventListenerOptions;\ntype RemoveListenerOptions = boolean | EventListenerOptions;\n\nexport interface IFederatedDisplayObject\n    extends Omit<FederatedEventTarget, 'parent' | 'children' | keyof utils.EventEmitter | 'cursor'>\n{\n    addEventListener<K extends keyof AllFederatedEventMap>(\n        type: K,\n        listener: (e: AllFederatedEventMap[K]) => any,\n        options?: AddListenerOptions\n    ): void;\n    addEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n        options?: AddListenerOptions\n    ): void;\n    removeEventListener<K extends keyof AllFederatedEventMap>(\n        type: K,\n        listener: (e: AllFederatedEventMap[K]) => any,\n        options?: RemoveListenerOptions\n    ): void;\n    removeEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n        options?: RemoveListenerOptions\n    ): void;\n}\n\nfunction convertEventModeToInteractiveMode(mode: EventMode): boolean\n{\n    return mode === 'dynamic' || mode === 'static';\n}\n\nexport const FederatedDisplayObject: IFederatedDisplayObject = {\n\n    /**\n     * Property-based event handler for the `click` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onclick = (event) => {\n     *  //some function here that happens on click\n     * }\n     */\n    onclick: null,\n\n    /**\n     * Property-based event handler for the `mousedown` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onmousedown = (event) => {\n     *  //some function here that happens on mousedown\n     * }\n     */\n    onmousedown: null,\n\n    /**\n     * Property-based event handler for the `mouseenter` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onmouseenter = (event) => {\n     *  //some function here that happens on mouseenter\n     * }\n     */\n    onmouseenter: null,\n\n    /**\n     * Property-based event handler for the `mouseleave` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onmouseleave = (event) => {\n     *  //some function here that happens on mouseleave\n     * }\n     */\n    onmouseleave: null,\n\n    /**\n     * Property-based event handler for the `mousemove` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onmousemove = (event) => {\n     *  //some function here that happens on mousemove\n     * }\n     */\n    onmousemove: null,\n\n    /**\n     * Property-based event handler for the `globalmousemove` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onglobalmousemove = (event) => {\n     *  //some function here that happens on globalmousemove\n     * }\n     */\n    onglobalmousemove: null,\n\n    /**\n     * Property-based event handler for the `mouseout` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onmouseout = (event) => {\n     *  //some function here that happens on mouseout\n     * }\n     */\n    onmouseout: null,\n\n    /**\n     * Property-based event handler for the `mouseover` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onmouseover = (event) => {\n     *  //some function here that happens on mouseover\n     * }\n     */\n    onmouseover:  null,\n\n    /**\n     * Property-based event handler for the `mouseup` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onmouseup = (event) => {\n     *  //some function here that happens on mouseup\n     * }\n     */\n    onmouseup:  null,\n\n    /**\n     * Property-based event handler for the `mouseupoutside` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onmouseupoutside = (event) => {\n     *  //some function here that happens on mouseupoutside\n     * }\n     */\n    onmouseupoutside:  null,\n\n    /**\n     * Property-based event handler for the `pointercancel` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onpointercancel = (event) => {\n     *  //some function here that happens on pointercancel\n     * }\n     */\n    onpointercancel:  null,\n\n    /**\n     * Property-based event handler for the `pointerdown` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onpointerdown = (event) => {\n     *  //some function here that happens on pointerdown\n     * }\n     */\n    onpointerdown:  null,\n\n    /**\n     * Property-based event handler for the `pointerenter` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onpointerenter = (event) => {\n     *  //some function here that happens on pointerenter\n     * }\n     */\n    onpointerenter:  null,\n\n    /**\n     * Property-based event handler for the `pointerleave` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onpointerleave = (event) => {\n     *  //some function here that happens on pointerleave\n     * }\n     */\n    onpointerleave:  null,\n\n    /**\n     * Property-based event handler for the `pointermove` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onpointermove = (event) => {\n     *  //some function here that happens on pointermove\n     * }\n     */\n    onpointermove:  null,\n\n    /**\n     * Property-based event handler for the `globalpointermove` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onglobalpointermove = (event) => {\n     *  //some function here that happens on globalpointermove\n     * }\n     */\n    onglobalpointermove:  null,\n\n    /**\n     * Property-based event handler for the `pointerout` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onpointerout = (event) => {\n     *  //some function here that happens on pointerout\n     * }\n     */\n    onpointerout:  null,\n\n    /**\n     * Property-based event handler for the `pointerover` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onpointerover = (event) => {\n     *  //some function here that happens on pointerover\n     * }\n     */\n    onpointerover:  null,\n\n    /**\n     * Property-based event handler for the `pointertap` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onpointertap = (event) => {\n     *  //some function here that happens on pointertap\n     * }\n     */\n    onpointertap:  null,\n\n    /**\n     * Property-based event handler for the `pointerup` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onpointerup = (event) => {\n     *  //some function here that happens on pointerup\n     * }\n     */\n    onpointerup:  null,\n\n    /**\n     * Property-based event handler for the `pointerupoutside` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onpointerupoutside = (event) => {\n     *  //some function here that happens on pointerupoutside\n     * }\n     */\n    onpointerupoutside:  null,\n\n    /**\n     * Property-based event handler for the `rightclick` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onrightclick = (event) => {\n     *  //some function here that happens on rightclick\n     * }\n     */\n    onrightclick:  null,\n\n    /**\n     * Property-based event handler for the `rightdown` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onrightdown = (event) => {\n     *  //some function here that happens on rightdown\n     * }\n     */\n    onrightdown:  null,\n\n    /**\n     * Property-based event handler for the `rightup` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onrightup = (event) => {\n     *  //some function here that happens on rightup\n     * }\n     */\n    onrightup:  null,\n\n    /**\n     * Property-based event handler for the `rightupoutside` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onrightupoutside = (event) => {\n     *  //some function here that happens on rightupoutside\n     * }\n     */\n    onrightupoutside:  null,\n\n    /**\n     * Property-based event handler for the `tap` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.ontap = (event) => {\n     *  //some function here that happens on tap\n     * }\n     */\n    ontap:  null,\n\n    /**\n     * Property-based event handler for the `touchcancel` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.ontouchcancel = (event) => {\n     *  //some function here that happens on touchcancel\n     * }\n     */\n    ontouchcancel:  null,\n\n    /**\n     * Property-based event handler for the `touchend` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.ontouchend = (event) => {\n     *  //some function here that happens on touchend\n     * }\n     */\n    ontouchend:  null,\n\n    /**\n     * Property-based event handler for the `touchendoutside` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.ontouchendoutside = (event) => {\n     *  //some function here that happens on touchendoutside\n     * }\n     */\n    ontouchendoutside:  null,\n\n    /**\n     * Property-based event handler for the `touchmove` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.ontouchmove = (event) => {\n     *  //some function here that happens on touchmove\n     * }\n     */\n    ontouchmove:  null,\n\n    /**\n     * Property-based event handler for the `globaltouchmove` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onglobaltouchmove = (event) => {\n     *  //some function here that happens on globaltouchmove\n     * }\n     */\n    onglobaltouchmove:  null,\n\n    /**\n     * Property-based event handler for the `touchstart` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.ontouchstart = (event) => {\n     *  //some function here that happens on touchstart\n     * }\n     */\n    ontouchstart:  null,\n\n    /**\n     * Property-based event handler for the `wheel` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onwheel = (event) => {\n     *  //some function here that happens on wheel\n     * }\n     */\n    onwheel:  null,\n    /**\n     * @ignore\n     */\n    _internalInteractive: undefined,\n    /**\n     * Enable interaction events for the DisplayObject. Touch, pointer and mouse\n     * @memberof PIXI.DisplayObject#\n     */\n    get interactive()\n    {\n        return this._internalInteractive ?? convertEventModeToInteractiveMode(EventSystem.defaultEventMode);\n    },\n    set interactive(value: boolean)\n    {\n        // #if _DEBUG\n        utils.deprecation(\n            '7.2.0',\n            // eslint-disable-next-line max-len\n            `Setting interactive is deprecated, use eventMode = 'none'/'passive'/'auto'/'static'/'dynamic' instead.`\n        );\n        // #endif\n\n        this._internalInteractive = value;\n        this.eventMode = value ? 'static' : 'auto';\n    },\n    /**\n     * @ignore\n     */\n    _internalEventMode: undefined,\n    /**\n     * Enable interaction events for the DisplayObject. Touch, pointer and mouse.\n     * This now replaces the `interactive` property\n     * There is 5 types of interaction settings:\n     * - `'none'`: Ignores all interaction events, even on its children.\n     * - `'passive'`: Does not emit events and ignores all hit testing on itself and non-interactive children.\n     * Interactive children will still emit events.\n     * - `'auto'`: Does not emit events and but is hit tested if parent is interactive. Same as `interactive = false` in v7\n     * - `'static'`: Emit events and is hit tested. Same as `interaction = true` in v7\n     * - `'dynamic'`: Emits events and is hit tested but will also receive mock interaction events fired from a ticker to\n     * allow for interaction when the mouse isn't moving\n     * @example\n     * import { Sprite } from 'pixi.js';\n     *\n     * const sprite = new Sprite(texture);\n     * sprite.eventMode = 'static';\n     * sprite.on('tap', (event) => {\n     *     // Handle event\n     * });\n     * @memberof PIXI.DisplayObject#\n     * @since 7.2.0\n     */\n    get eventMode()\n    {\n        return this._internalEventMode ?? EventSystem.defaultEventMode;\n    },\n    set eventMode(value)\n    {\n        this._internalInteractive = convertEventModeToInteractiveMode(value);\n        this._internalEventMode = value;\n    },\n\n    /**\n     * Determines if the displayObject is interactive or not\n     * @returns {boolean} Whether the displayObject is interactive or not\n     * @memberof PIXI.DisplayObject#\n     * @since 7.2.0\n     * @example\n     * import { Sprite } from 'pixi.js';\n     * const sprite = new Sprite(texture);\n     * sprite.eventMode = 'static';\n     * sprite.isInteractive(); // true\n     *\n     * sprite.eventMode = 'dynamic';\n     * sprite.isInteractive(); // true\n     *\n     * sprite.eventMode = 'none';\n     * sprite.isInteractive(); // false\n     *\n     * sprite.eventMode = 'passive';\n     * sprite.isInteractive(); // false\n     *\n     * sprite.eventMode = 'auto';\n     * sprite.isInteractive(); // false\n     */\n    isInteractive()\n    {\n        return this.eventMode === 'static' || this.eventMode === 'dynamic';\n    },\n\n    /**\n     * Determines if the children to the displayObject can be clicked/touched\n     * Setting this to false allows PixiJS to bypass a recursive `hitTest` function\n     * @memberof PIXI.Container#\n     */\n    interactiveChildren: true,\n\n    /**\n     * Interaction shape. Children will be hit first, then this shape will be checked.\n     * Setting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.\n     * @example\n     * import { Rectangle, Sprite } from 'pixi.js';\n     *\n     * const sprite = new Sprite(texture);\n     * sprite.interactive = true;\n     * sprite.hitArea = new Rectangle(0, 0, 100, 100);\n     * @member {PIXI.IHitArea}\n     * @memberof PIXI.DisplayObject#\n     */\n    hitArea: null,\n\n    /**\n     * Unlike `on` or `addListener` which are methods from EventEmitter, `addEventListener`\n     * seeks to be compatible with the DOM's `addEventListener` with support for options.\n     * **IMPORTANT:** _Only_ available if using the `@pixi/events` package.\n     * @memberof PIXI.DisplayObject\n     * @param type - The type of event to listen to.\n     * @param listener - The listener callback or object.\n     * @param options - Listener options, used for capture phase.\n     * @example\n     * // Tell the user whether they did a single, double, triple, or nth click.\n     * button.addEventListener('click', {\n     *     handleEvent(e): {\n     *         let prefix;\n     *\n     *         switch (e.detail) {\n     *             case 1: prefix = 'single'; break;\n     *             case 2: prefix = 'double'; break;\n     *             case 3: prefix = 'triple'; break;\n     *             default: prefix = e.detail + 'th'; break;\n     *         }\n     *\n     *         console.log('That was a ' + prefix + 'click');\n     *     }\n     * });\n     *\n     * // But skip the first click!\n     * button.parent.addEventListener('click', function blockClickOnce(e) {\n     *     e.stopImmediatePropagation();\n     *     button.parent.removeEventListener('click', blockClickOnce, true);\n     * }, {\n     *     capture: true,\n     * });\n     */\n    addEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n        options?: AddListenerOptions\n    )\n    {\n        const capture = (typeof options === 'boolean' && options)\n            || (typeof options === 'object' && options.capture);\n        const context = typeof listener === 'function' ? undefined : listener;\n\n        type = capture ? `${type}capture` : type;\n        listener = typeof listener === 'function' ? listener : listener.handleEvent;\n\n        (this as unknown as utils.EventEmitter).on(type, listener, context);\n    },\n\n    /**\n     * Unlike `off` or `removeListener` which are methods from EventEmitter, `removeEventListener`\n     * seeks to be compatible with the DOM's `removeEventListener` with support for options.\n     * **IMPORTANT:** _Only_ available if using the `@pixi/events` package.\n     * @memberof PIXI.DisplayObject\n     * @param type - The type of event the listener is bound to.\n     * @param listener - The listener callback or object.\n     * @param options - The original listener options. This is required to deregister a capture phase listener.\n     */\n    removeEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n        options?: RemoveListenerOptions\n    )\n    {\n        const capture = (typeof options === 'boolean' && options)\n            || (typeof options === 'object' && options.capture);\n        const context = typeof listener === 'function' ? undefined : listener;\n\n        type = capture ? `${type}capture` : type;\n        listener = typeof listener === 'function' ? listener : listener.handleEvent;\n\n        (this as unknown as utils.EventEmitter).off(type, listener, context);\n    },\n\n    /**\n     * Dispatch the event on this {@link PIXI.DisplayObject} using the event's {@link PIXI.EventBoundary}.\n     *\n     * The target of the event is set to `this` and the `defaultPrevented` flag is cleared before dispatch.\n     *\n     * **IMPORTANT:** _Only_ available if using the `@pixi/events` package.\n     * @memberof PIXI.DisplayObject\n     * @param e - The event to dispatch.\n     * @returns Whether the {@link PIXI.FederatedEvent.preventDefault preventDefault}() method was not invoked.\n     * @example\n     * // Reuse a click event!\n     * button.dispatchEvent(clickEvent);\n     */\n    dispatchEvent(e: Event): boolean\n    {\n        if (!(e instanceof FederatedEvent))\n        {\n            throw new Error('DisplayObject cannot propagate events outside of the Federated Events API');\n        }\n\n        e.defaultPrevented = false;\n        e.path = null;\n        e.target = this as unknown as FederatedEventTarget;\n        e.manager.dispatchEvent(e);\n\n        return !e.defaultPrevented;\n    }\n};\n\nDisplayObject.mixin(FederatedDisplayObject);\n", "import type { DisplayObject } from '@pixi/display';\n\nexport type PointerEvents = 'auto'\n| 'none'\n| 'visiblePainted'\n| 'visibleFill'\n| 'visibleStroke'\n| 'visible'\n| 'painted'\n| 'fill'\n| 'stroke'\n| 'all'\n| 'inherit';\n\nexport interface IAccessibleTarget\n{\n    accessible: boolean;\n    accessibleTitle: string;\n    accessibleHint: string;\n    tabIndex: number;\n    _accessibleActive: boolean;\n    _accessibleDiv: IAccessibleHTMLElement;\n    accessibleType: string;\n    accessiblePointerEvents: PointerEvents;\n    accessibleChildren: boolean;\n    renderId: number;\n}\n\nexport interface IAccessibleHTMLElement extends HTMLElement\n{\n    type?: string;\n    displayObject?: DisplayObject;\n}\n\n/**\n * Default property values of accessible objects\n * used by {@link PIXI.AccessibilityManager}.\n * @private\n * @function accessibleTarget\n * @memberof PIXI\n * @type {object}\n * @example\n * import { accessibleTarget } from 'pixi.js';\n *\n * function MyObject() {}\n * Object.assign(MyObject.prototype, accessibleTarget);\n */\nexport const accessibleTarget: IAccessibleTarget = {\n    /**\n     *  Flag for if the object is accessible. If true AccessibilityManager will overlay a\n     *   shadow div with attributes set\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     */\n    accessible: false,\n\n    /**\n     * Sets the title attribute of the shadow div\n     * If accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'\n     * @member {?string}\n     * @memberof PIXI.DisplayObject#\n     */\n    accessibleTitle: null,\n\n    /**\n     * Sets the aria-label attribute of the shadow div\n     * @member {string}\n     * @memberof PIXI.DisplayObject#\n     */\n    accessibleHint: null,\n\n    /**\n     * @member {number}\n     * @memberof PIXI.DisplayObject#\n     * @private\n     * @todo Needs docs.\n     */\n    tabIndex: 0,\n\n    /**\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     * @todo Needs docs.\n     */\n    _accessibleActive: false,\n\n    /**\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     * @todo Needs docs.\n     */\n    _accessibleDiv: null,\n\n    /**\n     * Specify the type of div the accessible layer is. Screen readers treat the element differently\n     * depending on this type. Defaults to button.\n     * @member {string}\n     * @memberof PIXI.DisplayObject#\n     * @default 'button'\n     */\n    accessibleType: 'button',\n\n    /**\n     * Specify the pointer-events the accessible div will use\n     * Defaults to auto.\n     * @member {string}\n     * @memberof PIXI.DisplayObject#\n     * @default 'auto'\n     */\n    accessiblePointerEvents: 'auto',\n\n    /**\n     * Setting to false will prevent any children inside this container to\n     * be accessible. Defaults to true.\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     * @default true\n     */\n    accessibleChildren: true,\n\n    renderId: -1,\n};\n", "import { extensions, ExtensionType, utils } from '@pixi/core';\nimport { DisplayObject } from '@pixi/display';\nimport { FederatedEvent } from '@pixi/events';\nimport { accessibleTarget } from './accessibleTarget';\n\nimport type { ExtensionMetadata, IRenderer, Rectangle } from '@pixi/core';\nimport type { Container } from '@pixi/display';\nimport type { IAccessibleHTMLElement } from './accessibleTarget';\n\n// add some extra variables to the container..\nDisplayObject.mixin(accessibleTarget);\n\nconst KEY_CODE_TAB = 9;\n\nconst DIV_TOUCH_SIZE = 100;\nconst DIV_TOUCH_POS_X = 0;\nconst DIV_TOUCH_POS_Y = 0;\nconst DIV_TOUCH_ZINDEX = 2;\n\nconst DIV_HOOK_SIZE = 1;\nconst DIV_HOOK_POS_X = -1000;\nconst DIV_HOOK_POS_Y = -1000;\nconst DIV_HOOK_ZINDEX = 2;\n\n/**\n * The Accessibility manager recreates the ability to tab and have content read by screen readers.\n * This is very important as it can possibly help people with disabilities access PixiJS content.\n *\n * A DisplayObject can be made accessible just like it can be made interactive. This manager will map the\n * events as if the mouse was being used, minimizing the effort required to implement.\n *\n * An instance of this class is automatically created by default, and can be found at `renderer.plugins.accessibility`\n * @class\n * @memberof PIXI\n */\nexport class AccessibilityManager\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        name: 'accessibility',\n        type: [\n            ExtensionType.RendererPlugin,\n            ExtensionType.CanvasRendererPlugin,\n        ],\n    };\n\n    /** Setting this to true will visually show the divs. */\n    public debug = false;\n\n    /**\n     * The renderer this accessibility manager works for.\n     * @type {PIXI.CanvasRenderer|PIXI.Renderer}\n     */\n    public renderer: IRenderer;\n\n    /** Internal variable, see isActive getter. */\n    private _isActive = false;\n\n    /** Internal variable, see isMobileAccessibility getter. */\n    private _isMobileAccessibility = false;\n\n    /** Button element for handling touch hooks. */\n    private _hookDiv: HTMLElement;\n\n    /** This is the dom element that will sit over the PixiJS element. This is where the div overlays will go. */\n    private div: HTMLElement;\n\n    /** A simple pool for storing divs. */\n    private pool: IAccessibleHTMLElement[] = [];\n\n    /** This is a tick used to check if an object is no longer being rendered. */\n    private renderId = 0;\n\n    /** The array of currently active accessible items. */\n    private children: DisplayObject[] = [];\n\n    /** Count to throttle div updates on android devices. */\n    private androidUpdateCount = 0;\n\n    /**  The frequency to update the div elements. */\n    private androidUpdateFrequency = 500; // 2fps\n\n    /**\n     * @param {PIXI.CanvasRenderer|PIXI.Renderer} renderer - A reference to the current renderer\n     */\n    constructor(renderer: IRenderer)\n    {\n        this._hookDiv = null;\n\n        if (utils.isMobile.tablet || utils.isMobile.phone)\n        {\n            this.createTouchHook();\n        }\n\n        // first we create a div that will sit over the PixiJS element. This is where the div overlays will go.\n        const div = document.createElement('div');\n\n        div.style.width = `${DIV_TOUCH_SIZE}px`;\n        div.style.height = `${DIV_TOUCH_SIZE}px`;\n        div.style.position = 'absolute';\n        div.style.top = `${DIV_TOUCH_POS_X}px`;\n        div.style.left = `${DIV_TOUCH_POS_Y}px`;\n        div.style.zIndex = DIV_TOUCH_ZINDEX.toString();\n\n        this.div = div;\n        this.renderer = renderer;\n\n        /**\n         * pre-bind the functions\n         * @type {Function}\n         * @private\n         */\n        this._onKeyDown = this._onKeyDown.bind(this);\n\n        /**\n         * pre-bind the functions\n         * @type {Function}\n         * @private\n         */\n        this._onMouseMove = this._onMouseMove.bind(this);\n\n        // let listen for tab.. once pressed we can fire up and show the accessibility layer\n        globalThis.addEventListener('keydown', this._onKeyDown, false);\n    }\n\n    /**\n     * Value of `true` if accessibility is currently active and accessibility layers are showing.\n     * @member {boolean}\n     * @readonly\n     */\n    get isActive(): boolean\n    {\n        return this._isActive;\n    }\n\n    /**\n     * Value of `true` if accessibility is enabled for touch devices.\n     * @member {boolean}\n     * @readonly\n     */\n    get isMobileAccessibility(): boolean\n    {\n        return this._isMobileAccessibility;\n    }\n\n    /**\n     * Creates the touch hooks.\n     * @private\n     */\n    private createTouchHook(): void\n    {\n        const hookDiv = document.createElement('button');\n\n        hookDiv.style.width = `${DIV_HOOK_SIZE}px`;\n        hookDiv.style.height = `${DIV_HOOK_SIZE}px`;\n        hookDiv.style.position = 'absolute';\n        hookDiv.style.top = `${DIV_HOOK_POS_X}px`;\n        hookDiv.style.left = `${DIV_HOOK_POS_Y}px`;\n        hookDiv.style.zIndex = DIV_HOOK_ZINDEX.toString();\n        hookDiv.style.backgroundColor = '#FF0000';\n        hookDiv.title = 'select to enable accessibility for this content';\n\n        hookDiv.addEventListener('focus', () =>\n        {\n            this._isMobileAccessibility = true;\n            this.activate();\n            this.destroyTouchHook();\n        });\n\n        document.body.appendChild(hookDiv);\n        this._hookDiv = hookDiv;\n    }\n\n    /**\n     * Destroys the touch hooks.\n     * @private\n     */\n    private destroyTouchHook(): void\n    {\n        if (!this._hookDiv)\n        {\n            return;\n        }\n        document.body.removeChild(this._hookDiv);\n        this._hookDiv = null;\n    }\n\n    /**\n     * Activating will cause the Accessibility layer to be shown.\n     * This is called when a user presses the tab key.\n     * @private\n     */\n    private activate(): void\n    {\n        if (this._isActive)\n        {\n            return;\n        }\n\n        this._isActive = true;\n\n        globalThis.document.addEventListener('mousemove', this._onMouseMove, true);\n        globalThis.removeEventListener('keydown', this._onKeyDown, false);\n\n        this.renderer.on('postrender', this.update, this);\n        this.renderer.view.parentNode?.appendChild(this.div);\n    }\n\n    /**\n     * Deactivating will cause the Accessibility layer to be hidden.\n     * This is called when a user moves the mouse.\n     * @private\n     */\n    private deactivate(): void\n    {\n        if (!this._isActive || this._isMobileAccessibility)\n        {\n            return;\n        }\n\n        this._isActive = false;\n\n        globalThis.document.removeEventListener('mousemove', this._onMouseMove, true);\n        globalThis.addEventListener('keydown', this._onKeyDown, false);\n\n        this.renderer.off('postrender', this.update);\n        this.div.parentNode?.removeChild(this.div);\n    }\n\n    /**\n     * This recursive function will run through the scene graph and add any new accessible objects to the DOM layer.\n     * @private\n     * @param {PIXI.Container} displayObject - The DisplayObject to check.\n     */\n    private updateAccessibleObjects(displayObject: Container): void\n    {\n        if (!displayObject.visible || !displayObject.accessibleChildren)\n        {\n            return;\n        }\n\n        if (displayObject.accessible && displayObject.isInteractive())\n        {\n            if (!displayObject._accessibleActive)\n            {\n                this.addChild(displayObject);\n            }\n\n            displayObject.renderId = this.renderId;\n        }\n\n        const children = displayObject.children;\n\n        if (children)\n        {\n            for (let i = 0; i < children.length; i++)\n            {\n                this.updateAccessibleObjects(children[i] as Container);\n            }\n        }\n    }\n\n    /**\n     * Before each render this function will ensure that all divs are mapped correctly to their DisplayObjects.\n     * @private\n     */\n    private update(): void\n    {\n        /* On Android default web browser, tab order seems to be calculated by position rather than tabIndex,\n        *  moving buttons can cause focus to flicker between two buttons making it hard/impossible to navigate,\n        *  so I am just running update every half a second, seems to fix it.\n        */\n        const now = performance.now();\n\n        if (utils.isMobile.android.device && now < this.androidUpdateCount)\n        {\n            return;\n        }\n\n        this.androidUpdateCount = now + this.androidUpdateFrequency;\n\n        if (!this.renderer.renderingToScreen)\n        {\n            return;\n        }\n\n        // update children...\n        if (this.renderer.lastObjectRendered)\n        {\n            this.updateAccessibleObjects(this.renderer.lastObjectRendered as Container);\n        }\n\n        const { x, y, width, height } = this.renderer.view.getBoundingClientRect();\n        const { width: viewWidth, height: viewHeight, resolution } = this.renderer;\n\n        const sx = (width / viewWidth) * resolution;\n        const sy = (height / viewHeight) * resolution;\n\n        let div = this.div;\n\n        div.style.left = `${x}px`;\n        div.style.top = `${y}px`;\n        div.style.width = `${viewWidth}px`;\n        div.style.height = `${viewHeight}px`;\n\n        for (let i = 0; i < this.children.length; i++)\n        {\n            const child = this.children[i];\n\n            if (child.renderId !== this.renderId)\n            {\n                child._accessibleActive = false;\n\n                utils.removeItems(this.children, i, 1);\n                this.div.removeChild(child._accessibleDiv);\n                this.pool.push(child._accessibleDiv);\n                child._accessibleDiv = null;\n\n                i--;\n            }\n            else\n            {\n                // map div to display..\n                div = child._accessibleDiv;\n                let hitArea = child.hitArea as Rectangle;\n                const wt = child.worldTransform;\n\n                if (child.hitArea)\n                {\n                    div.style.left = `${(wt.tx + (hitArea.x * wt.a)) * sx}px`;\n                    div.style.top = `${(wt.ty + (hitArea.y * wt.d)) * sy}px`;\n\n                    div.style.width = `${hitArea.width * wt.a * sx}px`;\n                    div.style.height = `${hitArea.height * wt.d * sy}px`;\n                }\n                else\n                {\n                    hitArea = child.getBounds();\n\n                    this.capHitArea(hitArea);\n\n                    div.style.left = `${hitArea.x * sx}px`;\n                    div.style.top = `${hitArea.y * sy}px`;\n\n                    div.style.width = `${hitArea.width * sx}px`;\n                    div.style.height = `${hitArea.height * sy}px`;\n\n                    // update button titles and hints if they exist and they've changed\n                    if (div.title !== child.accessibleTitle && child.accessibleTitle !== null)\n                    {\n                        div.title = child.accessibleTitle;\n                    }\n                    if (div.getAttribute('aria-label') !== child.accessibleHint\n                        && child.accessibleHint !== null)\n                    {\n                        div.setAttribute('aria-label', child.accessibleHint);\n                    }\n                }\n\n                // the title or index may have changed, if so lets update it!\n                if (child.accessibleTitle !== div.title || child.tabIndex !== div.tabIndex)\n                {\n                    div.title = child.accessibleTitle;\n                    div.tabIndex = child.tabIndex;\n                    if (this.debug) this.updateDebugHTML(div);\n                }\n            }\n        }\n\n        // increment the render id..\n        this.renderId++;\n    }\n\n    /**\n     * private function that will visually add the information to the\n     * accessability div\n     * @param {HTMLElement} div -\n     */\n    public updateDebugHTML(div: IAccessibleHTMLElement): void\n    {\n        div.innerHTML = `type: ${div.type}</br> title : ${div.title}</br> tabIndex: ${div.tabIndex}`;\n    }\n\n    /**\n     * Adjust the hit area based on the bounds of a display object\n     * @param {PIXI.Rectangle} hitArea - Bounds of the child\n     */\n    public capHitArea(hitArea: Rectangle): void\n    {\n        if (hitArea.x < 0)\n        {\n            hitArea.width += hitArea.x;\n            hitArea.x = 0;\n        }\n\n        if (hitArea.y < 0)\n        {\n            hitArea.height += hitArea.y;\n            hitArea.y = 0;\n        }\n\n        const { width: viewWidth, height: viewHeight } = this.renderer;\n\n        if (hitArea.x + hitArea.width > viewWidth)\n        {\n            hitArea.width = viewWidth - hitArea.x;\n        }\n\n        if (hitArea.y + hitArea.height > viewHeight)\n        {\n            hitArea.height = viewHeight - hitArea.y;\n        }\n    }\n\n    /**\n     * Adds a DisplayObject to the accessibility manager\n     * @private\n     * @param {PIXI.DisplayObject} displayObject - The child to make accessible.\n     */\n    private addChild<T extends DisplayObject>(displayObject: T): void\n    {\n        //    this.activate();\n\n        let div = this.pool.pop();\n\n        if (!div)\n        {\n            div = document.createElement('button');\n\n            div.style.width = `${DIV_TOUCH_SIZE}px`;\n            div.style.height = `${DIV_TOUCH_SIZE}px`;\n            div.style.backgroundColor = this.debug ? 'rgba(255,255,255,0.5)' : 'transparent';\n            div.style.position = 'absolute';\n            div.style.zIndex = DIV_TOUCH_ZINDEX.toString();\n            div.style.borderStyle = 'none';\n\n            // ARIA attributes ensure that button title and hint updates are announced properly\n            if (navigator.userAgent.toLowerCase().includes('chrome'))\n            {\n                // Chrome doesn't need aria-live to work as intended; in fact it just gets more confused.\n                div.setAttribute('aria-live', 'off');\n            }\n            else\n            {\n                div.setAttribute('aria-live', 'polite');\n            }\n\n            if (navigator.userAgent.match(/rv:.*Gecko\\//))\n            {\n                // FireFox needs this to announce only the new button name\n                div.setAttribute('aria-relevant', 'additions');\n            }\n            else\n            {\n                // required by IE, other browsers don't much care\n                div.setAttribute('aria-relevant', 'text');\n            }\n\n            div.addEventListener('click', this._onClick.bind(this));\n            div.addEventListener('focus', this._onFocus.bind(this));\n            div.addEventListener('focusout', this._onFocusOut.bind(this));\n        }\n\n        // set pointer events\n        div.style.pointerEvents = displayObject.accessiblePointerEvents;\n        // set the type, this defaults to button!\n        div.type = displayObject.accessibleType;\n\n        if (displayObject.accessibleTitle && displayObject.accessibleTitle !== null)\n        {\n            div.title = displayObject.accessibleTitle;\n        }\n        else if (!displayObject.accessibleHint\n                 || displayObject.accessibleHint === null)\n        {\n            div.title = `displayObject ${displayObject.tabIndex}`;\n        }\n\n        if (displayObject.accessibleHint\n            && displayObject.accessibleHint !== null)\n        {\n            div.setAttribute('aria-label', displayObject.accessibleHint);\n        }\n\n        if (this.debug) this.updateDebugHTML(div);\n\n        displayObject._accessibleActive = true;\n        displayObject._accessibleDiv = div;\n        div.displayObject = displayObject;\n\n        this.children.push(displayObject);\n        this.div.appendChild(displayObject._accessibleDiv);\n        displayObject._accessibleDiv.tabIndex = displayObject.tabIndex;\n    }\n\n    /**\n     * Dispatch events with the EventSystem.\n     * @param e\n     * @param type\n     * @private\n     */\n    private _dispatchEvent(e: UIEvent, type: string[]): void\n    {\n        const { displayObject: target } = e.target as IAccessibleHTMLElement;\n        const boundry = this.renderer.events.rootBoundary;\n        const event: FederatedEvent = Object.assign(new FederatedEvent(boundry), { target });\n\n        boundry.rootTarget = this.renderer.lastObjectRendered as DisplayObject;\n        type.forEach((type) => boundry.dispatchEvent(event, type));\n    }\n\n    /**\n     * Maps the div button press to pixi's EventSystem (click)\n     * @private\n     * @param {MouseEvent} e - The click event.\n     */\n    private _onClick(e: MouseEvent): void\n    {\n        this._dispatchEvent(e, ['click', 'pointertap', 'tap']);\n    }\n\n    /**\n     * Maps the div focus events to pixi's EventSystem (mouseover)\n     * @private\n     * @param {FocusEvent} e - The focus event.\n     */\n    private _onFocus(e: FocusEvent): void\n    {\n        if (!(e.target as Element).getAttribute('aria-live'))\n        {\n            (e.target as Element).setAttribute('aria-live', 'assertive');\n        }\n\n        this._dispatchEvent(e, ['mouseover']);\n    }\n\n    /**\n     * Maps the div focus events to pixi's EventSystem (mouseout)\n     * @private\n     * @param {FocusEvent} e - The focusout event.\n     */\n    private _onFocusOut(e: FocusEvent): void\n    {\n        if (!(e.target as Element).getAttribute('aria-live'))\n        {\n            (e.target as Element).setAttribute('aria-live', 'polite');\n        }\n\n        this._dispatchEvent(e, ['mouseout']);\n    }\n\n    /**\n     * Is called when a key is pressed\n     * @private\n     * @param {KeyboardEvent} e - The keydown event.\n     */\n    private _onKeyDown(e: KeyboardEvent): void\n    {\n        if (e.keyCode !== KEY_CODE_TAB)\n        {\n            return;\n        }\n\n        this.activate();\n    }\n\n    /**\n     * Is called when the mouse moves across the renderer element\n     * @private\n     * @param {MouseEvent} e - The mouse event.\n     */\n    private _onMouseMove(e: MouseEvent): void\n    {\n        if (e.movementX === 0 && e.movementY === 0)\n        {\n            return;\n        }\n\n        this.deactivate();\n    }\n\n    /** Destroys the accessibility manager */\n    public destroy(): void\n    {\n        this.destroyTouchHook();\n        this.div = null;\n\n        globalThis.document.removeEventListener('mousemove', this._onMouseMove, true);\n        globalThis.removeEventListener('keydown', this._onKeyDown);\n\n        this.pool = null;\n        this.children = null;\n        this.renderer = null;\n    }\n}\n\nextensions.add(AccessibilityManager);\n", "import { autoDetectRenderer, extensions, ExtensionType } from '@pixi/core';\nimport { Container } from '@pixi/display';\n\nimport type { ICanvas, IRenderer, IRendererOptionsAuto, Rectangle } from '@pixi/core';\nimport type { IDestroyOptions } from '@pixi/display';\n\n/**\n * Any plugin that's usable for Application should contain these methods.\n * @memberof PIXI\n */\nexport interface IApplicationPlugin\n{\n    /**\n     * Called when Application is constructed, scoped to Application instance.\n     * Passes in `options` as the only argument, which are Application constructor options.\n     * @param {object} options - Application options.\n     */\n    init(options: Partial<IApplicationOptions>): void;\n    /** Called when destroying Application, scoped to Application instance. */\n    destroy(): void;\n}\n\n/**\n * Application options supplied to constructor.\n * @memberof PIXI\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface IApplicationOptions extends IRendererOptionsAuto, GlobalMixins.IApplicationOptions {}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface Application extends GlobalMixins.Application {}\n\n/**\n * Convenience class to create a new PixiJS application.\n *\n * This class automatically creates the renderer, ticker and root container.\n * @example\n * import { Application, Sprite } from 'pixi.js';\n *\n * // Create the application\n * const app = new Application();\n *\n * // Add the view to the DOM\n * document.body.appendChild(app.view);\n *\n * // ex, add display objects\n * app.stage.addChild(Sprite.from('something.png'));\n * @class\n * @memberof PIXI\n */\nexport class Application<VIEW extends ICanvas = ICanvas>\n{\n    /** Collection of installed plugins. */\n    static _plugins: IApplicationPlugin[] = [];\n\n    /**\n     * The root display container that's rendered.\n     * @member {PIXI.Container}\n     */\n    public stage: Container = new Container();\n\n    /**\n     * WebGL renderer if available, otherwise CanvasRenderer.\n     * @member {PIXI.Renderer|PIXI.CanvasRenderer}\n     */\n    public renderer: IRenderer<VIEW>;\n\n    /**\n     * @param options - The optional application and renderer parameters.\n     */\n    constructor(options?: Partial<IApplicationOptions>)\n    {\n        // The default options\n        options = Object.assign({\n            forceCanvas: false,\n        }, options);\n\n        this.renderer = autoDetectRenderer<VIEW>(options);\n\n        // install plugins here\n        Application._plugins.forEach((plugin) =>\n        {\n            plugin.init.call(this, options);\n        });\n    }\n\n    /** Render the current stage. */\n    public render(): void\n    {\n        this.renderer.render(this.stage);\n    }\n\n    /**\n     * Reference to the renderer's canvas element.\n     * @member {PIXI.ICanvas}\n     * @readonly\n     */\n    get view(): VIEW\n    {\n        return this.renderer.view;\n    }\n\n    /**\n     * Reference to the renderer's screen rectangle. Its safe to use as `filterArea` or `hitArea` for the whole screen.\n     * @member {PIXI.Rectangle}\n     * @readonly\n     */\n    get screen(): Rectangle\n    {\n        return this.renderer.screen;\n    }\n\n    /**\n     * Destroy and don't use after this.\n     * @param {boolean} [removeView=false] - Automatically remove canvas from DOM.\n     * @param {object|boolean} [stageOptions] - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [stageOptions.children=false] - if set to true, all the children will have their destroy\n     *  method called as well. 'stageOptions' will be passed on to those calls.\n     * @param {boolean} [stageOptions.texture=false] - Only used for child Sprites if stageOptions.children is set\n     *  to true. Should it destroy the texture of the child sprite\n     * @param {boolean} [stageOptions.baseTexture=false] - Only used for child Sprites if stageOptions.children is set\n     *  to true. Should it destroy the base texture of the child sprite\n     */\n    public destroy(removeView?: boolean, stageOptions?: IDestroyOptions | boolean): void\n    {\n        // Destroy plugins in the opposite order\n        // which they were constructed\n        const plugins = Application._plugins.slice(0);\n\n        plugins.reverse();\n        plugins.forEach((plugin) =>\n        {\n            plugin.destroy.call(this);\n        });\n\n        this.stage.destroy(stageOptions);\n        this.stage = null;\n\n        this.renderer.destroy(removeView);\n        this.renderer = null;\n    }\n}\n\nextensions.handleByList(ExtensionType.Application, Application._plugins);\n", "import { extensions, ExtensionType } from '@pixi/core';\n\nimport type { ExtensionMetadata, Renderer } from '@pixi/core';\n\ntype ResizeableRenderer = Pick<Renderer, 'resize'>;\n\nexport interface ResizePluginOptions\n{\n    /**\n     * Element to automatically resize stage to.\n     * @memberof PIXI.IApplicationOptions\n     */\n    resizeTo?: Window | HTMLElement;\n}\n\n/**\n * Middleware for for Application's resize functionality\n * @private\n * @class\n */\nexport class ResizePlugin\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = ExtensionType.Application;\n\n    public static resizeTo: Window | HTMLElement;\n    public static resize: () => void;\n    public static renderer: ResizeableRenderer;\n    public static queueResize: () => void;\n    public static render: () => void;\n    private static _resizeId: number;\n    private static _resizeTo: Window | HTMLElement;\n    private static cancelResize: () => void;\n\n    /**\n     * Initialize the plugin with scope of application instance\n     * @static\n     * @private\n     * @param {object} [options] - See application options\n     */\n    static init(options: ResizePluginOptions): void\n    {\n        Object.defineProperty(this, 'resizeTo',\n            /**\n             * The HTML element or window to automatically resize the\n             * renderer's view element to match width and height.\n             * @member {Window|HTMLElement}\n             * @name resizeTo\n             * @memberof PIXI.Application#\n             */\n            {\n                set(dom: Window | HTMLElement)\n                {\n                    globalThis.removeEventListener('resize', this.queueResize);\n                    this._resizeTo = dom;\n                    if (dom)\n                    {\n                        globalThis.addEventListener('resize', this.queueResize);\n                        this.resize();\n                    }\n                },\n                get()\n                {\n                    return this._resizeTo;\n                },\n            });\n\n        /**\n         * Resize is throttled, so it's safe to call this multiple times per frame and it'll\n         * only be called once.\n         * @memberof PIXI.Application#\n         * @method queueResize\n         * @private\n         */\n        this.queueResize = (): void =>\n        {\n            if (!this._resizeTo)\n            {\n                return;\n            }\n\n            this.cancelResize();\n\n            // // Throttle resize events per raf\n            this._resizeId = requestAnimationFrame(() => this.resize());\n        };\n\n        /**\n         * Cancel the resize queue.\n         * @memberof PIXI.Application#\n         * @method cancelResize\n         * @private\n         */\n        this.cancelResize = (): void =>\n        {\n            if (this._resizeId)\n            {\n                cancelAnimationFrame(this._resizeId);\n                this._resizeId = null;\n            }\n        };\n\n        /**\n         * Execute an immediate resize on the renderer, this is not\n         * throttled and can be expensive to call many times in a row.\n         * Will resize only if `resizeTo` property is set.\n         * @memberof PIXI.Application#\n         * @method resize\n         */\n        this.resize = (): void =>\n        {\n            if (!this._resizeTo)\n            {\n                return;\n            }\n\n            // clear queue resize\n            this.cancelResize();\n\n            let width: number;\n            let height: number;\n\n            // Resize to the window\n            if (this._resizeTo === globalThis.window)\n            {\n                width = globalThis.innerWidth;\n                height = globalThis.innerHeight;\n            }\n            // Resize to other HTML entities\n            else\n            {\n                const { clientWidth, clientHeight } = this._resizeTo as HTMLElement;\n\n                width = clientWidth;\n                height = clientHeight;\n            }\n\n            this.renderer.resize(width, height);\n            this.render();\n        };\n\n        // On resize\n        this._resizeId = null;\n        this._resizeTo = null;\n        this.resizeTo = options.resizeTo || null;\n    }\n\n    /**\n     * Clean up the ticker, scoped to application\n     * @static\n     * @private\n     */\n    static destroy(): void\n    {\n        globalThis.removeEventListener('resize', this.queueResize);\n        this.cancelResize();\n        this.cancelResize = null;\n        this.queueResize = null;\n        this.resizeTo = null;\n        this.resize = null;\n    }\n}\n\nextensions.add(ResizePlugin);\n", "/**\n * WebGL internal formats, including compressed texture formats provided by extensions\n * @memberof PIXI\n * @static\n * @name INTERNAL_FORMATS\n * @enum {number}\n */\nexport enum INTERNAL_FORMATS\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    // WEBGL_compressed_texture_s3tc\n    /**\n     * @default 0x83F0\n     */\n    COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0,\n    /**\n     * @default 0x83F1\n     */\n    COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1,\n    /**\n     * @default 0x83F2\n     */\n    COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2,\n    /**\n     * @default 0x83F3\n     */\n    COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3,\n\n    // WEBGL_compressed_texture_s3tc_srgb\n    /**\n     * @default 35917\n     */\n    COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = 35917,\n    /**\n     * @default 35918\n     */\n    COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = 35918,\n    /**\n     * @default 35919\n     */\n    COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = 35919,\n    /**\n     * @default 35916\n     */\n    COMPRESSED_SRGB_S3TC_DXT1_EXT = 35916,\n\n    // WEBGL_compressed_texture_etc\n    /**\n     * @default 0x9270\n     */\n    COMPRESSED_R11_EAC = 0x9270,\n    /**\n     * @default 0x9271\n     */\n    COMPRESSED_SIGNED_R11_EAC = 0x9271,\n    /**\n     * @default 0x9272\n     */\n    COMPRESSED_RG11_EAC = 0x9272,\n    /**\n     * @default 0x9273\n     */\n    COMPRESSED_SIGNED_RG11_EAC = 0x9273,\n    /**\n     * @default 0x9274\n     */\n    COMPRESSED_RGB8_ETC2 = 0x9274,\n    /**\n     * @default 0x9278\n     */\n    COMPRESSED_RGBA8_ETC2_EAC = 0x9278,\n    /**\n     * @default 0x9275\n     */\n    COMPRESSED_SRGB8_ETC2 = 0x9275,\n    /**\n     * @default 0x9279\n     */\n    COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 0x9279,\n    /**\n     * @default 0x9276\n     */\n    COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276,\n    /**\n     * @default 0x9277\n     */\n    COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277,\n\n    // WEBGL_compressed_texture_pvrtc\n    /**\n     * @default 0x8C00\n     */\n    COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 0x8C00,\n    /**\n     * @default 0x8C02\n     */\n    COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 0x8C02,\n    /**\n     * @default 0x8C01\n     */\n    COMPRESSED_RGB_PVRTC_2BPPV1_IMG = 0x8C01,\n    /**\n     * @default 0x8C03\n     */\n    COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = 0x8C03,\n\n    // WEBGL_compressed_texture_etc1\n    /**\n     * @default 0x8D64\n     */\n    COMPRESSED_RGB_ETC1_WEBGL = 0x8D64,\n\n    // WEBGL_compressed_texture_atc\n    /**\n     * @default 0x8C92\n     */\n    COMPRESSED_RGB_ATC_WEBGL = 0x8C92,\n    /**\n     * @default 0x8C92\n     */\n    COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL = 0x8C92, // TODO: Probably a bug on the MDN site\n    /**\n     * @default 0x87EE\n     */\n    COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL = 0x87EE,\n\n    // WEBGL_compressed_texture_astc\n    /* eslint-disable-next-line camelcase */\n    /**\n     * @default 0x93B0\n     */\n    COMPRESSED_RGBA_ASTC_4x4_KHR = 0x93B0,\n}\n\n/**\n * Maps the compressed texture formats in {@link PIXI.INTERNAL_FORMATS} to the number of bytes taken by\n * each texel.\n * @memberof PIXI\n * @static\n * @ignore\n */\nexport const INTERNAL_FORMAT_TO_BYTES_PER_PIXEL: { [id: number]: number } = {\n    // WEBGL_compressed_texture_s3tc\n    [INTERNAL_FORMATS.COMPRESSED_RGB_S3TC_DXT1_EXT]: 0.5,\n    [INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT1_EXT]: 0.5,\n    [INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT3_EXT]: 1,\n    [INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT5_EXT]: 1,\n\n    // WEBGL_compressed_texture_s3tc\n    [INTERNAL_FORMATS.COMPRESSED_SRGB_S3TC_DXT1_EXT]: 0.5,\n    [INTERNAL_FORMATS.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT]: 0.5,\n    [INTERNAL_FORMATS.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT]: 1,\n    [INTERNAL_FORMATS.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT]: 1,\n\n    // WEBGL_compressed_texture_etc\n    [INTERNAL_FORMATS.COMPRESSED_R11_EAC]: 0.5,\n    [INTERNAL_FORMATS.COMPRESSED_SIGNED_R11_EAC]: 0.5,\n    [INTERNAL_FORMATS.COMPRESSED_RG11_EAC]: 1,\n    [INTERNAL_FORMATS.COMPRESSED_SIGNED_RG11_EAC]: 1,\n    [INTERNAL_FORMATS.COMPRESSED_RGB8_ETC2]: 0.5,\n    [INTERNAL_FORMATS.COMPRESSED_RGBA8_ETC2_EAC]: 1,\n    [INTERNAL_FORMATS.COMPRESSED_SRGB8_ETC2]: 0.5,\n    [INTERNAL_FORMATS.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC]: 1,\n    [INTERNAL_FORMATS.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2]: 0.5, // ~~\n    [INTERNAL_FORMATS.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2]: 0.5, // ~~\n\n    // WEBGL_compressed_texture_pvrtc\n    [INTERNAL_FORMATS.COMPRESSED_RGB_PVRTC_4BPPV1_IMG]: 0.5,\n    [INTERNAL_FORMATS.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG]: 0.5,\n    [INTERNAL_FORMATS.COMPRESSED_RGB_PVRTC_2BPPV1_IMG]: 0.25,\n    [INTERNAL_FORMATS.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG]: 0.25,\n\n    // WEBGL_compressed_texture_etc1\n    [INTERNAL_FORMATS.COMPRESSED_RGB_ETC1_WEBGL]: 0.5,\n\n    // @see https://www.khronos.org/registry/OpenGL/extensions/AMD/AMD_compressed_ATC_texture.txt\n    // WEBGL_compressed_texture_atc\n    [INTERNAL_FORMATS.COMPRESSED_RGB_ATC_WEBGL]: 0.5,\n    [INTERNAL_FORMATS.COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL]: 1,\n    [INTERNAL_FORMATS.COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL]: 1,\n\n    // @see https://registry.khronos.org/OpenGL/extensions/KHR/KHR_texture_compression_astc_hdr.txt\n    // WEBGL_compressed_texture_astc\n    /* eslint-disable-next-line camelcase */\n    [INTERNAL_FORMATS.COMPRESSED_RGBA_ASTC_4x4_KHR]: 1,\n};\n", "import { extensions as ext, ExtensionType, settings } from '@pixi/core';\n\nimport type { FormatDetectionParser } from '@pixi/assets';\nimport type { CompressedTextureExtensionRef, CompressedTextureExtensions } from './compressedTextureExtensions';\n\nlet storedGl: WebGLRenderingContext;\nlet extensions: Partial<CompressedTextureExtensions>;\n\nfunction getCompressedTextureExtensions()\n{\n    extensions = {\n        s3tc: storedGl.getExtension('WEBGL_compressed_texture_s3tc'),\n        s3tc_sRGB: storedGl.getExtension('WEBGL_compressed_texture_s3tc_srgb'), /* eslint-disable-line camelcase */\n        etc: storedGl.getExtension('WEBGL_compressed_texture_etc'),\n        etc1: storedGl.getExtension('WEBGL_compressed_texture_etc1'),\n        pvrtc: storedGl.getExtension('WEBGL_compressed_texture_pvrtc')\n            || storedGl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc'),\n        atc: storedGl.getExtension('WEBGL_compressed_texture_atc'),\n        astc: storedGl.getExtension('WEBGL_compressed_texture_astc')\n    } as Partial<CompressedTextureExtensions>;\n}\n\nexport const detectCompressedTextures = {\n    extension: {\n        type: ExtensionType.DetectionParser,\n        priority: 2,\n    },\n    test: async (): Promise<boolean> =>\n    {\n        // Auto-detect WebGL compressed-texture extensions\n        const canvas = settings.ADAPTER.createCanvas();\n        const gl = canvas.getContext('webgl');\n\n        if (!gl)\n        {\n            // #if _DEBUG\n            console.warn('WebGL not available for compressed textures.');\n            // #endif\n\n            return false;\n        }\n\n        storedGl = gl;\n\n        return true;\n    },\n    add: async (formats: string[]): Promise<string[]> =>\n    {\n        if (!extensions) getCompressedTextureExtensions();\n\n        const textureFormats = [];\n\n        // Assign all available compressed-texture formats\n        for (const extensionName in extensions)\n        {\n            const extension = extensions[extensionName as CompressedTextureExtensionRef];\n\n            if (!extension)\n            {\n                continue;\n            }\n\n            textureFormats.push(extensionName);\n        }\n\n        return [...textureFormats, ...formats];\n    },\n    remove: async (formats: string[]): Promise<string[]> =>\n    {\n        if (!extensions) getCompressedTextureExtensions();\n\n        return formats.filter((f) => !(f in extensions));\n    },\n} as FormatDetectionParser;\n\next.add(detectCompressedTextures);\n", "import { BufferResource, ViewableBuffer } from '@pixi/core';\n\ninterface IBlobOptions\n{\n    autoLoad?: boolean;\n    width: number;\n    height: number;\n}\n\n/**\n * Resource that fetches texture data over the network and stores it in a buffer.\n * @class\n * @extends PIXI.Resource\n * @memberof PIXI\n */\nexport abstract class BlobResource extends BufferResource\n{\n    protected origin: string | null;\n    protected buffer: ViewableBuffer | null;\n    protected loaded: boolean;\n\n    /**\n     * Promise when loading.\n     * @default null\n     */\n    private _load: Promise<this>;\n\n    /**\n     * @param source - the buffer/URL of the texture file\n     * @param {PIXI.IBlobOptions} options\n     * @param {boolean}[options.autoLoad] - whether to fetch the data immediately;\n     *  you can fetch it later via {@link PIXI.BlobResource#load}\n     * @param {boolean}[options.width] - the width in pixels.\n     * @param {boolean}[options.height] - the height in pixels.\n     */\n    constructor(source: string | Uint8Array | Uint32Array | Float32Array | null,\n        options: IBlobOptions = { width: 1, height: 1, autoLoad: true })\n    {\n        let origin: string | null;\n        let data: Uint8Array | Uint32Array | Float32Array;\n\n        if (typeof source === 'string')\n        {\n            origin = source;\n            data = new Uint8Array();\n        }\n        else\n        {\n            origin = null;\n            data = source;\n        }\n\n        super(data, options);\n\n        /**\n         * The URL of the texture file\n         * @type {string|null}\n         */\n        this.origin = origin;\n\n        /**\n         * The viewable buffer on the data\n         * @type {ViewableBuffer|null}\n         */\n        // HINT: BlobResource allows \"null\" sources, assuming the child class provides an alternative\n        this.buffer = data ? new ViewableBuffer(data) : null;\n\n        this._load = null;\n        this.loaded = false;\n\n        // Allow autoLoad = \"undefined\" still load the resource by default\n        if (this.origin !== null && options.autoLoad !== false)\n        {\n            this.load();\n        }\n        if (this.origin === null && this.buffer)\n        {\n            this._load = Promise.resolve(this);\n            this.loaded = true;\n            this.onBlobLoaded(this.buffer.rawBinaryData);\n        }\n    }\n\n    protected onBlobLoaded(_data: ArrayBuffer): void\n    {\n        // TODO: Override this method\n    }\n\n    /** Loads the blob */\n    load(): Promise<this>\n    {\n        if (this._load)\n        {\n            return this._load;\n        }\n\n        this._load = fetch(this.origin)\n            .then((response) => response.blob())\n            .then((blob) => blob.arrayBuffer())\n            .then((arrayBuffer) =>\n            {\n                this.data = new Uint32Array(arrayBuffer);\n                this.buffer = new ViewableBuffer(arrayBuffer);\n                this.loaded = true;\n\n                this.onBlobLoaded(arrayBuffer);\n                this.update();\n\n                return this;\n            });\n\n        return this._load;\n    }\n}\n", "import { INTERNAL_FORMAT_TO_BYTES_PER_PIXEL } from '../const';\nimport { BlobResource } from './BlobResource';\n\nimport type { BaseTexture, GLTexture, Renderer } from '@pixi/core';\nimport type { INTERNAL_FORMATS } from '../const';\n\n/**\n * Used in parseKTX\n * @ignore\n */\nexport type CompressedLevelBuffer = {\n    levelID: number,\n    levelWidth: number,\n    levelHeight: number,\n    levelBuffer: Uint8Array\n};\n\n/**\n * @ignore\n */\nexport interface ICompressedTextureResourceOptions\n{\n    format: INTERNAL_FORMATS;\n    width: number;\n    height: number;\n    levels?: number;\n    levelBuffers?: CompressedLevelBuffer[];\n}\n\n/**\n * Resource for compressed texture formats, as follows: S3TC/DXTn (& their sRGB formats), ATC, ASTC, ETC 1/2, PVRTC.\n *\n * Compressed textures improve performance when rendering is texture-bound. The texture data stays compressed in\n * graphics memory, increasing memory locality and speeding up texture fetches. These formats can also be used to store\n * more detail in the same amount of memory.\n *\n * For most developers, container file formats are a better abstraction instead of directly handling raw texture\n * data. PixiJS provides native support for the following texture file formats\n * (via {@link PIXI.loadBasis}, {@link PIXI.loadKTX}, and {@link PIXI.loadDDS}):\n *\n * **.dds** - the DirectDraw Surface file format stores DXTn (DXT-1,3,5) data. See {@link PIXI.parseDDS}\n * **.ktx** - the Khronos Texture Container file format supports storing all the supported WebGL compression formats.\n *  See {@link PIXI.parseKTX}.\n * **.basis** - the BASIS supercompressed file format stores texture data in an internal format that is transcoded\n *  to the compression format supported on the device at _runtime_. It also supports transcoding into a uncompressed\n *  format as a fallback; you must install the `@pixi/basis-loader`, `@pixi/basis-transcoder` packages separately to\n *  use these files. See {@link PIXI.BasisParser}.\n *\n * The loaders for the aforementioned formats use `CompressedTextureResource` internally. It is strongly suggested that\n * they be used instead.\n *\n * ## Working directly with CompressedTextureResource\n *\n * Since `CompressedTextureResource` inherits `BlobResource`, you can provide it a URL pointing to a file containing\n * the raw texture data (with no file headers!):\n * @example\n * import { CompressedTextureResource, INTERNAL_FORMATS } from '@pixi/compressed-textures';\n * import { BaseTexture, Texture, ALPHA_MODES } from 'pixi.js';\n *\n * // The resource backing the texture data for your textures.\n * // NOTE: You can also provide a ArrayBufferView instead of a URL. This is used when loading data from a container file\n * //   format such as KTX, DDS, or BASIS.\n * const compressedResource = new CompressedTextureResource('bunny.dxt5', {\n *     format: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT5_EXT,\n *     width: 256,\n *     height: 256,\n * });\n *\n * // You can create a base-texture to the cache, so that future `Texture`s can be created using the `Texture.from` API.\n * const baseTexture = new BaseTexture(compressedResource, { pmaMode: ALPHA_MODES.NPM });\n *\n * // Create a Texture to add to the TextureCache\n * const texture = new Texture(baseTexture);\n *\n * // Add baseTexture & texture to the global texture cache\n * BaseTexture.addToCache(baseTexture, 'bunny.dxt5');\n * Texture.addToCache(texture, 'bunny.dxt5');\n * @memberof PIXI\n */\nexport class CompressedTextureResource extends BlobResource\n{\n    /** The compression format */\n    public format: INTERNAL_FORMATS;\n    /**\n     * The number of mipmap levels stored in the resource buffer.\n     * @default 1\n     */\n    public levels: number;\n\n    // Easy access to the WebGL extension providing support for the compression format via ContextSystem\n    private _extension: 's3tc' | 's3tc_sRGB' | 'atc' | 'astc' | 'etc' | 'etc1' | 'pvrtc';\n    // Buffer views for each mipmap level in the main buffer\n    private _levelBuffers: CompressedLevelBuffer[];\n\n    /**\n     * @param source - the buffer/URL holding the compressed texture data\n     * @param options\n     * @param {PIXI.INTERNAL_FORMATS} options.format - the compression format\n     * @param {number} options.width - the image width in pixels.\n     * @param {number} options.height - the image height in pixels.\n     * @param {number} [options.level=1] - the mipmap levels stored in the compressed texture, including level 0.\n     * @param {number} [options.levelBuffers] - the buffers for each mipmap level. `CompressedTextureResource` can allows you\n     *      to pass `null` for `source`, for cases where each level is stored in non-contiguous memory.\n     */\n    constructor(source: string | Uint8Array | Uint32Array, options: ICompressedTextureResourceOptions)\n    {\n        super(source, options);\n\n        this.format = options.format;\n        this.levels = options.levels || 1;\n\n        this._width = options.width;\n        this._height = options.height;\n\n        this._extension = CompressedTextureResource._formatToExtension(this.format);\n\n        if (options.levelBuffers || this.buffer)\n        {\n            // ViewableBuffer doesn't support byteOffset :-( so allow source to be Uint8Array\n            this._levelBuffers = options.levelBuffers\n                || CompressedTextureResource._createLevelBuffers(\n                    source instanceof Uint8Array ? source : this.buffer.uint8View,\n                    this.format,\n                    this.levels,\n                    4, 4, // PVRTC has 8x4 blocks in 2bpp mode\n                    this.width,\n                    this.height);\n        }\n    }\n\n    /**\n     * @override\n     * @param renderer - A reference to the current renderer\n     * @param _texture - the texture\n     * @param _glTexture - texture instance for this webgl context\n     */\n    upload(renderer: Renderer, _texture: BaseTexture, _glTexture: GLTexture): boolean\n    {\n        const gl = renderer.gl;\n        const extension = renderer.context.extensions[this._extension];\n\n        if (!extension)\n        {\n            throw new Error(`${this._extension} textures are not supported on the current machine`);\n        }\n        if (!this._levelBuffers)\n        {\n            // Do not try to upload data before BlobResource loads, unless the levelBuffers were provided directly!\n            return false;\n        }\n\n        for (let i = 0, j = this.levels; i < j; i++)\n        {\n            const { levelID, levelWidth, levelHeight, levelBuffer } = this._levelBuffers[i];\n\n            gl.compressedTexImage2D(gl.TEXTURE_2D, levelID, this.format, levelWidth, levelHeight, 0, levelBuffer);\n        }\n\n        return true;\n    }\n\n    /** @protected */\n    protected onBlobLoaded(): void\n    {\n        this._levelBuffers = CompressedTextureResource._createLevelBuffers(\n            this.buffer.uint8View,\n            this.format,\n            this.levels,\n            4, 4, // PVRTC has 8x4 blocks in 2bpp mode\n            this.width,\n            this.height);\n    }\n\n    /**\n     * Returns the key (to ContextSystem#extensions) for the WebGL extension supporting the compression format\n     * @private\n     * @param format - the compression format to get the extension for.\n     */\n    private static _formatToExtension(format: INTERNAL_FORMATS):\n    's3tc' | 's3tc_sRGB' | 'atc' |\n    'astc' | 'etc' | 'etc1' | 'pvrtc'\n    {\n        if (format >= 0x83F0 && format <= 0x83F3)\n        {\n            return 's3tc';\n        }\n        else if (format >= 0x9270 && format <= 0x9279)\n        {\n            return 'etc';\n        }\n        else if (format >= 0x8C00 && format <= 0x8C03)\n        {\n            return 'pvrtc';\n        }\n        else if (format >= 0x8D64)\n        {\n            return 'etc1';\n        }\n        else if (format >= 0x8C92 && format <= 0x87EE)\n        {\n            return 'atc';\n        }\n\n        throw new Error('Invalid (compressed) texture format given!');\n    }\n\n    /**\n     * Pre-creates buffer views for each mipmap level\n     * @private\n     * @param buffer -\n     * @param format - compression formats\n     * @param levels - mipmap levels\n     * @param blockWidth -\n     * @param blockHeight -\n     * @param imageWidth - width of the image in pixels\n     * @param imageHeight - height of the image in pixels\n     */\n    private static _createLevelBuffers(\n        buffer: Uint8Array,\n        format: INTERNAL_FORMATS,\n        levels: number,\n        blockWidth: number,\n        blockHeight: number,\n        imageWidth: number,\n        imageHeight: number\n    ): CompressedLevelBuffer[]\n    {\n        // The byte-size of the first level buffer\n        const buffers = new Array<CompressedLevelBuffer>(levels);\n\n        let offset = buffer.byteOffset;\n\n        let levelWidth = imageWidth;\n        let levelHeight = imageHeight;\n        let alignedLevelWidth = (levelWidth + blockWidth - 1) & ~(blockWidth - 1);\n        let alignedLevelHeight = (levelHeight + blockHeight - 1) & ~(blockHeight - 1);\n\n        let levelSize = alignedLevelWidth * alignedLevelHeight * INTERNAL_FORMAT_TO_BYTES_PER_PIXEL[format];\n\n        for (let i = 0; i < levels; i++)\n        {\n            buffers[i] = {\n                levelID: i,\n                levelWidth: levels > 1 ? levelWidth : alignedLevelWidth,\n                levelHeight: levels > 1 ? levelHeight : alignedLevelHeight,\n                levelBuffer: new Uint8Array(buffer.buffer, offset, levelSize)\n            };\n\n            offset += levelSize;\n\n            // Calculate levelBuffer dimensions for next iteration\n            levelWidth = (levelWidth >> 1) || 1;\n            levelHeight = (levelHeight >> 1) || 1;\n            alignedLevelWidth = (levelWidth + blockWidth - 1) & ~(blockWidth - 1);\n            alignedLevelHeight = (levelHeight + blockHeight - 1) & ~(blockHeight - 1);\n            levelSize = alignedLevelWidth * alignedLevelHeight * INTERNAL_FORMAT_TO_BYTES_PER_PIXEL[format];\n        }\n\n        return buffers;\n    }\n}\n", "import { INTERNAL_FORMAT_TO_BYTES_PER_PIXEL, INTERNAL_FORMATS } from '../const';\nimport { CompressedTextureResource } from '../resources';\n\nconst DDS_MAGIC_SIZE = 4;\nconst DDS_HEADER_SIZE = 124;\nconst DDS_HEADER_PF_SIZE = 32;\nconst DDS_HEADER_DX10_SIZE = 20;\n\n// DDS file format magic word\nconst DDS_MAGIC = 0x20534444;\n\n/**\n * DWORD offsets of the DDS file header fields (relative to file start).\n * @ignore\n */\nconst DDS_FIELDS = {\n    SIZE: 1,\n    FLAGS: 2,\n    HEIGHT: 3,\n    WIDTH: 4,\n    MIPMAP_COUNT: 7,\n    PIXEL_FORMAT: 19,\n};\n\n/**\n * DWORD offsets of the DDS PIXEL_FORMAT fields.\n * @ignore\n */\nconst DDS_PF_FIELDS = {\n    SIZE: 0,\n    FLAGS: 1,\n    FOURCC: 2,\n    RGB_BITCOUNT: 3,\n    R_BIT_MASK: 4,\n    G_BIT_MASK: 5,\n    B_BIT_MASK: 6,\n    A_BIT_MASK: 7\n};\n\n/**\n * DWORD offsets of the DDS_HEADER_DX10 fields.\n * @ignore\n */\nconst DDS_DX10_FIELDS = {\n    DXGI_FORMAT: 0,\n    RESOURCE_DIMENSION: 1,\n    MISC_FLAG: 2,\n    ARRAY_SIZE: 3,\n    MISC_FLAGS2: 4\n};\n\n/**\n * @see https://docs.microsoft.com/en-us/windows/win32/api/dxgiformat/ne-dxgiformat-dxgi_format\n * This is way over-blown for us! Lend us a hand, and remove the ones that aren't used (but set the remaining\n * ones to their correct value)\n * @ignore\n */\nenum DXGI_FORMAT\n    {\n    DXGI_FORMAT_UNKNOWN,\n    DXGI_FORMAT_R32G32B32A32_TYPELESS,\n    DXGI_FORMAT_R32G32B32A32_FLOAT,\n    DXGI_FORMAT_R32G32B32A32_UINT,\n    DXGI_FORMAT_R32G32B32A32_SINT,\n    DXGI_FORMAT_R32G32B32_TYPELESS,\n    DXGI_FORMAT_R32G32B32_FLOAT,\n    DXGI_FORMAT_R32G32B32_UINT,\n    DXGI_FORMAT_R32G32B32_SINT,\n    DXGI_FORMAT_R16G16B16A16_TYPELESS,\n    DXGI_FORMAT_R16G16B16A16_FLOAT,\n    DXGI_FORMAT_R16G16B16A16_UNORM,\n    DXGI_FORMAT_R16G16B16A16_UINT,\n    DXGI_FORMAT_R16G16B16A16_SNORM,\n    DXGI_FORMAT_R16G16B16A16_SINT,\n    DXGI_FORMAT_R32G32_TYPELESS,\n    DXGI_FORMAT_R32G32_FLOAT,\n    DXGI_FORMAT_R32G32_UINT,\n    DXGI_FORMAT_R32G32_SINT,\n    DXGI_FORMAT_R32G8X24_TYPELESS,\n    DXGI_FORMAT_D32_FLOAT_S8X24_UINT,\n    DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS,\n    DXGI_FORMAT_X32_TYPELESS_G8X24_UINT,\n    DXGI_FORMAT_R10G10B10A2_TYPELESS,\n    DXGI_FORMAT_R10G10B10A2_UNORM,\n    DXGI_FORMAT_R10G10B10A2_UINT,\n    DXGI_FORMAT_R11G11B10_FLOAT,\n    DXGI_FORMAT_R8G8B8A8_TYPELESS,\n    DXGI_FORMAT_R8G8B8A8_UNORM,\n    DXGI_FORMAT_R8G8B8A8_UNORM_SRGB,\n    DXGI_FORMAT_R8G8B8A8_UINT,\n    DXGI_FORMAT_R8G8B8A8_SNORM,\n    DXGI_FORMAT_R8G8B8A8_SINT,\n    DXGI_FORMAT_R16G16_TYPELESS,\n    DXGI_FORMAT_R16G16_FLOAT,\n    DXGI_FORMAT_R16G16_UNORM,\n    DXGI_FORMAT_R16G16_UINT,\n    DXGI_FORMAT_R16G16_SNORM,\n    DXGI_FORMAT_R16G16_SINT,\n    DXGI_FORMAT_R32_TYPELESS,\n    DXGI_FORMAT_D32_FLOAT,\n    DXGI_FORMAT_R32_FLOAT,\n    DXGI_FORMAT_R32_UINT,\n    DXGI_FORMAT_R32_SINT,\n    DXGI_FORMAT_R24G8_TYPELESS,\n    DXGI_FORMAT_D24_UNORM_S8_UINT,\n    DXGI_FORMAT_R24_UNORM_X8_TYPELESS,\n    DXGI_FORMAT_X24_TYPELESS_G8_UINT,\n    DXGI_FORMAT_R8G8_TYPELESS,\n    DXGI_FORMAT_R8G8_UNORM,\n    DXGI_FORMAT_R8G8_UINT,\n    DXGI_FORMAT_R8G8_SNORM,\n    DXGI_FORMAT_R8G8_SINT,\n    DXGI_FORMAT_R16_TYPELESS,\n    DXGI_FORMAT_R16_FLOAT,\n    DXGI_FORMAT_D16_UNORM,\n    DXGI_FORMAT_R16_UNORM,\n    DXGI_FORMAT_R16_UINT,\n    DXGI_FORMAT_R16_SNORM,\n    DXGI_FORMAT_R16_SINT,\n    DXGI_FORMAT_R8_TYPELESS,\n    DXGI_FORMAT_R8_UNORM,\n    DXGI_FORMAT_R8_UINT,\n    DXGI_FORMAT_R8_SNORM,\n    DXGI_FORMAT_R8_SINT,\n    DXGI_FORMAT_A8_UNORM,\n    DXGI_FORMAT_R1_UNORM,\n    DXGI_FORMAT_R9G9B9E5_SHAREDEXP,\n    DXGI_FORMAT_R8G8_B8G8_UNORM,\n    DXGI_FORMAT_G8R8_G8B8_UNORM,\n    DXGI_FORMAT_BC1_TYPELESS,\n    DXGI_FORMAT_BC1_UNORM,\n    DXGI_FORMAT_BC1_UNORM_SRGB,\n    DXGI_FORMAT_BC2_TYPELESS,\n    DXGI_FORMAT_BC2_UNORM,\n    DXGI_FORMAT_BC2_UNORM_SRGB,\n    DXGI_FORMAT_BC3_TYPELESS,\n    DXGI_FORMAT_BC3_UNORM,\n    DXGI_FORMAT_BC3_UNORM_SRGB,\n    DXGI_FORMAT_BC4_TYPELESS,\n    DXGI_FORMAT_BC4_UNORM,\n    DXGI_FORMAT_BC4_SNORM,\n    DXGI_FORMAT_BC5_TYPELESS,\n    DXGI_FORMAT_BC5_UNORM,\n    DXGI_FORMAT_BC5_SNORM,\n    DXGI_FORMAT_B5G6R5_UNORM,\n    DXGI_FORMAT_B5G5R5A1_UNORM,\n    DXGI_FORMAT_B8G8R8A8_UNORM,\n    DXGI_FORMAT_B8G8R8X8_UNORM,\n    DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM,\n    DXGI_FORMAT_B8G8R8A8_TYPELESS,\n    DXGI_FORMAT_B8G8R8A8_UNORM_SRGB,\n    DXGI_FORMAT_B8G8R8X8_TYPELESS,\n    DXGI_FORMAT_B8G8R8X8_UNORM_SRGB,\n    DXGI_FORMAT_BC6H_TYPELESS,\n    DXGI_FORMAT_BC6H_UF16,\n    DXGI_FORMAT_BC6H_SF16,\n    DXGI_FORMAT_BC7_TYPELESS,\n    DXGI_FORMAT_BC7_UNORM,\n    DXGI_FORMAT_BC7_UNORM_SRGB,\n    DXGI_FORMAT_AYUV,\n    DXGI_FORMAT_Y410,\n    DXGI_FORMAT_Y416,\n    DXGI_FORMAT_NV12,\n    DXGI_FORMAT_P010,\n    DXGI_FORMAT_P016,\n    DXGI_FORMAT_420_OPAQUE,\n    DXGI_FORMAT_YUY2,\n    DXGI_FORMAT_Y210,\n    DXGI_FORMAT_Y216,\n    DXGI_FORMAT_NV11,\n    DXGI_FORMAT_AI44,\n    DXGI_FORMAT_IA44,\n    DXGI_FORMAT_P8,\n    DXGI_FORMAT_A8P8,\n    DXGI_FORMAT_B4G4R4A4_UNORM,\n    DXGI_FORMAT_P208,\n    DXGI_FORMAT_V208,\n    DXGI_FORMAT_V408,\n    DXGI_FORMAT_SAMPLER_FEEDBACK_MIN_MIP_OPAQUE,\n    DXGI_FORMAT_SAMPLER_FEEDBACK_MIP_REGION_USED_OPAQUE,\n    DXGI_FORMAT_FORCE_UINT\n}\n\n/**\n * Possible values of the field {@link DDS_DX10_FIELDS.RESOURCE_DIMENSION}\n * @ignore\n */\nenum D3D10_RESOURCE_DIMENSION\n    {\n    DDS_DIMENSION_TEXTURE1D = 2,\n    DDS_DIMENSION_TEXTURE2D = 3,\n    DDS_DIMENSION_TEXTURE3D = 6\n}\n\nconst PF_FLAGS = 1;\n\n// PIXEL_FORMAT flags\nconst DDPF_ALPHA = 0x2;\nconst DDPF_FOURCC = 0x4;\nconst DDPF_RGB = 0x40;\nconst DDPF_YUV = 0x200;\nconst DDPF_LUMINANCE = 0x20000;\n\n// Four character codes for DXTn formats\nconst FOURCC_DXT1 = 0x31545844;\nconst FOURCC_DXT3 = 0x33545844;\nconst FOURCC_DXT5 = 0x35545844;\nconst FOURCC_DX10 = 0x30315844;\n\n// Cubemap texture flag (for DDS_DX10_FIELDS.MISC_FLAG)\nconst DDS_RESOURCE_MISC_TEXTURECUBE = 0x4;\n\n/**\n * Maps `FOURCC_*` formats to internal formats (see {@link PIXI.INTERNAL_FORMATS}).\n * @ignore\n */\nconst FOURCC_TO_FORMAT: { [id: number]: number } = {\n    [FOURCC_DXT1]: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT1_EXT,\n    [FOURCC_DXT3]: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT3_EXT,\n    [FOURCC_DXT5]: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT5_EXT\n};\n\n/**\n * Maps {@link DXGI_FORMAT} to types/internal-formats (see {@link PIXI.TYPES}, {@link PIXI.INTERNAL_FORMATS})\n * @ignore\n */\nconst DXGI_TO_FORMAT: { [id: number]: number } = {\n    // WEBGL_compressed_texture_s3tc\n    [DXGI_FORMAT.DXGI_FORMAT_BC1_TYPELESS]: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT1_EXT,\n    [DXGI_FORMAT.DXGI_FORMAT_BC1_UNORM]: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT1_EXT,\n    [DXGI_FORMAT.DXGI_FORMAT_BC2_TYPELESS]: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT3_EXT,\n    [DXGI_FORMAT.DXGI_FORMAT_BC2_UNORM]: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT3_EXT,\n    [DXGI_FORMAT.DXGI_FORMAT_BC3_TYPELESS]: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT5_EXT,\n    [DXGI_FORMAT.DXGI_FORMAT_BC3_UNORM]: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT5_EXT,\n\n    // WEBGL_compressed_texture_s3tc_srgb\n    [DXGI_FORMAT.DXGI_FORMAT_BC1_UNORM_SRGB]: INTERNAL_FORMATS.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT,\n    [DXGI_FORMAT.DXGI_FORMAT_BC2_UNORM_SRGB]: INTERNAL_FORMATS.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT,\n    [DXGI_FORMAT.DXGI_FORMAT_BC3_UNORM_SRGB]: INTERNAL_FORMATS.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT\n};\n\n/**\n * Parses the DDS file header, generates base-textures, and puts them into the texture cache.\n * @see https://docs.microsoft.com/en-us/windows/win32/direct3ddds/dx-graphics-dds-pguide\n * @param arrayBuffer\n * @memberof PIXI\n */\nexport function parseDDS(arrayBuffer: ArrayBuffer): CompressedTextureResource[]\n{\n    const data = new Uint32Array(arrayBuffer);\n    const magicWord = data[0];\n\n    if (magicWord !== DDS_MAGIC)\n    {\n        throw new Error('Invalid DDS file magic word');\n    }\n\n    const header = new Uint32Array(arrayBuffer, 0, DDS_HEADER_SIZE / Uint32Array.BYTES_PER_ELEMENT);\n\n    // DDS header fields\n    const height = header[DDS_FIELDS.HEIGHT];\n    const width = header[DDS_FIELDS.WIDTH];\n    const mipmapCount = header[DDS_FIELDS.MIPMAP_COUNT];\n\n    // PIXEL_FORMAT fields\n    const pixelFormat = new Uint32Array(\n        arrayBuffer,\n        DDS_FIELDS.PIXEL_FORMAT * Uint32Array.BYTES_PER_ELEMENT,\n        DDS_HEADER_PF_SIZE / Uint32Array.BYTES_PER_ELEMENT);\n    const formatFlags = pixelFormat[PF_FLAGS];\n\n    // File contains compressed texture(s)\n    if (formatFlags & DDPF_FOURCC)\n    {\n        const fourCC = pixelFormat[DDS_PF_FIELDS.FOURCC];\n\n        // File contains one DXTn compressed texture\n        if (fourCC !== FOURCC_DX10)\n        {\n            const internalFormat = FOURCC_TO_FORMAT[fourCC];\n\n            const dataOffset = DDS_MAGIC_SIZE + DDS_HEADER_SIZE;\n            const texData = new Uint8Array(arrayBuffer, dataOffset);\n\n            const resource = new CompressedTextureResource(texData, {\n                format: internalFormat,\n                width,\n                height,\n                levels: mipmapCount // CompressedTextureResource will separate the levelBuffers for us!\n            });\n\n            return [resource];\n        }\n\n        // FOURCC_DX10 indicates there is a 20-byte DDS_HEADER_DX10 after DDS_HEADER\n        const dx10Offset = DDS_MAGIC_SIZE + DDS_HEADER_SIZE;\n        const dx10Header = new Uint32Array(\n            data.buffer,\n            dx10Offset,\n            DDS_HEADER_DX10_SIZE / Uint32Array.BYTES_PER_ELEMENT);\n        const dxgiFormat = dx10Header[DDS_DX10_FIELDS.DXGI_FORMAT];\n        const resourceDimension = dx10Header[DDS_DX10_FIELDS.RESOURCE_DIMENSION];\n        const miscFlag = dx10Header[DDS_DX10_FIELDS.MISC_FLAG];\n        const arraySize = dx10Header[DDS_DX10_FIELDS.ARRAY_SIZE];\n\n        // Map dxgiFormat to PIXI.INTERNAL_FORMATS\n        const internalFormat = DXGI_TO_FORMAT[dxgiFormat];\n\n        if (internalFormat === undefined)\n        {\n            throw new Error(`DDSParser cannot parse texture data with DXGI format ${dxgiFormat}`);\n        }\n        if (miscFlag === DDS_RESOURCE_MISC_TEXTURECUBE)\n        {\n            // FIXME: Anybody excited about cubemap compressed textures?\n            throw new Error('DDSParser does not support cubemap textures');\n        }\n        if (resourceDimension === D3D10_RESOURCE_DIMENSION.DDS_DIMENSION_TEXTURE3D)\n        {\n            // FIXME: Anybody excited about 3D compressed textures?\n            throw new Error('DDSParser does not supported 3D texture data');\n        }\n\n        // Uint8Array buffers of image data, including all mipmap levels in each image\n        const imageBuffers = new Array<Uint8Array>();\n        const dataOffset = DDS_MAGIC_SIZE\n                + DDS_HEADER_SIZE\n                + DDS_HEADER_DX10_SIZE;\n\n        if (arraySize === 1)\n        {\n            // No need bothering with the imageSize calculation!\n            imageBuffers.push(new Uint8Array(arrayBuffer, dataOffset));\n        }\n        else\n        {\n            // Calculate imageSize for each texture, and then locate each image's texture data\n\n            const pixelSize = INTERNAL_FORMAT_TO_BYTES_PER_PIXEL[internalFormat];\n            let imageSize = 0;\n            let levelWidth = width;\n            let levelHeight = height;\n\n            for (let i = 0; i < mipmapCount; i++)\n            {\n                const alignedLevelWidth = Math.max(1, (levelWidth + 3) & ~3);\n                const alignedLevelHeight = Math.max(1, (levelHeight + 3) & ~3);\n\n                const levelSize = alignedLevelWidth * alignedLevelHeight * pixelSize;\n\n                imageSize += levelSize;\n\n                levelWidth = levelWidth >>> 1;\n                levelHeight = levelHeight >>> 1;\n            }\n\n            let imageOffset = dataOffset;\n\n            // NOTE: Cubemaps have 6-images per texture (but they aren't supported so ^_^)\n            for (let i = 0; i < arraySize; i++)\n            {\n                imageBuffers.push(new Uint8Array(arrayBuffer, imageOffset, imageSize));\n                imageOffset += imageSize;\n            }\n        }\n\n        // Uint8Array -> CompressedTextureResource, and we're done!\n        return imageBuffers.map((buffer) => new CompressedTextureResource(buffer, {\n            format: internalFormat,\n            width,\n            height,\n            levels: mipmapCount\n        }));\n    }\n    if (formatFlags & DDPF_RGB)\n    {\n        // FIXME: We might want to allow uncompressed *.dds files?\n        throw new Error('DDSParser does not support uncompressed texture data.');\n    }\n    if (formatFlags & DDPF_YUV)\n    {\n        // FIXME: Does anybody need this feature?\n        throw new Error('DDSParser does not supported YUV uncompressed texture data.');\n    }\n    if (formatFlags & DDPF_LUMINANCE)\n    {\n        // FIXME: Microsoft says older DDS filers use this feature! Probably not worth the effort!\n        throw new Error('DDSParser does not support single-channel (lumninance) texture data!');\n    }\n    if (formatFlags & DDPF_ALPHA)\n    {\n        // FIXME: I'm tired! See above =)\n        throw new Error('DDSParser does not support single-channel (alpha) texture data!');\n    }\n\n    throw new Error('DDSParser failed to load a texture file due to an unknown reason!');\n}\n\n", "import { BufferResource, FORMATS, TYPES } from '@pixi/core';\nimport { INTERNAL_FORMAT_TO_BYTES_PER_PIXEL } from '../const';\nimport { CompressedTextureResource } from '../resources';\n\nimport type { CompressedLevelBuffer } from '../resources';\n\n/**\n * The 12-byte KTX file identifier\n * @see https://www.khronos.org/opengles/sdk/tools/KTX/file_format_spec/#2.1\n * @ignore\n */\nconst FILE_IDENTIFIER = [0xAB, 0x4B, 0x54, 0x58, 0x20, 0x31, 0x31, 0xBB, 0x0D, 0x0A, 0x1A, 0x0A];\n\n/**\n * The value stored in the \"endianness\" field.\n * @see https://www.khronos.org/opengles/sdk/tools/KTX/file_format_spec/#2.2\n * @ignore\n */\nconst ENDIANNESS = 0x04030201;\n\n/**\n * Byte offsets of the KTX file header fields\n * @ignore\n */\nconst KTX_FIELDS = {\n    FILE_IDENTIFIER: 0,\n    ENDIANNESS: 12,\n    GL_TYPE: 16,\n    GL_TYPE_SIZE: 20,\n    GL_FORMAT: 24,\n    GL_INTERNAL_FORMAT: 28,\n    GL_BASE_INTERNAL_FORMAT: 32,\n    PIXEL_WIDTH: 36,\n    PIXEL_HEIGHT: 40,\n    PIXEL_DEPTH: 44,\n    NUMBER_OF_ARRAY_ELEMENTS: 48,\n    NUMBER_OF_FACES: 52,\n    NUMBER_OF_MIPMAP_LEVELS: 56,\n    BYTES_OF_KEY_VALUE_DATA: 60\n};\n\n/**\n * Byte size of the file header fields in {@code KTX_FIELDS}\n * @ignore\n */\nconst FILE_HEADER_SIZE = 64;\n\n/**\n * Maps {@link PIXI.TYPES} to the bytes taken per component, excluding those ones that are bit-fields.\n * @ignore\n */\nexport const TYPES_TO_BYTES_PER_COMPONENT: { [id: number]: number } = {\n    [TYPES.UNSIGNED_BYTE]: 1,\n    [TYPES.UNSIGNED_SHORT]: 2,\n    [TYPES.INT]: 4,\n    [TYPES.UNSIGNED_INT]: 4,\n    [TYPES.FLOAT]: 4,\n    [TYPES.HALF_FLOAT]: 8\n};\n\n/**\n * Number of components in each {@link PIXI.FORMATS}\n * @ignore\n */\nexport const FORMATS_TO_COMPONENTS: { [id: number]: number } = {\n    [FORMATS.RGBA]: 4,\n    [FORMATS.RGB]: 3,\n    [FORMATS.RG]: 2,\n    [FORMATS.RED]: 1,\n    [FORMATS.LUMINANCE]: 1,\n    [FORMATS.LUMINANCE_ALPHA]: 2,\n    [FORMATS.ALPHA]: 1\n};\n\n/**\n * Number of bytes per pixel in bit-field types in {@link PIXI.TYPES}\n * @ignore\n */\nexport const TYPES_TO_BYTES_PER_PIXEL: { [id: number]: number } = {\n    [TYPES.UNSIGNED_SHORT_4_4_4_4]: 2,\n    [TYPES.UNSIGNED_SHORT_5_5_5_1]: 2,\n    [TYPES.UNSIGNED_SHORT_5_6_5]: 2\n};\n\nexport function parseKTX(url: string, arrayBuffer: ArrayBuffer, loadKeyValueData = false): {\n    compressed?: CompressedTextureResource[]\n    uncompressed?: { resource: BufferResource, type: TYPES, format: FORMATS }[]\n    kvData: Map<string, DataView> | null\n}\n{\n    const dataView = new DataView(arrayBuffer);\n\n    if (!validate(url, dataView))\n    {\n        return null;\n    }\n\n    const littleEndian = dataView.getUint32(KTX_FIELDS.ENDIANNESS, true) === ENDIANNESS;\n    const glType = dataView.getUint32(KTX_FIELDS.GL_TYPE, littleEndian);\n    // const glTypeSize = dataView.getUint32(KTX_FIELDS.GL_TYPE_SIZE, littleEndian);\n    const glFormat = dataView.getUint32(KTX_FIELDS.GL_FORMAT, littleEndian);\n    const glInternalFormat = dataView.getUint32(KTX_FIELDS.GL_INTERNAL_FORMAT, littleEndian);\n    const pixelWidth = dataView.getUint32(KTX_FIELDS.PIXEL_WIDTH, littleEndian);\n    const pixelHeight = dataView.getUint32(KTX_FIELDS.PIXEL_HEIGHT, littleEndian) || 1;// \"pixelHeight = 0\" -> \"1\"\n    const pixelDepth = dataView.getUint32(KTX_FIELDS.PIXEL_DEPTH, littleEndian) || 1;// ^^\n    const numberOfArrayElements = dataView.getUint32(KTX_FIELDS.NUMBER_OF_ARRAY_ELEMENTS, littleEndian) || 1;// ^^\n    const numberOfFaces = dataView.getUint32(KTX_FIELDS.NUMBER_OF_FACES, littleEndian);\n    const numberOfMipmapLevels = dataView.getUint32(KTX_FIELDS.NUMBER_OF_MIPMAP_LEVELS, littleEndian);\n    const bytesOfKeyValueData = dataView.getUint32(KTX_FIELDS.BYTES_OF_KEY_VALUE_DATA, littleEndian);\n\n    // Whether the platform architecture is little endian. If littleEndian !== platformLittleEndian, then the\n    // file contents must be endian-converted!\n    // TODO: Endianness conversion\n    // const platformLittleEndian = new Uint8Array((new Uint32Array([ENDIANNESS])).buffer)[0] === 0x01;\n\n    if (pixelHeight === 0 || pixelDepth !== 1)\n    {\n        throw new Error('Only 2D textures are supported');\n    }\n    if (numberOfFaces !== 1)\n    {\n        throw new Error('CubeTextures are not supported by KTXLoader yet!');\n    }\n    if (numberOfArrayElements !== 1)\n    {\n        // TODO: Support splitting array-textures into multiple BaseTextures\n        throw new Error('WebGL does not support array textures');\n    }\n\n    // TODO: 8x4 blocks for 2bpp pvrtc\n    const blockWidth = 4;\n    const blockHeight = 4;\n\n    const alignedWidth = (pixelWidth + 3) & ~3;\n    const alignedHeight = (pixelHeight + 3) & ~3;\n    const imageBuffers = new Array<CompressedLevelBuffer[]>(numberOfArrayElements);\n    let imagePixels = pixelWidth * pixelHeight;\n\n    if (glType === 0)\n    {\n        // Align to 16 pixels (4x4 blocks)\n        imagePixels = alignedWidth * alignedHeight;\n    }\n\n    let imagePixelByteSize: number;\n\n    if (glType !== 0)\n    {\n        // Uncompressed texture format\n        if (TYPES_TO_BYTES_PER_COMPONENT[glType])\n        {\n            imagePixelByteSize = TYPES_TO_BYTES_PER_COMPONENT[glType] * FORMATS_TO_COMPONENTS[glFormat];\n        }\n        else\n        {\n            imagePixelByteSize = TYPES_TO_BYTES_PER_PIXEL[glType];\n        }\n    }\n    else\n    {\n        imagePixelByteSize = INTERNAL_FORMAT_TO_BYTES_PER_PIXEL[glInternalFormat];\n    }\n\n    if (imagePixelByteSize === undefined)\n    {\n        throw new Error('Unable to resolve the pixel format stored in the *.ktx file!');\n    }\n\n    const kvData: Map<string, DataView> | null = loadKeyValueData\n        ? parseKvData(dataView, bytesOfKeyValueData, littleEndian)\n        : null;\n\n    const imageByteSize = imagePixels * imagePixelByteSize;\n    let mipByteSize = imageByteSize;\n    let mipWidth = pixelWidth;\n    let mipHeight = pixelHeight;\n    let alignedMipWidth = alignedWidth;\n    let alignedMipHeight = alignedHeight;\n    let imageOffset = FILE_HEADER_SIZE + bytesOfKeyValueData;\n\n    for (let mipmapLevel = 0; mipmapLevel < numberOfMipmapLevels; mipmapLevel++)\n    {\n        const imageSize = dataView.getUint32(imageOffset, littleEndian);\n        let elementOffset = imageOffset + 4;\n\n        for (let arrayElement = 0; arrayElement < numberOfArrayElements; arrayElement++)\n        {\n            // TODO: Maybe support 3D textures? :-)\n            // for (let zSlice = 0; zSlice < pixelDepth; zSlice)\n\n            let mips = imageBuffers[arrayElement];\n\n            if (!mips)\n            {\n                mips = imageBuffers[arrayElement] = new Array(numberOfMipmapLevels);\n            }\n\n            mips[mipmapLevel] = {\n                levelID: mipmapLevel,\n\n                // don't align mipWidth when texture not compressed! (glType not zero)\n                levelWidth: numberOfMipmapLevels > 1 || glType !== 0 ? mipWidth : alignedMipWidth,\n                levelHeight: numberOfMipmapLevels > 1 || glType !== 0 ? mipHeight : alignedMipHeight,\n                levelBuffer: new Uint8Array(arrayBuffer, elementOffset, mipByteSize)\n            };\n            elementOffset += mipByteSize;\n        }\n\n        // HINT: Aligns to 4-byte boundary after jumping imageSize (in lieu of mipPadding)\n        imageOffset += imageSize + 4;// (+4 to jump the imageSize field itself)\n        imageOffset = imageOffset % 4 !== 0 ? imageOffset + 4 - (imageOffset % 4) : imageOffset;\n\n        // Calculate mipWidth, mipHeight for _next_ iteration\n        mipWidth = (mipWidth >> 1) || 1;\n        mipHeight = (mipHeight >> 1) || 1;\n        alignedMipWidth = (mipWidth + blockWidth - 1) & ~(blockWidth - 1);\n        alignedMipHeight = (mipHeight + blockHeight - 1) & ~(blockHeight - 1);\n\n        // Each mipmap level is 4-times smaller?\n        mipByteSize = alignedMipWidth * alignedMipHeight * imagePixelByteSize;\n    }\n\n    // We use the levelBuffers feature of CompressedTextureResource b/c texture data is image-major, not level-major.\n    if (glType !== 0)\n    {\n        return {\n            uncompressed: imageBuffers.map((levelBuffers) =>\n            {\n                let buffer: Float32Array | Uint32Array | Int32Array | Uint8Array = levelBuffers[0].levelBuffer;\n                let convertToInt = false;\n\n                if (glType === TYPES.FLOAT)\n                {\n                    buffer = new Float32Array(\n                        levelBuffers[0].levelBuffer.buffer,\n                        levelBuffers[0].levelBuffer.byteOffset,\n                        levelBuffers[0].levelBuffer.byteLength / 4);\n                }\n                else if (glType === TYPES.UNSIGNED_INT)\n                {\n                    convertToInt = true;\n                    buffer = new Uint32Array(\n                        levelBuffers[0].levelBuffer.buffer,\n                        levelBuffers[0].levelBuffer.byteOffset,\n                        levelBuffers[0].levelBuffer.byteLength / 4);\n                }\n                else if (glType === TYPES.INT)\n                {\n                    convertToInt = true;\n                    buffer = new Int32Array(\n                        levelBuffers[0].levelBuffer.buffer,\n                        levelBuffers[0].levelBuffer.byteOffset,\n                        levelBuffers[0].levelBuffer.byteLength / 4);\n                }\n\n                return {\n                    resource: new BufferResource(\n                        buffer,\n                        {\n                            width: levelBuffers[0].levelWidth,\n                            height: levelBuffers[0].levelHeight,\n                        }\n                    ),\n                    type: glType,\n                    format: convertToInt ? convertFormatToInteger(glFormat) : glFormat,\n                };\n            }),\n            kvData\n        };\n    }\n\n    return {\n        compressed: imageBuffers.map((levelBuffers) => new CompressedTextureResource(null, {\n            format: glInternalFormat,\n            width: pixelWidth,\n            height: pixelHeight,\n            levels: numberOfMipmapLevels,\n            levelBuffers,\n        })),\n        kvData\n    };\n}\n\n/**\n * Checks whether the arrayBuffer contains a valid *.ktx file.\n * @param url\n * @param dataView\n */\nfunction validate(url: string, dataView: DataView): boolean\n{\n    // NOTE: Do not optimize this into 3 32-bit integer comparison because the endianness\n    // of the data is not specified.\n    for (let i = 0; i < FILE_IDENTIFIER.length; i++)\n    {\n        if (dataView.getUint8(i) !== FILE_IDENTIFIER[i])\n        {\n            // #if _DEBUG\n            console.error(`${url} is not a valid *.ktx file!`);\n            // #endif\n\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction convertFormatToInteger(format: FORMATS)\n{\n    switch (format)\n    {\n        case FORMATS.RGBA: return FORMATS.RGBA_INTEGER;\n        case FORMATS.RGB: return FORMATS.RGB_INTEGER;\n        case FORMATS.RG: return FORMATS.RG_INTEGER;\n        case FORMATS.RED: return FORMATS.RED_INTEGER;\n        default: return format;\n    }\n}\n\nfunction parseKvData(dataView: DataView, bytesOfKeyValueData: number, littleEndian: boolean): Map<string, DataView>\n{\n    const kvData = new Map<string, DataView>();\n    let bytesIntoKeyValueData = 0;\n\n    while (bytesIntoKeyValueData < bytesOfKeyValueData)\n    {\n        const keyAndValueByteSize = dataView.getUint32(FILE_HEADER_SIZE + bytesIntoKeyValueData, littleEndian);\n        const keyAndValueByteOffset = FILE_HEADER_SIZE + bytesIntoKeyValueData + 4;\n        const valuePadding = 3 - ((keyAndValueByteSize + 3) % 4);\n\n        // Bounds check\n        if (keyAndValueByteSize === 0 || keyAndValueByteSize > bytesOfKeyValueData - bytesIntoKeyValueData)\n        {\n            console.error('KTXLoader: keyAndValueByteSize out of bounds');\n            break;\n        }\n\n        // Note: keyNulByte can't be 0 otherwise the key is an empty string.\n        let keyNulByte = 0;\n\n        for (; keyNulByte < keyAndValueByteSize; keyNulByte++)\n        {\n            if (dataView.getUint8(keyAndValueByteOffset + keyNulByte) === 0x00)\n            {\n                break;\n            }\n        }\n\n        if (keyNulByte === -1)\n        {\n            console.error('KTXLoader: Failed to find null byte terminating kvData key');\n            break;\n        }\n\n        const key = new TextDecoder().decode(\n            new Uint8Array(dataView.buffer, keyAndValueByteOffset, keyNulByte)\n        );\n        const value = new DataView(\n            dataView.buffer,\n            keyAndValueByteOffset + keyNulByte + 1,\n            keyAndValueByteSize - keyNulByte - 1,\n        );\n\n        kvData.set(key, value);\n\n        // 4 = the keyAndValueByteSize field itself\n        // keyAndValueByteSize = the bytes taken by the key and value\n        // valuePadding = extra padding to align with 4 bytes\n        bytesIntoKeyValueData += 4 + keyAndValueByteSize + valuePadding;\n    }\n\n    return kvData;\n}\n", "import { checkExtension, createTexture, LoaderParserPriority } from '@pixi/assets';\nimport { ALPHA_MODES, BaseTexture, extensions, ExtensionType, MIPMAP_MODES, settings, utils } from '@pixi/core';\nimport { parseDDS } from '../parsers';\n\nimport type { LoadAsset, Loader, LoaderParser } from '@pixi/assets';\nimport type { IBaseTextureOptions, Texture } from '@pixi/core';\n\n/** Load our DDS textures! */\nexport const loadDDS: LoaderParser = {\n    extension: {\n        type: ExtensionType.LoadParser,\n        priority: LoaderParserPriority.High,\n    },\n\n    name: 'loadDDS',\n\n    test(url: string): boolean\n    {\n        return checkExtension(url, '.dds');\n    },\n\n    async load(url: string, asset: LoadAsset, loader: Loader): Promise<Texture | Texture[]>\n    {\n        // get an array buffer...\n        const response = await settings.ADAPTER.fetch(url);\n\n        const arrayBuffer = await response.arrayBuffer();\n\n        const resources = parseDDS(arrayBuffer);\n\n        const textures = resources.map((resource) =>\n        {\n            const base = new BaseTexture(resource, {\n                mipmap: MIPMAP_MODES.OFF,\n                alphaMode: ALPHA_MODES.NO_PREMULTIPLIED_ALPHA,\n                resolution: utils.getResolutionOfUrl(url),\n                ...asset.data,\n            });\n\n            return createTexture(base, loader, url);\n        });\n\n        return textures.length === 1 ? textures[0] : textures;\n    },\n\n    unload(texture: Texture | Texture[]): void\n    {\n        if (Array.isArray(texture))\n        {\n            texture.forEach((t) => t.destroy(true));\n        }\n        else\n        {\n            texture.destroy(true);\n        }\n    }\n\n} as LoaderParser<Texture | Texture[], IBaseTextureOptions>;\n\nextensions.add(loadDDS);\n", "import { checkExtension, createTexture, LoaderParserPriority } from '@pixi/assets';\nimport { ALPHA_MODES, BaseTexture, extensions, ExtensionType, MIPMAP_MODES, settings, utils } from '@pixi/core';\nimport { parseKTX } from '../parsers';\n\nimport type { LoadAsset, Loader, LoaderParser } from '@pixi/assets';\nimport type { IBaseTextureOptions, Texture } from '@pixi/core';\n\n/** Loads KTX textures! */\nexport const loadKTX = {\n    extension: {\n        type: ExtensionType.LoadParser,\n        priority: LoaderParserPriority.High,\n    },\n\n    name: 'loadKTX',\n\n    test(url: string): boolean\n    {\n        return checkExtension(url, '.ktx');\n    },\n\n    async load(url: string, asset: LoadAsset, loader: Loader): Promise<Texture | Texture[]>\n    {\n        // get an array buffer...\n        const response = await settings.ADAPTER.fetch(url);\n\n        const arrayBuffer = await response.arrayBuffer();\n\n        const { compressed, uncompressed, kvData } = parseKTX(url, arrayBuffer);\n\n        const resources = compressed ?? uncompressed;\n\n        const options = {\n            mipmap: MIPMAP_MODES.OFF,\n            alphaMode: ALPHA_MODES.NO_PREMULTIPLIED_ALPHA,\n            resolution: utils.getResolutionOfUrl(url),\n            ...asset.data,\n        };\n\n        const textures = resources.map((resource) =>\n        {\n            if (resources === uncompressed)\n            {\n                Object.assign(options, {\n                    type: (resource as typeof uncompressed[0]).type,\n                    format: (resource as typeof uncompressed[0]).format,\n                });\n            }\n\n            const base = new BaseTexture(resource, options);\n\n            base.ktxKeyValueData = kvData;\n\n            return createTexture(base, loader, url);\n        });\n\n        return textures.length === 1 ? textures[0] : textures;\n    },\n\n    unload(texture: Texture | Texture[]): void\n    {\n        if (Array.isArray(texture))\n        {\n            texture.forEach((t) => t.destroy(true));\n        }\n        else\n        {\n            texture.destroy(true);\n        }\n    }\n\n} as LoaderParser<Texture | Texture[], IBaseTextureOptions>;\n\nextensions.add(loadKTX);\n", "import { extensions, ExtensionType, settings } from '@pixi/core';\n\nimport type { ResolveAsset, ResolveURLParser } from '@pixi/assets';\n\nexport const resolveCompressedTextureUrl = {\n    extension: ExtensionType.ResolveParser,\n    test: (value: string) =>\n    {\n        const temp = value.split('?')[0];\n        const extension = temp.split('.').pop();\n\n        return ['basis', 'ktx', 'dds'].includes(extension);\n    },\n    parse: (value: string): ResolveAsset =>\n    {\n        const temp = value.split('?')[0];\n        const extension = temp.split('.').pop();\n\n        if (extension === 'ktx')\n        {\n            const extensions = [\n                '.s3tc.ktx',\n                '.s3tc_sRGB.ktx',\n                '.etc.ktx',\n                '.etc1.ktx',\n                '.pvrt.ktx',\n                '.atc.ktx',\n                '.astc.ktx'\n            ];\n\n            // check if value ends with one of the extensions\n            if (extensions.some((ext) => value.endsWith(ext)))\n            {\n                return {\n                    resolution: parseFloat(settings.RETINA_PREFIX.exec(value)?.[1] ?? '1'),\n                    format: extensions.find((ext) => value.endsWith(ext)),\n                    src: value,\n                };\n            }\n        }\n\n        return {\n            resolution: parseFloat(settings.RETINA_PREFIX.exec(value)?.[1] ?? '1'),\n            format: value.split('.').pop(),\n            src: value,\n        };\n    },\n} as ResolveURLParser;\n\nextensions.add(resolveCompressedTextureUrl);\n", "import { extensions, ExtensionType, Rectangle, RenderTexture, utils } from '@pixi/core';\n\nimport type { ExtensionMetadata, ICanvas, ISystem, Renderer } from '@pixi/core';\nimport type { DisplayObject } from '@pixi/display';\n\nconst TEMP_RECT = new Rectangle();\nconst BYTES_PER_PIXEL = 4;\n\nexport interface IExtract\n{\n    image(target?: DisplayObject | RenderTexture, format?: string, quality?: number): Promise<HTMLImageElement>;\n    base64(target?: DisplayObject | RenderTexture, format?: string, quality?: number): Promise<string>;\n    canvas(target?: DisplayObject | RenderTexture, frame?: Rectangle): ICanvas;\n    pixels(target?: DisplayObject | RenderTexture, frame?: Rectangle): Uint8Array | Uint8ClampedArray;\n}\n\n/**\n * This class provides renderer-specific plugins for exporting content from a renderer.\n * For instance, these plugins can be used for saving an Image, Canvas element or for exporting the raw image data (pixels).\n *\n * Do not instantiate these plugins directly. It is available from the `renderer.extract` property.\n * @example\n * import { Application, Graphics } from 'pixi.js';\n *\n * // Create a new application (extract will be auto-added to renderer)\n * const app = new Application();\n *\n * // Draw a red circle\n * const graphics = new Graphics()\n *     .beginFill(0xFF0000)\n *     .drawCircle(0, 0, 50);\n *\n * // Render the graphics as an HTMLImageElement\n * const image = await app.renderer.extract.image(graphics);\n * document.body.appendChild(image);\n * @memberof PIXI\n */\n\nexport class Extract implements ISystem, IExtract\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        name: 'extract',\n        type: ExtensionType.RendererSystem,\n    };\n\n    private renderer: Renderer | null;\n\n    /**\n     * @param renderer - A reference to the current renderer\n     */\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n    }\n\n    /**\n     * Will return a HTML Image of the target\n     * @param target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @param format - Image format, e.g. \"image/jpeg\" or \"image/webp\".\n     * @param quality - JPEG or Webp compression from 0 to 1. Default is 0.92.\n     * @returns - HTML Image of the target\n     */\n    public async image(target?: DisplayObject | RenderTexture, format?: string, quality?: number): Promise<HTMLImageElement>\n    {\n        const image = new Image();\n\n        image.src = await this.base64(target, format, quality);\n\n        return image;\n    }\n\n    /**\n     * Will return a base64 encoded string of this target. It works by calling\n     *  `Extract.getCanvas` and then running toDataURL on that.\n     * @param target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @param format - Image format, e.g. \"image/jpeg\" or \"image/webp\".\n     * @param quality - JPEG or Webp compression from 0 to 1. Default is 0.92.\n     * @returns - A base64 encoded string of the texture.\n     */\n    public async base64(target?: DisplayObject | RenderTexture, format?: string, quality?: number): Promise<string>\n    {\n        const canvas = this.canvas(target);\n\n        if (canvas.toBlob !== undefined)\n        {\n            return new Promise<string>((resolve, reject) =>\n            {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                canvas.toBlob!((blob) =>\n                {\n                    if (!blob)\n                    {\n                        reject(new Error('ICanvas.toBlob failed!'));\n\n                        return;\n                    }\n\n                    const reader = new FileReader();\n\n                    reader.onload = () => resolve(reader.result as string);\n                    reader.onerror = reject;\n                    reader.readAsDataURL(blob);\n                }, format, quality);\n            });\n        }\n        if (canvas.toDataURL !== undefined)\n        {\n            return canvas.toDataURL(format, quality);\n        }\n        if (canvas.convertToBlob !== undefined)\n        {\n            const blob = await canvas.convertToBlob({ type: format, quality });\n\n            return new Promise<string>((resolve, reject) =>\n            {\n                const reader = new FileReader();\n\n                reader.onload = () => resolve(reader.result as string);\n                reader.onerror = reject;\n                reader.readAsDataURL(blob);\n            });\n        }\n\n        throw new Error('Extract.base64() requires ICanvas.toDataURL, ICanvas.toBlob, '\n            + 'or ICanvas.convertToBlob to be implemented');\n    }\n\n    /**\n     * Creates a Canvas element, renders this target to it and then returns it.\n     * @param target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @param frame - The frame the extraction is restricted to.\n     * @returns - A Canvas element with the texture rendered on.\n     */\n    public canvas(target?: DisplayObject | RenderTexture, frame?: Rectangle): ICanvas\n    {\n        const { pixels, width, height, flipY } = this._rawPixels(target, frame);\n\n        // Flipping pixels\n        if (flipY)\n        {\n            Extract._flipY(pixels, width, height);\n        }\n\n        Extract._unpremultiplyAlpha(pixels);\n\n        const canvasBuffer = new utils.CanvasRenderTarget(width, height, 1);\n\n        // Add the pixels to the canvas\n        const imageData = new ImageData(new Uint8ClampedArray(pixels.buffer), width, height);\n\n        canvasBuffer.context.putImageData(imageData, 0, 0);\n\n        // Send the canvas back\n        return canvasBuffer.canvas;\n    }\n\n    /**\n     * Will return a one-dimensional array containing the pixel data of the entire texture in RGBA\n     * order, with integer values between 0 and 255 (included).\n     * @param target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @param frame - The frame the extraction is restricted to.\n     * @returns - One-dimensional array containing the pixel data of the entire texture\n     */\n    public pixels(target?: DisplayObject | RenderTexture, frame?: Rectangle): Uint8Array\n    {\n        const { pixels, width, height, flipY } = this._rawPixels(target, frame);\n\n        if (flipY)\n        {\n            Extract._flipY(pixels, width, height);\n        }\n\n        Extract._unpremultiplyAlpha(pixels);\n\n        return pixels;\n    }\n\n    private _rawPixels(target?: DisplayObject | RenderTexture, frame?: Rectangle): {\n        pixels: Uint8Array, width: number, height: number, flipY: boolean,\n    }\n    {\n        const renderer = this.renderer;\n\n        if (!renderer)\n        {\n            throw new Error('The Extract has already been destroyed');\n        }\n\n        let resolution;\n        let flipY = false;\n        let renderTexture;\n        let generated = false;\n\n        if (target)\n        {\n            if (target instanceof RenderTexture)\n            {\n                renderTexture = target;\n            }\n            else\n            {\n                renderTexture = renderer.generateTexture(target, {\n                    resolution: renderer.resolution,\n                    multisample: renderer.multisample\n                });\n                generated = true;\n            }\n        }\n\n        if (renderTexture)\n        {\n            resolution = renderTexture.baseTexture.resolution;\n            frame = frame ?? renderTexture.frame;\n            flipY = false;\n\n            if (!generated)\n            {\n                renderer.renderTexture.bind(renderTexture);\n\n                const fbo = renderTexture.framebuffer.glFramebuffers[renderer.CONTEXT_UID];\n\n                if (fbo.blitFramebuffer)\n                {\n                    renderer.framebuffer.bind(fbo.blitFramebuffer);\n                }\n            }\n        }\n        else\n        {\n            resolution = renderer.resolution;\n\n            if (!frame)\n            {\n                frame = TEMP_RECT;\n                frame.width = renderer.width / resolution;\n                frame.height = renderer.height / resolution;\n            }\n\n            flipY = true;\n            renderer.renderTexture.bind();\n        }\n\n        const width = Math.round(frame.width * resolution);\n        const height = Math.round(frame.height * resolution);\n\n        const pixels = new Uint8Array(BYTES_PER_PIXEL * width * height);\n\n        // Read pixels to the array\n        const gl = renderer.gl;\n\n        gl.readPixels(\n            Math.round(frame.x * resolution),\n            Math.round(frame.y * resolution),\n            width,\n            height,\n            gl.RGBA,\n            gl.UNSIGNED_BYTE,\n            pixels\n        );\n\n        if (generated)\n        {\n            renderTexture?.destroy(true);\n        }\n\n        return { pixels, width, height, flipY };\n    }\n\n    /** Destroys the extract. */\n    public destroy(): void\n    {\n        this.renderer = null;\n    }\n\n    private static _flipY(pixels: Uint8Array | Uint8ClampedArray, width: number, height: number): void\n    {\n        const w = width << 2;\n        const h = height >> 1;\n        const temp = new Uint8Array(w);\n\n        for (let y = 0; y < h; y++)\n        {\n            const t = y * w;\n            const b = (height - y - 1) * w;\n\n            temp.set(pixels.subarray(t, t + w));\n            pixels.copyWithin(t, b, b + w);\n            pixels.set(temp, b);\n        }\n    }\n\n    private static _unpremultiplyAlpha(pixels: Uint8Array | Uint8ClampedArray): void\n    {\n        if (pixels instanceof Uint8ClampedArray)\n        {\n            pixels = new Uint8Array(pixels.buffer);\n        }\n\n        const n = pixels.length;\n\n        for (let i = 0; i < n; i += 4)\n        {\n            const alpha = pixels[i + 3];\n\n            if (alpha !== 0)\n            {\n                const a = 255.001 / alpha;\n\n                pixels[i] = (pixels[i] * a) + 0.5;\n                pixels[i + 1] = (pixels[i + 1] * a) + 0.5;\n                pixels[i + 2] = (pixels[i + 2] * a) + 0.5;\n            }\n        }\n    }\n}\n\nextensions.add(Extract);\n", "import { BLEND_MODES, Color } from '@pixi/core';\nimport { Container } from '@pixi/display';\n\nimport type { BaseTexture, ColorSource, Renderer } from '@pixi/core';\nimport type { IDestroyOptions } from '@pixi/display';\nimport type { Sprite } from '@pixi/sprite';\nimport type { ParticleBuffer } from './ParticleBuffer';\n\nexport interface IParticleProperties\n{\n    vertices?: boolean;\n    position?: boolean;\n    rotation?: boolean;\n    uvs?: boolean;\n    tint?: boolean;\n    alpha?: boolean;\n    scale?: boolean;\n}\n\n/**\n * The ParticleContainer class is a really fast version of the Container built solely for speed,\n * so use when you need a lot of sprites or particles.\n *\n * The tradeoff of the ParticleContainer is that most advanced functionality will not work.\n * ParticleContainer implements the basic object transform (position, scale, rotation)\n * and some advanced functionality like tint (as of v4.5.6).\n *\n * Other more advanced functionality like masking, children, filters, etc will not work on sprites in this batch.\n *\n * It's extremely easy to use. And here you have a hundred sprites that will be rendered at the speed of light.\n * @example\n * import { ParticleContainer, Sprite } from 'pixi.js';\n *\n * const container = new ParticleContainer();\n *\n * for (let i = 0; i < 100; ++i)\n * {\n *     let sprite = Sprite.from('myImage.png');\n *     container.addChild(sprite);\n * }\n * @memberof PIXI\n */\nexport class ParticleContainer extends Container<Sprite>\n{\n    /**\n     * The blend mode to be applied to the sprite. Apply a value of `PIXI.BLEND_MODES.NORMAL`\n     * to reset the blend mode.\n     * @default PIXI.BLEND_MODES.NORMAL\n     */\n    public blendMode: BLEND_MODES;\n\n    /**\n     * If true, container allocates more batches in case there are more than `maxSize` particles.\n     * @default false\n     */\n    public autoResize: boolean;\n\n    /**\n     * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n     * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n     * The main disadvantage is movement of objects may appear less smooth.\n     * Default to true here as performance is usually the priority for particles.\n     * @default true\n     */\n    public roundPixels: boolean;\n\n    /**\n     * The texture used to render the children.\n     * @readonly\n     */\n    public baseTexture: BaseTexture;\n    public tintRgb: Float32Array;\n\n    /** @private */\n    _maxSize: number;\n\n    /** @private */\n    _buffers: ParticleBuffer[];\n\n    /** @private */\n    _batchSize: number;\n\n    /**\n     * Set properties to be dynamic (true) / static (false).\n     * @private\n     */\n    _properties: boolean[];\n\n    /**\n     * For every batch, stores _updateID corresponding to the last change in that batch.\n     * @private\n     */\n    _bufferUpdateIDs: number[];\n\n    /**\n     * When child inserted, removed or changes position this number goes up.\n     * @private\n     */\n    _updateID: number;\n\n    /**\n     * The tint applied to the container.\n     * This is a hex value. A value of 0xFFFFFF will remove any tint effect.\n     * @default 0xFFFFFF\n     */\n    private _tintColor: Color;\n\n    /**\n     * @param maxSize - The maximum number of particles that can be rendered by the container.\n     *  Affects size of allocated buffers.\n     * @param properties - The properties of children that should be uploaded to the gpu and applied.\n     * @param {boolean} [properties.vertices=false] - When true, vertices be uploaded and applied.\n     *                  if sprite's ` scale/anchor/trim/frame/orig` is dynamic, please set `true`.\n     * @param {boolean} [properties.position=true] - When true, position be uploaded and applied.\n     * @param {boolean} [properties.rotation=false] - When true, rotation be uploaded and applied.\n     * @param {boolean} [properties.uvs=false] - When true, uvs be uploaded and applied.\n     * @param {boolean} [properties.tint=false] - When true, alpha and tint be uploaded and applied.\n     * @param {number} [batchSize=16384] - Number of particles per batch. If less than maxSize, it uses maxSize instead.\n     * @param {boolean} [autoResize=false] - If true, container allocates more batches in case\n     *  there are more than `maxSize` particles.\n     */\n    constructor(maxSize = 1500, properties?: IParticleProperties, batchSize = 16384, autoResize = false)\n    {\n        super();\n\n        // Making sure the batch size is valid\n        // 65535 is max vertex index in the index buffer (see ParticleRenderer)\n        // so max number of particles is 65536 / 4 = 16384\n        const maxBatchSize = 16384;\n\n        if (batchSize > maxBatchSize)\n        {\n            batchSize = maxBatchSize;\n        }\n\n        this._properties = [false, true, false, false, false];\n        this._maxSize = maxSize;\n        this._batchSize = batchSize;\n        this._buffers = null;\n        this._bufferUpdateIDs = [];\n        this._updateID = 0;\n\n        this.interactiveChildren = false;\n        this.blendMode = BLEND_MODES.NORMAL;\n        this.autoResize = autoResize;\n        this.roundPixels = true;\n        this.baseTexture = null;\n\n        this.setProperties(properties);\n\n        this._tintColor = new Color(0);\n        this.tintRgb = new Float32Array(3);\n        this.tint = 0xFFFFFF;\n    }\n\n    /**\n     * Sets the private properties array to dynamic / static based on the passed properties object\n     * @param properties - The properties to be uploaded\n     */\n    public setProperties(properties: IParticleProperties): void\n    {\n        if (properties)\n        {\n            this._properties[0] = 'vertices' in properties || 'scale' in properties\n                ? !!properties.vertices || !!properties.scale : this._properties[0];\n            this._properties[1] = 'position' in properties ? !!properties.position : this._properties[1];\n            this._properties[2] = 'rotation' in properties ? !!properties.rotation : this._properties[2];\n            this._properties[3] = 'uvs' in properties ? !!properties.uvs : this._properties[3];\n            this._properties[4] = 'tint' in properties || 'alpha' in properties\n                ? !!properties.tint || !!properties.alpha : this._properties[4];\n        }\n    }\n\n    updateTransform(): void\n    {\n        // TODO don't need to!\n        this.displayObjectUpdateTransform();\n    }\n\n    /**\n     * The tint applied to the container. This is a hex value.\n     * A value of 0xFFFFFF will remove any tint effect.\n     * IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\n     * @default 0xFFFFFF\n     */\n    get tint(): ColorSource\n    {\n        return this._tintColor.value;\n    }\n\n    set tint(value: ColorSource)\n    {\n        this._tintColor.setValue(value);\n        this._tintColor.toRgbArray(this.tintRgb);\n    }\n\n    /**\n     * Renders the container using the WebGL renderer.\n     * @param renderer - The WebGL renderer.\n     */\n    public render(renderer: Renderer): void\n    {\n        if (!this.visible || this.worldAlpha <= 0 || !this.children.length || !this.renderable)\n        {\n            return;\n        }\n\n        if (!this.baseTexture)\n        {\n            this.baseTexture = this.children[0]._texture.baseTexture;\n            if (!this.baseTexture.valid)\n            {\n                this.baseTexture.once('update', () => this.onChildrenChange(0));\n            }\n        }\n\n        renderer.batch.setObjectRenderer(renderer.plugins.particle);\n        renderer.plugins.particle.render(this);\n    }\n\n    /**\n     * Set the flag that static data should be updated to true\n     * @param smallestChildIndex - The smallest child index.\n     */\n    protected onChildrenChange(smallestChildIndex: number): void\n    {\n        const bufferIndex = Math.floor(smallestChildIndex / this._batchSize);\n\n        while (this._bufferUpdateIDs.length < bufferIndex)\n        {\n            this._bufferUpdateIDs.push(0);\n        }\n        this._bufferUpdateIDs[bufferIndex] = ++this._updateID;\n    }\n\n    public dispose(): void\n    {\n        if (this._buffers)\n        {\n            for (let i = 0; i < this._buffers.length; ++i)\n            {\n                this._buffers[i].destroy();\n            }\n\n            this._buffers = null;\n        }\n    }\n\n    /**\n     * Destroys the container\n     * @param options - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have their\n     *  destroy method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=false] - Only used for child Sprites if options.children is set to true\n     *  Should it destroy the texture of the child sprite\n     * @param {boolean} [options.baseTexture=false] - Only used for child Sprites if options.children is set to true\n     *  Should it destroy the base texture of the child sprite\n     */\n    public destroy(options?: IDestroyOptions | boolean): void\n    {\n        super.destroy(options);\n\n        this.dispose();\n\n        this._properties = null;\n        this._buffers = null;\n        this._bufferUpdateIDs = null;\n    }\n}\n", "import { Buffer, Geometry, TYPES, utils } from '@pixi/core';\n\nimport type { Sprite } from '@pixi/sprite';\nimport type { IParticleRendererProperty } from './ParticleRenderer';\n\n/*\n * @author Mat Groves\n *\n * Big thanks to the very clever Matt DesLauriers <mattdesl> https://github.com/mattdesl/\n * for creating the original PixiJS version!\n * Also a thanks to https://github.com/bchevalier for tweaking the tint and alpha so that\n * they now share 4 bytes on the vertex buffer\n *\n * Heavily inspired by LibGDX's ParticleBuffer:\n * https://github.com/libgdx/libgdx/blob/master/gdx/src/com/badlogic/gdx/graphics/g2d/ParticleBuffer.java\n */\n\n/**\n * The particle buffer manages the static and dynamic buffers for a particle container.\n * @private\n * @memberof PIXI\n */\nexport class ParticleBuffer\n{\n    public geometry: Geometry;\n    public staticStride: number;\n    public staticBuffer: Buffer;\n    public staticData: Float32Array;\n    public staticDataUint32: Uint32Array;\n    public dynamicStride: number;\n    public dynamicBuffer: Buffer;\n    public dynamicData: Float32Array;\n    public dynamicDataUint32: Uint32Array;\n    public _updateID: number;\n\n    /** Holds the indices of the geometry (quads) to draw. */\n    indexBuffer: Buffer;\n\n    /** The number of particles the buffer can hold. */\n    private size: number;\n\n    /** A list of the properties that are dynamic. */\n    private dynamicProperties: IParticleRendererProperty[];\n\n    /** A list of the properties that are static. */\n    private staticProperties: IParticleRendererProperty[];\n\n    /**\n     * @param {object} properties - The properties to upload.\n     * @param {boolean[]} dynamicPropertyFlags - Flags for which properties are dynamic.\n     * @param {number} size - The size of the batch.\n     */\n    constructor(properties: IParticleRendererProperty[], dynamicPropertyFlags: boolean[], size: number)\n    {\n        this.geometry = new Geometry();\n\n        this.indexBuffer = null;\n\n        this.size = size;\n        this.dynamicProperties = [];\n        this.staticProperties = [];\n\n        for (let i = 0; i < properties.length; ++i)\n        {\n            let property = properties[i];\n\n            // Make copy of properties object so that when we edit the offset it doesn't\n            // change all other instances of the object literal\n            property = {\n                attributeName: property.attributeName,\n                size: property.size,\n                uploadFunction: property.uploadFunction,\n                type: property.type || TYPES.FLOAT,\n                offset: property.offset,\n            };\n\n            if (dynamicPropertyFlags[i])\n            {\n                this.dynamicProperties.push(property);\n            }\n            else\n            {\n                this.staticProperties.push(property);\n            }\n        }\n\n        this.staticStride = 0;\n        this.staticBuffer = null;\n        this.staticData = null;\n        this.staticDataUint32 = null;\n\n        this.dynamicStride = 0;\n        this.dynamicBuffer = null;\n        this.dynamicData = null;\n        this.dynamicDataUint32 = null;\n\n        this._updateID = 0;\n\n        this.initBuffers();\n    }\n\n    /** Sets up the renderer context and necessary buffers. */\n    private initBuffers(): void\n    {\n        const geometry = this.geometry;\n\n        let dynamicOffset = 0;\n\n        this.indexBuffer = new Buffer(utils.createIndicesForQuads(this.size), true, true);\n        geometry.addIndex(this.indexBuffer);\n\n        this.dynamicStride = 0;\n\n        for (let i = 0; i < this.dynamicProperties.length; ++i)\n        {\n            const property = this.dynamicProperties[i];\n\n            property.offset = dynamicOffset;\n            dynamicOffset += property.size;\n            this.dynamicStride += property.size;\n        }\n\n        const dynBuffer = new ArrayBuffer(this.size * this.dynamicStride * 4 * 4);\n\n        this.dynamicData = new Float32Array(dynBuffer);\n        this.dynamicDataUint32 = new Uint32Array(dynBuffer);\n        this.dynamicBuffer = new Buffer(this.dynamicData, false, false);\n\n        // static //\n        let staticOffset = 0;\n\n        this.staticStride = 0;\n\n        for (let i = 0; i < this.staticProperties.length; ++i)\n        {\n            const property = this.staticProperties[i];\n\n            property.offset = staticOffset;\n            staticOffset += property.size;\n            this.staticStride += property.size;\n        }\n\n        const statBuffer = new ArrayBuffer(this.size * this.staticStride * 4 * 4);\n\n        this.staticData = new Float32Array(statBuffer);\n        this.staticDataUint32 = new Uint32Array(statBuffer);\n        this.staticBuffer = new Buffer(this.staticData, true, false);\n\n        for (let i = 0; i < this.dynamicProperties.length; ++i)\n        {\n            const property = this.dynamicProperties[i];\n\n            geometry.addAttribute(\n                property.attributeName,\n                this.dynamicBuffer,\n                0,\n                property.type === TYPES.UNSIGNED_BYTE,\n                property.type,\n                this.dynamicStride * 4,\n                property.offset * 4\n            );\n        }\n\n        for (let i = 0; i < this.staticProperties.length; ++i)\n        {\n            const property = this.staticProperties[i];\n\n            geometry.addAttribute(\n                property.attributeName,\n                this.staticBuffer,\n                0,\n                property.type === TYPES.UNSIGNED_BYTE,\n                property.type,\n                this.staticStride * 4,\n                property.offset * 4\n            );\n        }\n    }\n\n    /**\n     * Uploads the dynamic properties.\n     * @param children - The children to upload.\n     * @param startIndex - The index to start at.\n     * @param amount - The number to upload.\n     */\n    uploadDynamic(children: Sprite[], startIndex: number, amount: number): void\n    {\n        for (let i = 0; i < this.dynamicProperties.length; i++)\n        {\n            const property = this.dynamicProperties[i];\n\n            property.uploadFunction(children, startIndex, amount,\n                property.type === TYPES.UNSIGNED_BYTE ? this.dynamicDataUint32 : this.dynamicData,\n                this.dynamicStride, property.offset);\n        }\n\n        this.dynamicBuffer._updateID++;\n    }\n\n    /**\n     * Uploads the static properties.\n     * @param children - The children to upload.\n     * @param startIndex - The index to start at.\n     * @param amount - The number to upload.\n     */\n    uploadStatic(children: Sprite[], startIndex: number, amount: number): void\n    {\n        for (let i = 0; i < this.staticProperties.length; i++)\n        {\n            const property = this.staticProperties[i];\n\n            property.uploadFunction(children, startIndex, amount,\n                property.type === TYPES.UNSIGNED_BYTE ? this.staticDataUint32 : this.staticData,\n                this.staticStride, property.offset);\n        }\n\n        this.staticBuffer._updateID++;\n    }\n\n    /** Destroys the ParticleBuffer. */\n    destroy(): void\n    {\n        this.indexBuffer = null;\n\n        this.dynamicProperties = null;\n        this.dynamicBuffer = null;\n        this.dynamicData = null;\n        this.dynamicDataUint32 = null;\n\n        this.staticProperties = null;\n        this.staticBuffer = null;\n        this.staticData = null;\n        this.staticDataUint32 = null;\n        // all buffers are destroyed inside geometry\n        this.geometry.destroy();\n    }\n}\n", "var fragment = \"varying vec2 vTextureCoord;\\nvarying vec4 vColor;\\n\\nuniform sampler2D uSampler;\\n\\nvoid main(void){\\n    vec4 color = texture2D(uSampler, vTextureCoord) * vColor;\\n    gl_FragColor = color;\\n}\";\n\nexport { fragment as default };\n//# sourceMappingURL=particles.mjs.map\n", "var vertex = \"attribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\nattribute vec4 aColor;\\n\\nattribute vec2 aPositionCoord;\\nattribute float aRotation;\\n\\nuniform mat3 translationMatrix;\\nuniform vec4 uColor;\\n\\nvarying vec2 vTextureCoord;\\nvarying vec4 vColor;\\n\\nvoid main(void){\\n    float x = (aVertexPosition.x) * cos(aRotation) - (aVertexPosition.y) * sin(aRotation);\\n    float y = (aVertexPosition.x) * sin(aRotation) + (aVertexPosition.y) * cos(aRotation);\\n\\n    vec2 v = vec2(x, y);\\n    v = v + aPositionCoord;\\n\\n    gl_Position = vec4((translationMatrix * vec3(v, 1.0)).xy, 0.0, 1.0);\\n\\n    vTextureCoord = aTextureCoord;\\n    vColor = aColor * uColor;\\n}\\n\";\n\nexport { vertex as default };\n//# sourceMappingURL=particles2.mjs.map\n", "import { Color, extensions, ExtensionType, Matrix, ObjectRenderer, Shader, State, TYPES, utils } from '@pixi/core';\nimport { ParticleBuffer } from './ParticleBuffer';\nimport fragment from './particles.frag';\nimport vertex from './particles.vert';\n\nimport type { ExtensionMetadata, Renderer } from '@pixi/core';\nimport type { Sprite } from '@pixi/sprite';\nimport type { ParticleContainer } from './ParticleContainer';\n\nexport interface IParticleRendererProperty\n{\n    attributeName: string;\n    size: number;\n    type?: TYPES;\n    uploadFunction: (...params: any[]) => any;\n    offset: number;\n}\n\n/*\n * @author Mat Groves\n *\n * Big thanks to the very clever Matt DesLauriers <mattdesl> https://github.com/mattdesl/\n * for creating the original PixiJS version!\n * Also a thanks to https://github.com/bchevalier for tweaking the tint and alpha so that they now\n * share 4 bytes on the vertex buffer\n *\n * Heavily inspired by LibGDX's ParticleRenderer:\n * https://github.com/libgdx/libgdx/blob/master/gdx/src/com/badlogic/gdx/graphics/g2d/ParticleRenderer.java\n */\n\n/**\n * Renderer for Particles that is designer for speed over feature set.\n * @memberof PIXI\n */\nexport class ParticleRenderer extends ObjectRenderer\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        name: 'particle',\n        type: ExtensionType.RendererPlugin,\n    };\n\n    /** The WebGL state in which this renderer will work. */\n    public readonly state: State;\n\n    /** The default shader that is used if a sprite doesn't have a more specific one. */\n    public shader: Shader;\n    public tempMatrix: Matrix;\n    public properties: IParticleRendererProperty[];\n\n    /**\n     * @param renderer - The renderer this sprite batch works for.\n     */\n    constructor(renderer: Renderer)\n    {\n        super(renderer);\n\n        // 65535 is max vertex index in the index buffer (see ParticleRenderer)\n        // so max number of particles is 65536 / 4 = 16384\n        // and max number of element in the index buffer is 16384 * 6 = 98304\n        // Creating a full index buffer, overhead is 98304 * 2 = 196Ko\n        // let numIndices = 98304;\n\n        this.shader = null;\n\n        this.properties = null;\n\n        this.tempMatrix = new Matrix();\n\n        this.properties = [\n            // verticesData\n            {\n                attributeName: 'aVertexPosition',\n                size: 2,\n                uploadFunction: this.uploadVertices,\n                offset: 0,\n            },\n            // positionData\n            {\n                attributeName: 'aPositionCoord',\n                size: 2,\n                uploadFunction: this.uploadPosition,\n                offset: 0,\n            },\n            // rotationData\n            {\n                attributeName: 'aRotation',\n                size: 1,\n                uploadFunction: this.uploadRotation,\n                offset: 0,\n            },\n            // uvsData\n            {\n                attributeName: 'aTextureCoord',\n                size: 2,\n                uploadFunction: this.uploadUvs,\n                offset: 0,\n            },\n            // tintData\n            {\n                attributeName: 'aColor',\n                size: 1,\n                type: TYPES.UNSIGNED_BYTE,\n                uploadFunction: this.uploadTint,\n                offset: 0,\n            },\n        ];\n\n        this.shader = Shader.from(vertex, fragment, {});\n        this.state = State.for2d();\n    }\n\n    /**\n     * Renders the particle container object.\n     * @param container - The container to render using this ParticleRenderer.\n     */\n    public render(container: ParticleContainer): void\n    {\n        const children = container.children;\n        const maxSize = container._maxSize;\n        const batchSize = container._batchSize;\n        const renderer = this.renderer;\n        let totalChildren = children.length;\n\n        if (totalChildren === 0)\n        {\n            return;\n        }\n        else if (totalChildren > maxSize && !container.autoResize)\n        {\n            totalChildren = maxSize;\n        }\n\n        let buffers = container._buffers;\n\n        if (!buffers)\n        {\n            buffers = container._buffers = this.generateBuffers(container);\n        }\n\n        const baseTexture = children[0]._texture.baseTexture;\n        const premultiplied = baseTexture.alphaMode > 0;\n\n        // if the uvs have not updated then no point rendering just yet!\n        this.state.blendMode = utils.correctBlendMode(container.blendMode, premultiplied);\n        renderer.state.set(this.state);\n\n        const gl = renderer.gl;\n\n        const m = container.worldTransform.copyTo(this.tempMatrix);\n\n        m.prepend(renderer.globalUniforms.uniforms.projectionMatrix);\n\n        this.shader.uniforms.translationMatrix = m.toArray(true);\n\n        this.shader.uniforms.uColor = Color.shared\n            .setValue(container.tintRgb)\n            .premultiply(container.worldAlpha, premultiplied)\n            .toArray(this.shader.uniforms.uColor);\n\n        this.shader.uniforms.uSampler = baseTexture;\n\n        this.renderer.shader.bind(this.shader);\n\n        let updateStatic = false;\n\n        // now lets upload and render the buffers..\n        for (let i = 0, j = 0; i < totalChildren; i += batchSize, j += 1)\n        {\n            let amount = (totalChildren - i);\n\n            if (amount > batchSize)\n            {\n                amount = batchSize;\n            }\n\n            if (j >= buffers.length)\n            {\n                buffers.push(this._generateOneMoreBuffer(container));\n            }\n\n            const buffer = buffers[j];\n\n            // we always upload the dynamic\n            buffer.uploadDynamic(children, i, amount);\n\n            const bid = container._bufferUpdateIDs[j] || 0;\n\n            updateStatic = updateStatic || (buffer._updateID < bid);\n            // we only upload the static content when we have to!\n            if (updateStatic)\n            {\n                buffer._updateID = container._updateID;\n                buffer.uploadStatic(children, i, amount);\n            }\n\n            // bind the buffer\n            renderer.geometry.bind(buffer.geometry);\n            gl.drawElements(gl.TRIANGLES, amount * 6, gl.UNSIGNED_SHORT, 0);\n        }\n    }\n\n    /**\n     * Creates one particle buffer for each child in the container we want to render and updates internal properties.\n     * @param container - The container to render using this ParticleRenderer\n     * @returns - The buffers\n     */\n    private generateBuffers(container: ParticleContainer): ParticleBuffer[]\n    {\n        const buffers = [];\n        const size = container._maxSize;\n        const batchSize = container._batchSize;\n        const dynamicPropertyFlags = container._properties;\n\n        for (let i = 0; i < size; i += batchSize)\n        {\n            buffers.push(new ParticleBuffer(this.properties, dynamicPropertyFlags, batchSize));\n        }\n\n        return buffers;\n    }\n\n    /**\n     * Creates one more particle buffer, because container has autoResize feature.\n     * @param container - The container to render using this ParticleRenderer\n     * @returns - The generated buffer\n     */\n    private _generateOneMoreBuffer(container: ParticleContainer): ParticleBuffer\n    {\n        const batchSize = container._batchSize;\n        const dynamicPropertyFlags = container._properties;\n\n        return new ParticleBuffer(this.properties, dynamicPropertyFlags, batchSize);\n    }\n\n    /**\n     * Uploads the vertices.\n     * @param children - the array of sprites to render\n     * @param startIndex - the index to start from in the children array\n     * @param amount - the amount of children that will have their vertices uploaded\n     * @param array - The vertices to upload.\n     * @param stride - Stride to use for iteration.\n     * @param offset - Offset to start at.\n     */\n    public uploadVertices(\n        children: Sprite[], startIndex: number, amount: number,\n        array: number[], stride: number, offset: number\n    ): void\n    {\n        let w0 = 0;\n        let w1 = 0;\n        let h0 = 0;\n        let h1 = 0;\n\n        for (let i = 0; i < amount; ++i)\n        {\n            const sprite = children[startIndex + i];\n            const texture = sprite._texture;\n            const sx = sprite.scale.x;\n            const sy = sprite.scale.y;\n            const trim = texture.trim;\n            const orig = texture.orig;\n\n            if (trim)\n            {\n                // if the sprite is trimmed and is not a tilingsprite then we need to add the\n                // extra space before transforming the sprite coords..\n                w1 = trim.x - (sprite.anchor.x * orig.width);\n                w0 = w1 + trim.width;\n\n                h1 = trim.y - (sprite.anchor.y * orig.height);\n                h0 = h1 + trim.height;\n            }\n            else\n            {\n                w0 = (orig.width) * (1 - sprite.anchor.x);\n                w1 = (orig.width) * -sprite.anchor.x;\n\n                h0 = orig.height * (1 - sprite.anchor.y);\n                h1 = orig.height * -sprite.anchor.y;\n            }\n\n            array[offset] = w1 * sx;\n            array[offset + 1] = h1 * sy;\n\n            array[offset + stride] = w0 * sx;\n            array[offset + stride + 1] = h1 * sy;\n\n            array[offset + (stride * 2)] = w0 * sx;\n            array[offset + (stride * 2) + 1] = h0 * sy;\n\n            array[offset + (stride * 3)] = w1 * sx;\n            array[offset + (stride * 3) + 1] = h0 * sy;\n\n            offset += stride * 4;\n        }\n    }\n\n    /**\n     * Uploads the position.\n     * @param children - the array of sprites to render\n     * @param startIndex - the index to start from in the children array\n     * @param amount - the amount of children that will have their positions uploaded\n     * @param array - The vertices to upload.\n     * @param stride - Stride to use for iteration.\n     * @param offset - Offset to start at.\n     */\n    public uploadPosition(\n        children: Sprite[], startIndex: number, amount: number,\n        array: number[], stride: number, offset: number\n    ): void\n    {\n        for (let i = 0; i < amount; i++)\n        {\n            const spritePosition = children[startIndex + i].position;\n\n            array[offset] = spritePosition.x;\n            array[offset + 1] = spritePosition.y;\n\n            array[offset + stride] = spritePosition.x;\n            array[offset + stride + 1] = spritePosition.y;\n\n            array[offset + (stride * 2)] = spritePosition.x;\n            array[offset + (stride * 2) + 1] = spritePosition.y;\n\n            array[offset + (stride * 3)] = spritePosition.x;\n            array[offset + (stride * 3) + 1] = spritePosition.y;\n\n            offset += stride * 4;\n        }\n    }\n\n    /**\n     * Uploads the rotation.\n     * @param children - the array of sprites to render\n     * @param startIndex - the index to start from in the children array\n     * @param amount - the amount of children that will have their rotation uploaded\n     * @param array - The vertices to upload.\n     * @param stride - Stride to use for iteration.\n     * @param offset - Offset to start at.\n     */\n    public uploadRotation(\n        children: Sprite[], startIndex: number, amount: number,\n        array: number[], stride: number, offset: number\n    ): void\n    {\n        for (let i = 0; i < amount; i++)\n        {\n            const spriteRotation = children[startIndex + i].rotation;\n\n            array[offset] = spriteRotation;\n            array[offset + stride] = spriteRotation;\n            array[offset + (stride * 2)] = spriteRotation;\n            array[offset + (stride * 3)] = spriteRotation;\n\n            offset += stride * 4;\n        }\n    }\n\n    /**\n     * Uploads the UVs.\n     * @param children - the array of sprites to render\n     * @param startIndex - the index to start from in the children array\n     * @param amount - the amount of children that will have their rotation uploaded\n     * @param array - The vertices to upload.\n     * @param stride - Stride to use for iteration.\n     * @param offset - Offset to start at.\n     */\n    public uploadUvs(\n        children: Sprite[], startIndex: number, amount: number,\n        array: number[], stride: number, offset: number\n    ): void\n    {\n        for (let i = 0; i < amount; ++i)\n        {\n            const textureUvs = children[startIndex + i]._texture._uvs;\n\n            if (textureUvs)\n            {\n                array[offset] = textureUvs.x0;\n                array[offset + 1] = textureUvs.y0;\n\n                array[offset + stride] = textureUvs.x1;\n                array[offset + stride + 1] = textureUvs.y1;\n\n                array[offset + (stride * 2)] = textureUvs.x2;\n                array[offset + (stride * 2) + 1] = textureUvs.y2;\n\n                array[offset + (stride * 3)] = textureUvs.x3;\n                array[offset + (stride * 3) + 1] = textureUvs.y3;\n\n                offset += stride * 4;\n            }\n            else\n            {\n                // TODO you know this can be easier!\n                array[offset] = 0;\n                array[offset + 1] = 0;\n\n                array[offset + stride] = 0;\n                array[offset + stride + 1] = 0;\n\n                array[offset + (stride * 2)] = 0;\n                array[offset + (stride * 2) + 1] = 0;\n\n                array[offset + (stride * 3)] = 0;\n                array[offset + (stride * 3) + 1] = 0;\n\n                offset += stride * 4;\n            }\n        }\n    }\n\n    /**\n     * Uploads the tint.\n     * @param children - the array of sprites to render\n     * @param startIndex - the index to start from in the children array\n     * @param amount - the amount of children that will have their rotation uploaded\n     * @param array - The vertices to upload.\n     * @param stride - Stride to use for iteration.\n     * @param offset - Offset to start at.\n     */\n    public uploadTint(\n        children: Sprite[], startIndex: number, amount: number,\n        array: number[], stride: number, offset: number\n    ): void\n    {\n        for (let i = 0; i < amount; ++i)\n        {\n            const sprite = children[startIndex + i];\n            const result = Color.shared\n                .setValue(sprite._tintRGB)\n                .toPremultiplied(sprite.alpha, sprite.texture.baseTexture.alphaMode > 0);\n\n            array[offset] = result;\n            array[offset + stride] = result;\n            array[offset + (stride * 2)] = result;\n            array[offset + (stride * 3)] = result;\n\n            offset += stride * 4;\n        }\n    }\n\n    /** Destroys the ParticleRenderer. */\n    public destroy(): void\n    {\n        super.destroy();\n\n        if (this.shader)\n        {\n            this.shader.destroy();\n            this.shader = null;\n        }\n\n        this.tempMatrix = null;\n    }\n}\n\nextensions.add(ParticleRenderer);\n", "/**\n * Constants that define the type of gradient on text.\n * @static\n * @memberof PIXI\n * @type {object}\n */\nexport enum TEXT_GRADIENT\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    /**\n     * Vertical gradient\n     * @default 0\n     */\n    LINEAR_VERTICAL = 0,\n    /**\n     * Linear gradient\n     * @default 1\n     */\n    LINEAR_HORIZONTAL = 1\n}\n", "import { settings } from '@pixi/core';\n\nimport type { ICanvas, ICanvasRenderingContext2D, ICanvasRenderingContext2DSettings } from '@pixi/core';\nimport type { TextStyle, TextStyleWhiteSpace } from './TextStyle';\n\n// The type for Intl.Segmenter is only available since TypeScript 4.7.2, so let's make a polyfill for it.\ninterface ISegmentData\n{\n    segment: string;\n}\ninterface ISegments\n{\n    [Symbol.iterator](): IterableIterator<ISegmentData>;\n}\ninterface ISegmenter\n{\n    segment(input: string): ISegments;\n}\ninterface IIntl\n{\n    Segmenter?: {\n        prototype: ISegmenter;\n        new(): ISegmenter;\n    };\n}\n\n/**\n * Internal return object for {@link PIXI.TextMetrics.measureFont `TextMetrics.measureFont`}.\n * @typedef {object} FontMetrics\n * @property {number} ascent - The ascent distance\n * @property {number} descent - The descent distance\n * @property {number} fontSize - Font size from ascent to descent\n * @memberof PIXI.TextMetrics\n * @private\n */\n\n/**\n * A number, or a string containing a number.\n * @memberof PIXI\n * @typedef {object} IFontMetrics\n * @property {number} ascent - Font ascent\n * @property {number} descent - Font descent\n * @property {number} fontSize - Font size\n */\ninterface IFontMetrics\n{\n    ascent: number;\n    descent: number;\n    fontSize: number;\n}\n\ntype CharacterWidthCache = Record<string, number>;\n\n// Default settings used for all getContext calls\nconst contextSettings: ICanvasRenderingContext2DSettings = {\n    // TextMetrics requires getImageData readback for measuring fonts.\n    willReadFrequently: true,\n};\n\n/**\n * The TextMetrics object represents the measurement of a block of text with a specified style.\n * @example\n * import { TextMetrics, TextStyle } from 'pixi.js';\n *\n * const style = new TextStyle({\n *     fontFamily: 'Arial',\n *     fontSize: 24,\n *     fill: 0xff1010,\n *     align: 'center',\n * });\n * const textMetrics = TextMetrics.measureText('Your text', style);\n * @memberof PIXI\n */\nexport class TextMetrics\n{\n    /** The text that was measured. */\n    public text: string;\n\n    /** The style that was measured. */\n    public style: TextStyle;\n\n    /** The measured width of the text. */\n    public width: number;\n\n    /** The measured height of the text. */\n    public height: number;\n\n    /** An array of lines of the text broken by new lines and wrapping is specified in style. */\n    public lines: string[];\n\n    /** An array of the line widths for each line matched to `lines`. */\n    public lineWidths: number[];\n\n    /** The measured line height for this style. */\n    public lineHeight: number;\n\n    /** The maximum line width for all measured lines. */\n    public maxLineWidth: number;\n\n    /** The font properties object from TextMetrics.measureFont. */\n    public fontProperties: IFontMetrics;\n\n    /**\n     * String used for calculate font metrics.\n     * These characters are all tall to help calculate the height required for text.\n     */\n    public static METRICS_STRING = '|ÉqÅ';\n\n    /** Baseline symbol for calculate font metrics. */\n    public static BASELINE_SYMBOL = 'M';\n\n    /** Baseline multiplier for calculate font metrics. */\n    public static BASELINE_MULTIPLIER = 1.4;\n\n    /** Height multiplier for setting height of canvas to calculate font metrics. */\n    public static HEIGHT_MULTIPLIER = 2.0;\n\n    /**\n     * A Unicode \"character\", or \"grapheme cluster\", can be composed of multiple Unicode code points,\n     * such as letters with diacritical marks (e.g. `'\\u0065\\u0301'`, letter e with acute)\n     * or emojis with modifiers (e.g. `'\\uD83E\\uDDD1\\u200D\\uD83D\\uDCBB'`, technologist).\n     * The new `Intl.Segmenter` API in ES2022 can split the string into grapheme clusters correctly. If it is not available,\n     * PixiJS will fallback to use the iterator of String, which can only spilt the string into code points.\n     * If you want to get full functionality in environments that don't support `Intl.Segmenter` (such as Firefox),\n     * you can use other libraries such as [grapheme-splitter]{@link https://www.npmjs.com/package/grapheme-splitter}\n     * or [graphemer]{@link https://www.npmjs.com/package/graphemer} to create a polyfill. Since these libraries can be\n     * relatively large in size to handle various Unicode grapheme clusters properly, PixiJS won't use them directly.\n     */\n    public static graphemeSegmenter: (s: string) => string[] = (() =>\n    {\n        if (typeof (Intl as IIntl)?.Segmenter === 'function')\n        {\n            const segmenter = new (Intl as IIntl).Segmenter();\n\n            return (s: string) => [...segmenter.segment(s)].map((x) => x.segment);\n        }\n\n        return (s: string) => [...s];\n    })();\n\n    public static _experimentalLetterSpacingSupported?: boolean;\n\n    /**\n     * Checking that we can use modern canvas 2D API.\n     *\n     * Note: This is an unstable API, Chrome < 94 use `textLetterSpacing`, later versions use `letterSpacing`.\n     * @see PIXI.TextMetrics.experimentalLetterSpacing\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/letterSpacing\n     * @see https://developer.chrome.com/origintrials/#/view_trial/3585991203293757441\n     */\n    public static get experimentalLetterSpacingSupported(): boolean\n    {\n        let result = TextMetrics._experimentalLetterSpacingSupported;\n\n        if (result !== undefined)\n        {\n            const proto = settings.ADAPTER.getCanvasRenderingContext2D().prototype;\n\n            result\n                = TextMetrics._experimentalLetterSpacingSupported\n                = 'letterSpacing' in proto || 'textLetterSpacing' in proto;\n        }\n\n        return result;\n    }\n\n    /**\n     * New rendering behavior for letter-spacing which uses Chrome's new native API. This will\n     * lead to more accurate letter-spacing results because it does not try to manually draw\n     * each character. However, this Chrome API is experimental and may not serve all cases yet.\n     * @see PIXI.TextMetrics.experimentalLetterSpacingSupported\n     */\n    public static experimentalLetterSpacing = false;\n\n    /** Cache of {@see PIXI.TextMetrics.FontMetrics} objects. */\n    private static _fonts: Record<string, IFontMetrics> = {};\n\n    /** Cache of new line chars. */\n    private static _newlines: number[] = [\n        0x000A, // line feed\n        0x000D, // carriage return\n    ];\n\n    /** Cache of breaking spaces. */\n    private static _breakingSpaces: number[] = [\n        0x0009, // character tabulation\n        0x0020, // space\n        0x2000, // en quad\n        0x2001, // em quad\n        0x2002, // en space\n        0x2003, // em space\n        0x2004, // three-per-em space\n        0x2005, // four-per-em space\n        0x2006, // six-per-em space\n        0x2008, // punctuation space\n        0x2009, // thin space\n        0x200A, // hair space\n        0x205F, // medium mathematical space\n        0x3000, // ideographic space\n    ];\n\n    private static __canvas: ICanvas;\n    private static __context: ICanvasRenderingContext2D;\n\n    /**\n     * @param text - the text that was measured\n     * @param style - the style that was measured\n     * @param width - the measured width of the text\n     * @param height - the measured height of the text\n     * @param lines - an array of the lines of text broken by new lines and wrapping if specified in style\n     * @param lineWidths - an array of the line widths for each line matched to `lines`\n     * @param lineHeight - the measured line height for this style\n     * @param maxLineWidth - the maximum line width for all measured lines\n     * @param {PIXI.IFontMetrics} fontProperties - the font properties object from TextMetrics.measureFont\n     */\n    constructor(text: string, style: TextStyle, width: number, height: number, lines: string[], lineWidths: number[],\n        lineHeight: number, maxLineWidth: number, fontProperties: IFontMetrics)\n    {\n        this.text = text;\n        this.style = style;\n        this.width = width;\n        this.height = height;\n        this.lines = lines;\n        this.lineWidths = lineWidths;\n        this.lineHeight = lineHeight;\n        this.maxLineWidth = maxLineWidth;\n        this.fontProperties = fontProperties;\n    }\n\n    /**\n     * Measures the supplied string of text and returns a Rectangle.\n     * @param text - The text to measure.\n     * @param style - The text style to use for measuring\n     * @param wordWrap - Override for if word-wrap should be applied to the text.\n     * @param canvas - optional specification of the canvas to use for measuring.\n     * @returns Measured width and height of the text.\n     */\n    public static measureText(\n        text: string,\n        style: TextStyle,\n        wordWrap?: boolean,\n        canvas: ICanvas = TextMetrics._canvas\n    ): TextMetrics\n    {\n        wordWrap = (wordWrap === undefined || wordWrap === null) ? style.wordWrap : wordWrap;\n        const font = style.toFontString();\n        const fontProperties = TextMetrics.measureFont(font);\n\n        // fallback in case UA disallow canvas data extraction\n        // (toDataURI, getImageData functions)\n        if (fontProperties.fontSize === 0)\n        {\n            fontProperties.fontSize = style.fontSize as number;\n            fontProperties.ascent = style.fontSize as number;\n        }\n\n        const context = canvas.getContext('2d', contextSettings);\n\n        context.font = font;\n\n        const outputText = wordWrap ? TextMetrics.wordWrap(text, style, canvas) : text;\n        const lines = outputText.split(/(?:\\r\\n|\\r|\\n)/);\n        const lineWidths = new Array<number>(lines.length);\n        let maxLineWidth = 0;\n\n        for (let i = 0; i < lines.length; i++)\n        {\n            const lineWidth = TextMetrics._measureText(lines[i], style.letterSpacing, context);\n\n            lineWidths[i] = lineWidth;\n            maxLineWidth = Math.max(maxLineWidth, lineWidth);\n        }\n        let width = maxLineWidth + style.strokeThickness;\n\n        if (style.dropShadow)\n        {\n            width += style.dropShadowDistance;\n        }\n\n        const lineHeight = style.lineHeight || fontProperties.fontSize + style.strokeThickness;\n        let height = Math.max(lineHeight, fontProperties.fontSize + (style.strokeThickness * 2))\n            + ((lines.length - 1) * (lineHeight + style.leading));\n\n        if (style.dropShadow)\n        {\n            height += style.dropShadowDistance;\n        }\n\n        return new TextMetrics(\n            text,\n            style,\n            width,\n            height,\n            lines,\n            lineWidths,\n            lineHeight + style.leading,\n            maxLineWidth,\n            fontProperties\n        );\n    }\n\n    private static _measureText(\n        text: string,\n        letterSpacing: number,\n        context: ICanvasRenderingContext2D\n    )\n    {\n        let useExperimentalLetterSpacing = false;\n\n        if (TextMetrics.experimentalLetterSpacingSupported)\n        {\n            if (TextMetrics.experimentalLetterSpacing)\n            {\n                context.letterSpacing = `${letterSpacing}px`;\n                context.textLetterSpacing = `${letterSpacing}px`;\n                useExperimentalLetterSpacing = true;\n            }\n            else\n            {\n                context.letterSpacing = '0px';\n                context.textLetterSpacing = '0px';\n            }\n        }\n\n        let width = context.measureText(text).width;\n\n        if (width > 0)\n        {\n            if (useExperimentalLetterSpacing)\n            {\n                width -= letterSpacing;\n            }\n            else\n            {\n                width += (TextMetrics.graphemeSegmenter(text).length - 1) * letterSpacing;\n            }\n        }\n\n        return width;\n    }\n\n    /**\n     * Applies newlines to a string to have it optimally fit into the horizontal\n     * bounds set by the Text object's wordWrapWidth property.\n     * @param text - String to apply word wrapping to\n     * @param style - the style to use when wrapping\n     * @param canvas - optional specification of the canvas to use for measuring.\n     * @returns New string with new lines applied where required\n     */\n    private static wordWrap(\n        text: string,\n        style: TextStyle,\n        canvas: ICanvas = TextMetrics._canvas\n    ): string\n    {\n        const context = canvas.getContext('2d', contextSettings);\n\n        let width = 0;\n        let line = '';\n        let lines = '';\n\n        const cache: CharacterWidthCache = Object.create(null);\n        const { letterSpacing, whiteSpace } = style;\n\n        // How to handle whitespaces\n        const collapseSpaces = TextMetrics.collapseSpaces(whiteSpace);\n        const collapseNewlines = TextMetrics.collapseNewlines(whiteSpace);\n\n        // whether or not spaces may be added to the beginning of lines\n        let canPrependSpaces = !collapseSpaces;\n\n        // There is letterSpacing after every char except the last one\n        // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!\n        // so for convenience the above needs to be compared to width + 1 extra letterSpace\n        // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!_\n        // ________________________________________________\n        // And then the final space is simply no appended to each line\n        const wordWrapWidth = style.wordWrapWidth + letterSpacing;\n\n        // break text into words, spaces and newline chars\n        const tokens = TextMetrics.tokenize(text);\n\n        for (let i = 0; i < tokens.length; i++)\n        {\n            // get the word, space or newlineChar\n            let token = tokens[i];\n\n            // if word is a new line\n            if (TextMetrics.isNewline(token))\n            {\n                // keep the new line\n                if (!collapseNewlines)\n                {\n                    lines += TextMetrics.addLine(line);\n                    canPrependSpaces = !collapseSpaces;\n                    line = '';\n                    width = 0;\n                    continue;\n                }\n\n                // if we should collapse new lines\n                // we simply convert it into a space\n                token = ' ';\n            }\n\n            // if we should collapse repeated whitespaces\n            if (collapseSpaces)\n            {\n                // check both this and the last tokens for spaces\n                const currIsBreakingSpace = TextMetrics.isBreakingSpace(token);\n                const lastIsBreakingSpace = TextMetrics.isBreakingSpace(line[line.length - 1]);\n\n                if (currIsBreakingSpace && lastIsBreakingSpace)\n                {\n                    continue;\n                }\n            }\n\n            // get word width from cache if possible\n            const tokenWidth = TextMetrics.getFromCache(token, letterSpacing, cache, context);\n\n            // word is longer than desired bounds\n            if (tokenWidth > wordWrapWidth)\n            {\n                // if we are not already at the beginning of a line\n                if (line !== '')\n                {\n                    // start newlines for overflow words\n                    lines += TextMetrics.addLine(line);\n                    line = '';\n                    width = 0;\n                }\n\n                // break large word over multiple lines\n                if (TextMetrics.canBreakWords(token, style.breakWords))\n                {\n                    // break word into characters\n                    const characters = TextMetrics.wordWrapSplit(token);\n\n                    // loop the characters\n                    for (let j = 0; j < characters.length; j++)\n                    {\n                        let char = characters[j];\n                        let lastChar = char;\n\n                        let k = 1;\n\n                        // we are not at the end of the token\n                        while (characters[j + k])\n                        {\n                            const nextChar = characters[j + k];\n\n                            // should not split chars\n                            if (!TextMetrics.canBreakChars(lastChar, nextChar, token, j, style.breakWords))\n                            {\n                                // combine chars & move forward one\n                                char += nextChar;\n                            }\n                            else\n                            {\n                                break;\n                            }\n\n                            lastChar = nextChar;\n                            k++;\n                        }\n\n                        j += k - 1;\n\n                        const characterWidth = TextMetrics.getFromCache(char, letterSpacing, cache, context);\n\n                        if (characterWidth + width > wordWrapWidth)\n                        {\n                            lines += TextMetrics.addLine(line);\n                            canPrependSpaces = false;\n                            line = '';\n                            width = 0;\n                        }\n\n                        line += char;\n                        width += characterWidth;\n                    }\n                }\n\n                // run word out of the bounds\n                else\n                {\n                    // if there are words in this line already\n                    // finish that line and start a new one\n                    if (line.length > 0)\n                    {\n                        lines += TextMetrics.addLine(line);\n                        line = '';\n                        width = 0;\n                    }\n\n                    const isLastToken = i === tokens.length - 1;\n\n                    // give it its own line if it's not the end\n                    lines += TextMetrics.addLine(token, !isLastToken);\n                    canPrependSpaces = false;\n                    line = '';\n                    width = 0;\n                }\n            }\n\n            // word could fit\n            else\n            {\n                // word won't fit because of existing words\n                // start a new line\n                if (tokenWidth + width > wordWrapWidth)\n                {\n                    // if its a space we don't want it\n                    canPrependSpaces = false;\n\n                    // add a new line\n                    lines += TextMetrics.addLine(line);\n\n                    // start a new line\n                    line = '';\n                    width = 0;\n                }\n\n                // don't add spaces to the beginning of lines\n                if (line.length > 0 || !TextMetrics.isBreakingSpace(token) || canPrependSpaces)\n                {\n                    // add the word to the current line\n                    line += token;\n\n                    // update width counter\n                    width += tokenWidth;\n                }\n            }\n        }\n\n        lines += TextMetrics.addLine(line, false);\n\n        return lines;\n    }\n\n    /**\n     * Convienience function for logging each line added during the wordWrap method.\n     * @param line    - The line of text to add\n     * @param newLine - Add new line character to end\n     * @returns A formatted line\n     */\n    private static addLine(line: string, newLine = true): string\n    {\n        line = TextMetrics.trimRight(line);\n\n        line = (newLine) ? `${line}\\n` : line;\n\n        return line;\n    }\n\n    /**\n     * Gets & sets the widths of calculated characters in a cache object\n     * @param key            - The key\n     * @param letterSpacing  - The letter spacing\n     * @param cache          - The cache\n     * @param context        - The canvas context\n     * @returns The from cache.\n     */\n    private static getFromCache(key: string, letterSpacing: number, cache: CharacterWidthCache,\n        context: ICanvasRenderingContext2D): number\n    {\n        let width = cache[key];\n\n        if (typeof width !== 'number')\n        {\n            width = TextMetrics._measureText(key, letterSpacing, context) + letterSpacing;\n            cache[key] = width;\n        }\n\n        return width;\n    }\n\n    /**\n     * Determines whether we should collapse breaking spaces.\n     * @param whiteSpace - The TextStyle property whiteSpace\n     * @returns Should collapse\n     */\n    private static collapseSpaces(whiteSpace: TextStyleWhiteSpace): boolean\n    {\n        return (whiteSpace === 'normal' || whiteSpace === 'pre-line');\n    }\n\n    /**\n     * Determines whether we should collapse newLine chars.\n     * @param whiteSpace - The white space\n     * @returns should collapse\n     */\n    private static collapseNewlines(whiteSpace: TextStyleWhiteSpace): boolean\n    {\n        return (whiteSpace === 'normal');\n    }\n\n    /**\n     * Trims breaking whitespaces from string.\n     * @param text - The text\n     * @returns Trimmed string\n     */\n    private static trimRight(text: string): string\n    {\n        if (typeof text !== 'string')\n        {\n            return '';\n        }\n\n        for (let i = text.length - 1; i >= 0; i--)\n        {\n            const char = text[i];\n\n            if (!TextMetrics.isBreakingSpace(char))\n            {\n                break;\n            }\n\n            text = text.slice(0, -1);\n        }\n\n        return text;\n    }\n\n    /**\n     * Determines if char is a newline.\n     * @param char - The character\n     * @returns True if newline, False otherwise.\n     */\n    private static isNewline(char: string): boolean\n    {\n        if (typeof char !== 'string')\n        {\n            return false;\n        }\n\n        return TextMetrics._newlines.includes(char.charCodeAt(0));\n    }\n\n    /**\n     * Determines if char is a breaking whitespace.\n     *\n     * It allows one to determine whether char should be a breaking whitespace\n     * For example certain characters in CJK langs or numbers.\n     * It must return a boolean.\n     * @param char - The character\n     * @param [_nextChar] - The next character\n     * @returns True if whitespace, False otherwise.\n     */\n    static isBreakingSpace(char: string, _nextChar?: string): boolean\n    {\n        if (typeof char !== 'string')\n        {\n            return false;\n        }\n\n        return TextMetrics._breakingSpaces.includes(char.charCodeAt(0));\n    }\n\n    /**\n     * Splits a string into words, breaking-spaces and newLine characters\n     * @param text - The text\n     * @returns A tokenized array\n     */\n    private static tokenize(text: string): string[]\n    {\n        const tokens: string[] = [];\n        let token = '';\n\n        if (typeof text !== 'string')\n        {\n            return tokens;\n        }\n\n        for (let i = 0; i < text.length; i++)\n        {\n            const char = text[i];\n            const nextChar = text[i + 1];\n\n            if (TextMetrics.isBreakingSpace(char, nextChar) || TextMetrics.isNewline(char))\n            {\n                if (token !== '')\n                {\n                    tokens.push(token);\n                    token = '';\n                }\n\n                tokens.push(char);\n\n                continue;\n            }\n\n            token += char;\n        }\n\n        if (token !== '')\n        {\n            tokens.push(token);\n        }\n\n        return tokens;\n    }\n\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It allows one to customise which words should break\n     * Examples are if the token is CJK or numbers.\n     * It must return a boolean.\n     * @param _token - The token\n     * @param breakWords - The style attr break words\n     * @returns Whether to break word or not\n     */\n    static canBreakWords(_token: string, breakWords: boolean): boolean\n    {\n        return breakWords;\n    }\n\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It allows one to determine whether a pair of characters\n     * should be broken by newlines\n     * For example certain characters in CJK langs or numbers.\n     * It must return a boolean.\n     * @param _char - The character\n     * @param _nextChar - The next character\n     * @param _token - The token/word the characters are from\n     * @param _index - The index in the token of the char\n     * @param _breakWords - The style attr break words\n     * @returns whether to break word or not\n     */\n    static canBreakChars(_char: string, _nextChar: string, _token: string, _index: number,\n        _breakWords: boolean): boolean\n    {\n        return true;\n    }\n\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It is called when a token (usually a word) has to be split into separate pieces\n     * in order to determine the point to break a word.\n     * It must return an array of characters.\n     * @param token - The token to split\n     * @returns The characters of the token\n     * @see TextMetrics.graphemeSegmenter\n     */\n    static wordWrapSplit(token: string): string[]\n    {\n        return TextMetrics.graphemeSegmenter(token);\n    }\n\n    /**\n     * Calculates the ascent, descent and fontSize of a given font-style\n     * @param font - String representing the style of the font\n     * @returns Font properties object\n     */\n    public static measureFont(font: string): IFontMetrics\n    {\n        // as this method is used for preparing assets, don't recalculate things if we don't need to\n        if (TextMetrics._fonts[font])\n        {\n            return TextMetrics._fonts[font];\n        }\n\n        const properties: IFontMetrics = {\n            ascent: 0,\n            descent: 0,\n            fontSize: 0,\n        };\n\n        const canvas = TextMetrics._canvas;\n        const context = TextMetrics._context;\n\n        context.font = font;\n\n        const metricsString = TextMetrics.METRICS_STRING + TextMetrics.BASELINE_SYMBOL;\n        const width = Math.ceil(context.measureText(metricsString).width);\n        let baseline = Math.ceil(context.measureText(TextMetrics.BASELINE_SYMBOL).width);\n        const height = Math.ceil(TextMetrics.HEIGHT_MULTIPLIER * baseline);\n\n        baseline = baseline * TextMetrics.BASELINE_MULTIPLIER | 0;\n\n        if (width === 0 || height === 0)\n        {\n            TextMetrics._fonts[font] = properties;\n\n            return properties;\n        }\n\n        canvas.width = width;\n        canvas.height = height;\n\n        context.fillStyle = '#f00';\n        context.fillRect(0, 0, width, height);\n\n        context.font = font;\n\n        context.textBaseline = 'alphabetic';\n        context.fillStyle = '#000';\n        context.fillText(metricsString, 0, baseline);\n\n        const imagedata = context.getImageData(0, 0, width, height).data;\n        const pixels = imagedata.length;\n        const line = width * 4;\n\n        let i = 0;\n        let idx = 0;\n        let stop = false;\n\n        // ascent. scan from top to bottom until we find a non red pixel\n        for (i = 0; i < baseline; ++i)\n        {\n            for (let j = 0; j < line; j += 4)\n            {\n                if (imagedata[idx + j] !== 255)\n                {\n                    stop = true;\n                    break;\n                }\n            }\n            if (!stop)\n            {\n                idx += line;\n            }\n            else\n            {\n                break;\n            }\n        }\n\n        properties.ascent = baseline - i;\n\n        idx = pixels - line;\n        stop = false;\n\n        // descent. scan from bottom to top until we find a non red pixel\n        for (i = height; i > baseline; --i)\n        {\n            for (let j = 0; j < line; j += 4)\n            {\n                if (imagedata[idx + j] !== 255)\n                {\n                    stop = true;\n                    break;\n                }\n            }\n\n            if (!stop)\n            {\n                idx -= line;\n            }\n            else\n            {\n                break;\n            }\n        }\n\n        properties.descent = i - baseline;\n        properties.fontSize = properties.ascent + properties.descent;\n\n        TextMetrics._fonts[font] = properties;\n\n        return properties;\n    }\n\n    /**\n     * Clear font metrics in metrics cache.\n     * @param {string} [font] - font name. If font name not set then clear cache for all fonts.\n     */\n    public static clearMetrics(font = ''): void\n    {\n        if (font)\n        {\n            delete TextMetrics._fonts[font];\n        }\n        else\n        {\n            TextMetrics._fonts = {};\n        }\n    }\n\n    /**\n     * Cached canvas element for measuring text\n     * TODO: this should be private, but isn't because of backward compat, will fix later.\n     * @ignore\n     */\n    public static get _canvas(): ICanvas\n    {\n        if (!TextMetrics.__canvas)\n        {\n            let canvas: ICanvas;\n\n            try\n            {\n                // OffscreenCanvas2D measureText can be up to 40% faster.\n                const c = new OffscreenCanvas(0, 0);\n                const context = c.getContext('2d', contextSettings);\n\n                if (context?.measureText)\n                {\n                    TextMetrics.__canvas = c;\n\n                    return c;\n                }\n\n                canvas = settings.ADAPTER.createCanvas();\n            }\n            catch (ex)\n            {\n                canvas = settings.ADAPTER.createCanvas();\n            }\n            canvas.width = canvas.height = 10;\n            TextMetrics.__canvas = canvas;\n        }\n\n        return TextMetrics.__canvas;\n    }\n\n    /**\n     * TODO: this should be private, but isn't because of backward compat, will fix later.\n     * @ignore\n     */\n    public static get _context(): ICanvasRenderingContext2D\n    {\n        if (!TextMetrics.__context)\n        {\n            TextMetrics.__context = TextMetrics._canvas.getContext('2d', contextSettings);\n        }\n\n        return TextMetrics.__context;\n    }\n}\n", "// disabling eslint for now, going to rewrite this in v5\n/* eslint-disable */\n\nimport { TEXT_GRADIENT } from './const';\nimport { Color } from '@pixi/core';\n\nexport type TextStyleAlign = 'left'|'center'|'right'|'justify';\nexport type TextStyleFill = string|string[]|number|number[]|CanvasGradient|CanvasPattern;\nexport type TextStyleFontStyle = 'normal'|'italic'|'oblique';\nexport type TextStyleFontVariant = 'normal'|'small-caps';\nexport type TextStyleFontWeight = 'normal'|'bold'|'bolder'|'lighter'|'100'|'200'|'300'|'400'|'500'|'600'|'700'|'800'|'900';\nexport type TextStyleLineJoin = 'miter'|'round'|'bevel';\nexport type TextStyleTextBaseline = 'alphabetic'|'top'|'hanging'|'middle'|'ideographic'|'bottom';\nexport type TextStyleWhiteSpace = 'normal'|'pre'|'pre-line';\n\n/**\n * Generic interface for TextStyle options.\n * @memberof PIXI\n */\nexport interface ITextStyle {\n    /**\n     * Alignment for multiline text, does not affect single line text\n     * @type {'left'|'center'|'right'|'justify'}\n     */\n    align: TextStyleAlign;\n    /** Indicates if lines can be wrapped within words, it needs wordWrap to be set to true */\n    breakWords: boolean;\n    /** Set a drop shadow for the text */\n    dropShadow: boolean;\n    /** Set alpha for the drop shadow */\n    dropShadowAlpha: number;\n    /** Set a angle of the drop shadow */\n    dropShadowAngle: number;\n    /** Set a shadow blur radius */\n    dropShadowBlur: number;\n    /** A fill style to be used on the dropshadow e.g., 'red', '#00FF00' */\n    dropShadowColor: string|number;\n    /** Set a distance of the drop shadow */\n    dropShadowDistance: number;\n    /**\n     * A canvas fillstyle that will be used on the text e.g., 'red', '#00FF00'.\n     * Can be an array to create a gradient, e.g., `['#000000','#FFFFFF']`\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle|MDN}\n     * @type {string|string[]|number|number[]|CanvasGradient|CanvasPattern}\n     */\n    fill: TextStyleFill;\n    /**\n     * If fill is an array of colours to create a gradient, this can change the\n     * type/direction of the gradient. See {@link PIXI.TEXT_GRADIENT}\n     * @type {PIXI.TEXT_GRADIENT}\n     */\n    fillGradientType: TEXT_GRADIENT;\n    /**\n     * If fill is an array of colours to create a gradient, this array can set\n     * the stop points (numbers between 0 and 1) for the color, overriding the\n     * default behaviour of evenly spacing them.\n     */\n    fillGradientStops: number[];\n    /**\n     * The font family, can be a single font name, or a list of names where the first\n     * is the preferred font.\n     */\n    fontFamily: string | string[];\n    /**\n     * The font size (as a number it converts to px, but as a string,\n     * equivalents are '26px','20pt','160%' or '1.6em')\n     */\n    fontSize: number | string;\n    /**\n     * The font style.\n     * @type {'normal'|'italic'|'oblique'}\n     */\n    fontStyle: TextStyleFontStyle;\n    /**\n     * The font variant.\n     * @type {'normal'|'small-caps'}\n     */\n    fontVariant: TextStyleFontVariant;\n    /**\n     * The font weight.\n     * @type {'normal'|'bold'|'bolder'|'lighter'|'100'|'200'|'300'|'400'|'500'|'600'|'700'|'800'|'900'}\n     */\n    fontWeight: TextStyleFontWeight;\n    /** The height of the line, a number that represents the vertical space that a letter uses. */\n    leading: number;\n    /** The amount of spacing between letters, default is 0 */\n    letterSpacing: number;\n    /** The line height, a number that represents the vertical space that a letter uses */\n    lineHeight: number;\n    /**\n     * The lineJoin property sets the type of corner created, it can resolve\n     * spiked text issues. Possible values \"miter\" (creates a sharp corner),\n     * \"round\" (creates a round corner) or \"bevel\" (creates a squared corner).\n     * @type {'miter'|'round'|'bevel'}\n     */\n    lineJoin: TextStyleLineJoin;\n    /**\n     * The miter limit to use when using the 'miter' lineJoin mode. This can reduce\n     * or increase the spikiness of rendered text.\n     */\n    miterLimit: number;\n    /**\n     * Occasionally some fonts are cropped. Adding some padding will prevent this from\n     * happening by adding padding to all sides of the text.\n     */\n    padding: number;\n    /** A canvas fillstyle that will be used on the text stroke, e.g., 'blue', '#FCFF00' */\n    stroke: string|number;\n    /** A number that represents the thickness of the stroke. A value of 0 will disable stroke. */\n    strokeThickness: number;\n    /**\n     * The baseline of the text that is rendered.\n     * @type {'alphabetic'|'top'|'hanging'|'middle'|'ideographic'|'bottom'}\n     */\n    textBaseline: TextStyleTextBaseline;\n    /** Trim transparent borders */\n    trim: boolean;\n    /**\n     * Determines whether newlines & spaces are collapsed or preserved \"normal\"\n     * (collapse, collapse), \"pre\" (preserve, preserve) | \"pre-line\" (preserve,\n     * collapse). It needs wordWrap to be set to true.\n     * @type {'normal'|'pre'|'pre-line'}\n     */\n    whiteSpace: TextStyleWhiteSpace;\n    /** Indicates if word wrap should be used */\n    wordWrap: boolean;\n    /** The width at which text will wrap, it needs wordWrap to be set to true */\n    wordWrapWidth: number;\n}\n\nconst genericFontFamilies = [\n    'serif',\n    'sans-serif',\n    'monospace',\n    'cursive',\n    'fantasy',\n    'system-ui',\n];\n\n/**\n * A TextStyle Object contains information to decorate a Text objects.\n *\n * An instance can be shared between multiple Text objects; then changing the style will update all text objects using it.\n *\n * A tool can be used to generate a text style [here](https://pixijs.io/pixi-text-style).\n *\n * @memberof PIXI\n * @example\n * import { TextStyle } from 'pixi.js';\n * const style = new TextStyle({\n *   fontFamily: ['Helvetica', 'Arial', 'sans-serif'],\n *   fontSize: 36,\n * });\n */\nexport class TextStyle implements ITextStyle\n{\n    /**\n     * Default style options used for all TextStyle instances.\n     * @type {PIXI.ITextStyle}\n     */\n    public static defaultStyle: ITextStyle = {\n        /**\n         * See {@link PIXI.TextStyle.align}\n         * @type {'left'|'center'|'right'|'justify'}\n         */\n        align: 'left',\n        /** See {@link PIXI.TextStyle.breakWords} */\n        breakWords: false,\n        /** See {@link PIXI.TextStyle.dropShadow} */\n        dropShadow: false,\n        /** See {@link PIXI.TextStyle.dropShadowAlpha} */\n        dropShadowAlpha: 1,\n        /**\n         * See {@link PIXI.TextStyle.dropShadowAngle}\n         * @type {number}\n         * @default Math.PI / 6\n         */\n        dropShadowAngle: Math.PI / 6,\n        /** See {@link PIXI.TextStyle.dropShadowBlur} */\n        dropShadowBlur: 0,\n        /**\n         * See {@link PIXI.TextStyle.dropShadowColor}\n         * @type {string|number}\n         */\n        dropShadowColor: 'black',\n        /** See {@link PIXI.TextStyle.dropShadowDistance} */\n        dropShadowDistance: 5,\n        /**\n         * See {@link PIXI.TextStyle.fill}\n         * @type {string|string[]|number|number[]|CanvasGradient|CanvasPattern}\n         */\n        fill: 'black',\n        /**\n         * See {@link PIXI.TextStyle.fillGradientType}\n         * @type {PIXI.TEXT_GRADIENT}\n         * @default PIXI.TEXT_GRADIENT.LINEAR_VERTICAL\n         */\n        fillGradientType: TEXT_GRADIENT.LINEAR_VERTICAL,\n        /**\n         * See {@link PIXI.TextStyle.fillGradientStops}\n         * @type {number[]}\n         * @default []\n         */\n        fillGradientStops: [],\n        /**\n         * See {@link PIXI.TextStyle.fontFamily}\n         * @type {string|string[]}\n         */\n        fontFamily: 'Arial',\n        /**\n         * See {@link PIXI.TextStyle.fontSize}\n         * @type {number|string} \n         */\n        fontSize: 26,\n        /**\n         * See {@link PIXI.TextStyle.fontStyle}\n         * @type {'normal'|'italic'|'oblique'}\n         */\n        fontStyle: 'normal',\n        /**\n         * See {@link PIXI.TextStyle.fontVariant}\n         * @type {'normal'|'small-caps'}\n         */\n        fontVariant: 'normal',\n        /**\n         * See {@link PIXI.TextStyle.fontWeight}\n         * @type {'normal'|'bold'|'bolder'|'lighter'|'100'|'200'|'300'|'400'|'500'|'600'|'700'|'800'|'900'}\n         */\n        fontWeight: 'normal',\n        /** See {@link PIXI.TextStyle.leading} */\n        leading: 0,\n        /** See {@link PIXI.TextStyle.letterSpacing} */\n        letterSpacing: 0,\n        /** See {@link PIXI.TextStyle.lineHeight} */\n        lineHeight: 0,\n        /**\n         * See {@link PIXI.TextStyle.lineJoin}\n         * @type {'miter'|'round'|'bevel'}\n         */\n        lineJoin: 'miter',\n        /** See {@link PIXI.TextStyle.miterLimit} */\n        miterLimit: 10,\n        /** See {@link PIXI.TextStyle.padding} */\n        padding: 0,\n        /**\n         * See {@link PIXI.TextStyle.stroke}\n         * @type {string|number}\n         */\n        stroke: 'black',\n        /** See {@link PIXI.TextStyle.strokeThickness} */\n        strokeThickness: 0,\n        /**\n         * See {@link PIXI.TextStyle.textBaseline} \n         * @type {'alphabetic'|'top'|'hanging'|'middle'|'ideographic'|'bottom'}\n         */\n        textBaseline: 'alphabetic',\n        /** See {@link PIXI.TextStyle.trim} */\n        trim: false,\n        /**\n         * See {@link PIXI.TextStyle.whiteSpace}\n         * @type {'normal'|'pre'|'pre-line'}\n         */\n        whiteSpace: 'pre',\n        /** See {@link PIXI.TextStyle.wordWrap} */\n        wordWrap: false,\n        /** See {@link PIXI.TextStyle.wordWrapWidth} */\n        wordWrapWidth: 100,\n    };\n\n    public styleID: number;\n\n    protected _align: TextStyleAlign;\n    protected _breakWords: boolean;\n    protected _dropShadow: boolean;\n    protected _dropShadowAlpha: number;\n    protected _dropShadowAngle: number;\n    protected _dropShadowBlur: number;\n    protected _dropShadowColor: string|number;\n    protected _dropShadowDistance: number;\n    protected _fill: TextStyleFill;\n    protected _fillGradientType: TEXT_GRADIENT;\n    protected _fillGradientStops: number[];\n    protected _fontFamily: string|string[];\n    protected _fontSize: number|string;\n    protected _fontStyle: TextStyleFontStyle;\n    protected _fontVariant: TextStyleFontVariant;\n    protected _fontWeight: TextStyleFontWeight;\n    protected _letterSpacing: number;\n    protected _lineHeight: number;\n    protected _lineJoin: TextStyleLineJoin;\n    protected _miterLimit: number;\n    protected _padding: number;\n    protected _stroke: string|number;\n    protected _strokeThickness: number;\n    protected _textBaseline: TextStyleTextBaseline;\n    protected _trim: boolean;\n    protected _whiteSpace: TextStyleWhiteSpace;\n    protected _wordWrap: boolean;\n    protected _wordWrapWidth: number;\n    protected _leading: number;\n\n    /**\n     * @param style - TextStyle properties to be set on the text. See {@link PIXI.TextStyle.defaultStyle}\n     *       for the default values.\n     */\n    constructor(style?: Partial<ITextStyle>)\n    {\n        this.styleID = 0;\n\n        this.reset();\n\n        deepCopyProperties(this, style, style);\n    }\n\n    /**\n     * Creates a new TextStyle object with the same values as this one.\n     * Note that the only the properties of the object are cloned.\n     *\n     * @return New cloned TextStyle object\n     */\n    public clone(): TextStyle\n    {\n        const clonedProperties: Partial<ITextStyle> = {};\n\n        deepCopyProperties(clonedProperties, this, TextStyle.defaultStyle);\n\n        return new TextStyle(clonedProperties);\n    }\n\n    /** Resets all properties to the defaults specified in TextStyle.prototype._default */\n    public reset(): void\n    {\n        deepCopyProperties(this, TextStyle.defaultStyle, TextStyle.defaultStyle);\n    }\n\n    /**\n     * Alignment for multiline text, does not affect single line text.\n     *\n     * @member {'left'|'center'|'right'|'justify'}\n     */\n    get align(): TextStyleAlign\n    {\n        return this._align;\n    }\n    set align(align: TextStyleAlign)\n    {\n        if (this._align !== align)\n        {\n            this._align = align;\n            this.styleID++;\n        }\n    }\n\n    /** Indicates if lines can be wrapped within words, it needs wordWrap to be set to true. */\n    get breakWords(): boolean\n    {\n        return this._breakWords;\n    }\n    set breakWords(breakWords: boolean)\n    {\n        if (this._breakWords !== breakWords)\n        {\n            this._breakWords = breakWords;\n            this.styleID++;\n        }\n    }\n\n    /** Set a drop shadow for the text. */\n    get dropShadow(): boolean\n    {\n        return this._dropShadow;\n    }\n    set dropShadow(dropShadow: boolean)\n    {\n        if (this._dropShadow !== dropShadow)\n        {\n            this._dropShadow = dropShadow;\n            this.styleID++;\n        }\n    }\n\n    /** Set alpha for the drop shadow. */\n    get dropShadowAlpha(): number\n    {\n        return this._dropShadowAlpha;\n    }\n    set dropShadowAlpha(dropShadowAlpha: number)\n    {\n        if (this._dropShadowAlpha !== dropShadowAlpha)\n        {\n            this._dropShadowAlpha = dropShadowAlpha;\n            this.styleID++;\n        }\n    }\n\n    /** Set a angle of the drop shadow. */\n    get dropShadowAngle(): number\n    {\n        return this._dropShadowAngle;\n    }\n    set dropShadowAngle(dropShadowAngle: number)\n    {\n        if (this._dropShadowAngle !== dropShadowAngle)\n        {\n            this._dropShadowAngle = dropShadowAngle;\n            this.styleID++;\n        }\n    }\n\n    /** Set a shadow blur radius. */\n    get dropShadowBlur(): number\n    {\n        return this._dropShadowBlur;\n    }\n    set dropShadowBlur(dropShadowBlur: number)\n    {\n        if (this._dropShadowBlur !== dropShadowBlur)\n        {\n            this._dropShadowBlur = dropShadowBlur;\n            this.styleID++;\n        }\n    }\n\n    /** A fill style to be used on the dropshadow e.g., 'red', '#00FF00'. */\n    get dropShadowColor(): number | string\n    {\n        return this._dropShadowColor;\n    }\n    set dropShadowColor(dropShadowColor: number | string)\n    {\n        const outputColor = getColor(dropShadowColor);\n        if (this._dropShadowColor !== outputColor)\n        {\n            this._dropShadowColor = outputColor;\n            this.styleID++;\n        }\n    }\n\n    /** Set a distance of the drop shadow. */\n    get dropShadowDistance(): number\n    {\n        return this._dropShadowDistance;\n    }\n    set dropShadowDistance(dropShadowDistance: number)\n    {\n        if (this._dropShadowDistance !== dropShadowDistance)\n        {\n            this._dropShadowDistance = dropShadowDistance;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * A canvas fillstyle that will be used on the text e.g., 'red', '#00FF00'.\n     *\n     * Can be an array to create a gradient e.g., `['#000000','#FFFFFF']`\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle|MDN}\n     *\n     * @member {string|string[]|number|number[]|CanvasGradient|CanvasPattern}\n     */\n    get fill(): TextStyleFill\n    {\n        return this._fill;\n    }\n    set fill(fill: TextStyleFill)\n    {\n        // TODO: Can't have different types for getter and setter. The getter shouldn't have the number type as\n        //       the setter converts to string. See this thread for more details:\n        //       https://github.com/microsoft/TypeScript/issues/2521\n        // TODO: Not sure if getColor works properly with CanvasGradient and/or CanvasPattern, can't pass in\n        //       without casting here.\n        const outputColor = getColor(fill as any);\n        if (this._fill !== outputColor)\n        {\n            this._fill = outputColor;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * If fill is an array of colours to create a gradient, this can change the type/direction of the gradient.\n     *\n     * @type {PIXI.TEXT_GRADIENT}\n     */\n    get fillGradientType(): TEXT_GRADIENT\n    {\n        return this._fillGradientType;\n    }\n    set fillGradientType(fillGradientType: TEXT_GRADIENT)\n    {\n        if (this._fillGradientType !== fillGradientType)\n        {\n            this._fillGradientType = fillGradientType;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * If fill is an array of colours to create a gradient, this array can set the stop points\n     * (numbers between 0 and 1) for the color, overriding the default behaviour of evenly spacing them.\n     */\n    get fillGradientStops(): number[]\n    {\n        return this._fillGradientStops;\n    }\n    set fillGradientStops(fillGradientStops: number[])\n    {\n        if (!areArraysEqual(this._fillGradientStops,fillGradientStops))\n        {\n            this._fillGradientStops = fillGradientStops;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The font family, can be a single font name, or a list of names where the first\n     * is the preferred font.\n     */\n    get fontFamily(): string | string[]\n    {\n        return this._fontFamily;\n    }\n    set fontFamily(fontFamily: string | string[])\n    {\n        if (this.fontFamily !== fontFamily)\n        {\n            this._fontFamily = fontFamily;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The font size\n     * (as a number it converts to px, but as a string, equivalents are '26px','20pt','160%' or '1.6em')\n     */\n    get fontSize(): number | string\n    {\n        return this._fontSize;\n    }\n    set fontSize(fontSize: number | string)\n    {\n        if (this._fontSize !== fontSize)\n        {\n            this._fontSize = fontSize;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The font style.\n     *\n     * @member {'normal'|'italic'|'oblique'}\n     */\n    get fontStyle(): TextStyleFontStyle\n    {\n        return this._fontStyle;\n    }\n    set fontStyle(fontStyle: TextStyleFontStyle)\n    {\n        if (this._fontStyle !== fontStyle)\n        {\n            this._fontStyle = fontStyle;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The font variant.\n     *\n     * @member {'normal'|'small-caps'}\n     */\n    get fontVariant(): TextStyleFontVariant\n    {\n        return this._fontVariant;\n    }\n    set fontVariant(fontVariant: TextStyleFontVariant)\n    {\n        if (this._fontVariant !== fontVariant)\n        {\n            this._fontVariant = fontVariant;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The font weight.\n     *\n     * @member {'normal'|'bold'|'bolder'|'lighter'|'100'|'200'|'300'|'400'|'500'|'600'|'700'|'800'|'900'}\n     */\n    get fontWeight(): TextStyleFontWeight\n    {\n        return this._fontWeight;\n    }\n    set fontWeight(fontWeight: TextStyleFontWeight)\n    {\n        if (this._fontWeight !== fontWeight)\n        {\n            this._fontWeight = fontWeight;\n            this.styleID++;\n        }\n    }\n\n    /** The amount of spacing between letters, default is 0. */\n    get letterSpacing(): number\n    {\n        return this._letterSpacing;\n    }\n    set letterSpacing(letterSpacing: number)\n    {\n        if (this._letterSpacing !== letterSpacing)\n        {\n            this._letterSpacing = letterSpacing;\n            this.styleID++;\n        }\n    }\n\n    /** The line height, a number that represents the vertical space that a letter uses. */\n    get lineHeight(): number\n    {\n        return this._lineHeight;\n    }\n    set lineHeight(lineHeight: number)\n    {\n        if (this._lineHeight !== lineHeight)\n        {\n            this._lineHeight = lineHeight;\n            this.styleID++;\n        }\n    }\n\n    /** The space between lines. */\n    get leading(): number\n    {\n        return this._leading;\n    }\n    set leading(leading: number)\n    {\n        if (this._leading !== leading)\n        {\n            this._leading = leading;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The lineJoin property sets the type of corner created, it can resolve spiked text issues.\n     * Default is 'miter' (creates a sharp corner).\n     *\n     * @member {'miter'|'round'|'bevel'}\n     */\n    get lineJoin(): TextStyleLineJoin\n    {\n        return this._lineJoin;\n    }\n    set lineJoin(lineJoin: TextStyleLineJoin)\n    {\n        if (this._lineJoin !== lineJoin)\n        {\n            this._lineJoin = lineJoin;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The miter limit to use when using the 'miter' lineJoin mode.\n     *\n     * This can reduce or increase the spikiness of rendered text.\n     */\n    get miterLimit(): number\n    {\n        return this._miterLimit;\n    }\n    set miterLimit(miterLimit: number)\n    {\n        if (this._miterLimit !== miterLimit)\n        {\n            this._miterLimit = miterLimit;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Occasionally some fonts are cropped. Adding some padding will prevent this from happening\n     * by adding padding to all sides of the text.\n     */\n    get padding(): number\n    {\n        return this._padding;\n    }\n    set padding(padding: number)\n    {\n        if (this._padding !== padding)\n        {\n            this._padding = padding;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * A canvas fillstyle that will be used on the text stroke, e.g., 'blue', '#FCFF00'\n     */\n    get stroke(): string | number\n    {\n        return this._stroke;\n    }\n    set stroke(stroke: string | number)\n    {\n        // TODO: Can't have different types for getter and setter. The getter shouldn't have the number type as\n        //       the setter converts to string. See this thread for more details:\n        //       https://github.com/microsoft/TypeScript/issues/2521\n        const outputColor = getColor(stroke);\n        if (this._stroke !== outputColor)\n        {\n            this._stroke = outputColor;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * A number that represents the thickness of the stroke.\n     *\n     * @default 0\n     */\n    get strokeThickness(): number\n    {\n        return this._strokeThickness;\n    }\n    set strokeThickness(strokeThickness: number)\n    {\n        if (this._strokeThickness !== strokeThickness)\n        {\n            this._strokeThickness = strokeThickness;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The baseline of the text that is rendered.\n     *\n     * @member {'alphabetic'|'top'|'hanging'|'middle'|'ideographic'|'bottom'}\n     */\n    get textBaseline(): TextStyleTextBaseline\n    {\n        return this._textBaseline;\n    }\n    set textBaseline(textBaseline: TextStyleTextBaseline)\n    {\n        if (this._textBaseline !== textBaseline)\n        {\n            this._textBaseline = textBaseline;\n            this.styleID++;\n        }\n    }\n\n    /** Trim transparent borders. */\n    get trim(): boolean\n    {\n        return this._trim;\n    }\n    set trim(trim: boolean)\n    {\n        if (this._trim !== trim)\n        {\n            this._trim = trim;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * How newlines and spaces should be handled.\n     * Default is 'pre' (preserve, preserve).\n     *\n     *  value       | New lines     |   Spaces\n     *  ---         | ---           |   ---\n     * 'normal'     | Collapse      |   Collapse\n     * 'pre'        | Preserve      |   Preserve\n     * 'pre-line'   | Preserve      |   Collapse\n     *\n     * @member {'normal'|'pre'|'pre-line'}\n     */\n    get whiteSpace(): TextStyleWhiteSpace\n    {\n        return this._whiteSpace;\n    }\n    set whiteSpace(whiteSpace: TextStyleWhiteSpace)\n    {\n        if (this._whiteSpace !== whiteSpace)\n        {\n            this._whiteSpace = whiteSpace;\n            this.styleID++;\n        }\n    }\n\n    /** Indicates if word wrap should be used. */\n    get wordWrap(): boolean\n    {\n        return this._wordWrap;\n    }\n    set wordWrap(wordWrap: boolean)\n    {\n        if (this._wordWrap !== wordWrap)\n        {\n            this._wordWrap = wordWrap;\n            this.styleID++;\n        }\n    }\n\n    /** The width at which text will wrap, it needs wordWrap to be set to true. */\n    get wordWrapWidth(): number\n    {\n        return this._wordWrapWidth;\n    }\n    set wordWrapWidth(wordWrapWidth: number)\n    {\n        if (this._wordWrapWidth !== wordWrapWidth)\n        {\n            this._wordWrapWidth = wordWrapWidth;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Generates a font style string to use for `TextMetrics.measureFont()`.\n     *\n     * @return Font style string, for passing to `TextMetrics.measureFont()`\n     */\n    public toFontString(): string\n    {\n        // build canvas api font setting from individual components. Convert a numeric this.fontSize to px\n        const fontSizeString = (typeof this.fontSize === 'number') ? `${this.fontSize}px` : this.fontSize;\n\n        // Clean-up fontFamily property by quoting each font name\n        // this will support font names with spaces\n        let fontFamilies: string|string[] = this.fontFamily;\n\n        if (!Array.isArray(this.fontFamily))\n        {\n            fontFamilies = this.fontFamily.split(',');\n        }\n\n        for (let i = fontFamilies.length - 1; i >= 0; i--)\n        {\n            // Trim any extra white-space\n            let fontFamily = fontFamilies[i].trim();\n\n            // Check if font already contains strings\n            if (!(/([\\\"\\'])[^\\'\\\"]+\\1/).test(fontFamily) && !genericFontFamilies.includes(fontFamily))\n            {\n                fontFamily = `\"${fontFamily}\"`;\n            }\n            (fontFamilies as string[])[i] = fontFamily;\n        }\n\n        return `${this.fontStyle} ${this.fontVariant} ${this.fontWeight} ${fontSizeString} ${(fontFamilies as string[]).join(',')}`;\n    }\n}\n\n/**\n * Utility function to convert hexadecimal colors to strings, and simply return the color if it's a string.\n * This version can also convert array of colors\n * @private\n * @param color\n * @return The color as a string.\n */\nfunction getColor(color: (string|number)[]): string[];\nfunction getColor(color: string|number): string;\nfunction getColor(color: string|number|(string|number)[]): string|string[]\n{\n    const temp = Color.shared;\n\n    if (!Array.isArray(color))\n    {\n        return temp.setValue(color).toHex();\n    }\n    else\n    {\n        return color.map(c => temp.setValue(c).toHex());\n    }\n}\n\n/**\n * Utility function to convert hexadecimal colors to strings, and simply return the color if it's a string.\n * This version can also convert array of colors\n * @private\n * @param array1 - First array to compare\n * @param array2 - Second array to compare\n * @return Do the arrays contain the same values in the same order\n */\nfunction areArraysEqual<T>(array1: T[], array2: T[]): boolean\n{\n    if (!Array.isArray(array1) || !Array.isArray(array2))\n    {\n        return false;\n    }\n\n    if (array1.length !== array2.length)\n    {\n        return false;\n    }\n\n    for (let i = 0; i < array1.length; ++i)\n    {\n        if (array1[i] !== array2[i])\n        {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n * Utility function to ensure that object properties are copied by value, and not by reference\n * @private\n * @param target - Target object to copy properties into\n * @param source - Source object for the properties to copy\n * @param propertyObj - Object containing properties names we want to loop over\n */\nfunction deepCopyProperties(target: Record<string, any>, source: Record<string, any>, propertyObj: Record<string, any>): void {\n    for (const prop in propertyObj) {\n        if (Array.isArray(source[prop])) {\n            target[prop] = source[prop].slice();\n        } else {\n            target[prop] = source[prop];\n        }\n    }\n}\n", "/* eslint max-depth: [2, 8] */\nimport { Color, Rectangle, settings, Texture, utils } from '@pixi/core';\nimport { Sprite } from '@pixi/sprite';\nimport { TEXT_GRADIENT } from './const';\nimport { TextMetrics } from './TextMetrics';\nimport { TextStyle } from './TextStyle';\n\nimport type { ICanvas, ICanvasRenderingContext2D, Renderer } from '@pixi/core';\nimport type { IDestroyOptions } from '@pixi/display';\nimport type { ITextStyle } from './TextStyle';\n\nconst defaultDestroyOptions: IDestroyOptions = {\n    texture: true,\n    children: false,\n    baseTexture: true,\n};\n\n/**\n * A Text Object will create a line or multiple lines of text.\n *\n * The text is created using the [Canvas API](https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API).\n *\n * The primary advantage of this class over BitmapText is that you have great control over the style of the text,\n * which you can change at runtime.\n *\n * The primary disadvantages is that each piece of text has it's own texture, which can use more memory.\n * When text changes, this texture has to be re-generated and re-uploaded to the GPU, taking up time.\n *\n * To split a line you can use '\\n' in your text string, or, on the `style` object,\n * change its `wordWrap` property to true and and give the `wordWrapWidth` property a value.\n *\n * A Text can be created directly from a string and a style object,\n * which can be generated [here](https://pixijs.io/pixi-text-style).\n * @example\n * import { Text } from 'pixi.js';\n *\n * const text = new Text('This is a PixiJS text', {\n *     fontFamily: 'Arial',\n *     fontSize: 24,\n *     fill: 0xff1010,\n *     align: 'center',\n * });\n * @memberof PIXI\n */\nexport class Text extends Sprite\n{\n    /**\n     * Override whether or not the resolution of the text is automatically adjusted to match the resolution of the renderer.\n     * Setting this to false can allow you to get crisper text at lower render resolutions.\n     * @example\n     * // renderer has a resolution of 1\n     * const app = new Application();\n     *\n     * Text.defaultResolution = 2;\n     * Text.defaultAutoResolution = false;\n     * // text has a resolution of 2\n     * const text = new Text('This is a PixiJS text');\n     */\n    public static defaultAutoResolution = true;\n\n    /**\n     * If {@link PIXI.Text.defaultAutoResolution} is false, this will be the default resolution of the text.\n     * If not set it will default to {@link PIXI.settings.RESOLUTION}.\n     * @example\n     * Text.defaultResolution = 2;\n     * Text.defaultAutoResolution = false;\n     *\n     * // text has a resolution of 2\n     * const text = new Text('This is a PixiJS text');\n     */\n    public static defaultResolution: number;\n\n    /**\n     * @see PIXI.TextMetrics.experimentalLetterSpacing\n     * @deprecated since 7.1.0\n     */\n    public static get experimentalLetterSpacing()\n    {\n        return TextMetrics.experimentalLetterSpacing;\n    }\n    public static set experimentalLetterSpacing(value)\n    {\n        // #if _DEBUG\n        utils.deprecation('7.1.0',\n            'Text.experimentalLetterSpacing is deprecated, use TextMetrics.experimentalLetterSpacing');\n        // #endif\n\n        TextMetrics.experimentalLetterSpacing = value;\n    }\n\n    /** The canvas element that everything is drawn to. */\n    public canvas: ICanvas;\n    /** The canvas 2d context that everything is drawn with. */\n    public context: ICanvasRenderingContext2D;\n    public localStyleID: number;\n    public dirty: boolean;\n\n    /**\n     * The resolution / device pixel ratio of the canvas.\n     *\n     * This is set to automatically match the renderer resolution by default, but can be overridden by setting manually.\n     * @default PIXI.settings.RESOLUTION\n     */\n    _resolution: number;\n    _autoResolution: boolean;\n\n    /**\n     * Private tracker for the current text.\n     * @private\n     */\n    protected _text: string;\n\n    /**\n     * Private tracker for the current font.\n     * @private\n     */\n    protected _font: string;\n\n    /**\n     * Private tracker for the current style.\n     * @private\n     */\n    protected _style: TextStyle;\n\n    /**\n     * Private listener to track style changes.\n     * @private\n     */\n    protected _styleListener: () => void;\n\n    /**\n     * Keep track if this Text object created it's own canvas\n     * element (`true`) or uses the constructor argument (`false`).\n     * Used to workaround a GC issues with Safari < 13 when\n     * destroying Text. See `destroy` for more info.\n     */\n    private _ownCanvas: boolean;\n\n    /**\n     * @param text - The string that you would like the text to display\n     * @param style - The style parameters\n     * @param canvas - The canvas element for drawing text\n     */\n    constructor(text?: string | number, style?: Partial<ITextStyle> | TextStyle, canvas?: ICanvas)\n    {\n        let ownCanvas = false;\n\n        if (!canvas)\n        {\n            canvas = settings.ADAPTER.createCanvas();\n            ownCanvas = true;\n        }\n\n        canvas.width = 3;\n        canvas.height = 3;\n\n        const texture = Texture.from(canvas);\n\n        texture.orig = new Rectangle();\n        texture.trim = new Rectangle();\n\n        super(texture);\n\n        this._ownCanvas = ownCanvas;\n        this.canvas = canvas;\n        this.context = canvas.getContext('2d', {\n            // required for trimming to work without warnings\n            willReadFrequently: true,\n        });\n\n        this._resolution = Text.defaultResolution ?? settings.RESOLUTION;\n        this._autoResolution = Text.defaultAutoResolution;\n        this._text = null;\n        this._style = null;\n        this._styleListener = null;\n        this._font = '';\n\n        this.text = text;\n        this.style = style;\n\n        this.localStyleID = -1;\n    }\n\n    /**\n     * Renders text to its canvas, and updates its texture.\n     *\n     * By default this is used internally to ensure the texture is correct before rendering,\n     * but it can be used called externally, for example from this class to 'pre-generate' the texture from a piece of text,\n     * and then shared across multiple Sprites.\n     * @param respectDirty - Whether to abort updating the text if the Text isn't dirty and the function is called.\n     */\n    public updateText(respectDirty: boolean): void\n    {\n        const style = this._style;\n\n        // check if style has changed..\n        if (this.localStyleID !== style.styleID)\n        {\n            this.dirty = true;\n            this.localStyleID = style.styleID;\n        }\n\n        if (!this.dirty && respectDirty)\n        {\n            return;\n        }\n\n        this._font = this._style.toFontString();\n\n        const context = this.context;\n        const measured = TextMetrics.measureText(this._text || ' ', this._style, this._style.wordWrap, this.canvas);\n        const width = measured.width;\n        const height = measured.height;\n        const lines = measured.lines;\n        const lineHeight = measured.lineHeight;\n        const lineWidths = measured.lineWidths;\n        const maxLineWidth = measured.maxLineWidth;\n        const fontProperties = measured.fontProperties;\n\n        this.canvas.width = Math.ceil(Math.ceil((Math.max(1, width) + (style.padding * 2))) * this._resolution);\n        this.canvas.height = Math.ceil(Math.ceil((Math.max(1, height) + (style.padding * 2))) * this._resolution);\n\n        context.scale(this._resolution, this._resolution);\n\n        context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n        context.font = this._font;\n        context.lineWidth = style.strokeThickness;\n        context.textBaseline = style.textBaseline;\n        context.lineJoin = style.lineJoin;\n        context.miterLimit = style.miterLimit;\n\n        let linePositionX: number;\n        let linePositionY: number;\n\n        // require 2 passes if a shadow; the first to draw the drop shadow, the second to draw the text\n        const passesCount = style.dropShadow ? 2 : 1;\n\n        // For v4, we drew text at the colours of the drop shadow underneath the normal text. This gave the correct zIndex,\n        // but features such as alpha and shadowblur did not look right at all, since we were using actual text as a shadow.\n        //\n        // For v5.0.0, we moved over to just use the canvas API for drop shadows, which made them look much nicer and more\n        // visually please, but now because the stroke is drawn and then the fill, drop shadows would appear on both the fill\n        // and the stroke; and fill drop shadows would appear over the top of the stroke.\n        //\n        // For v5.1.1, the new route is to revert to v4 style of drawing text first to get the drop shadows underneath normal\n        // text, but instead drawing text in the correct location, we'll draw it off screen (-paddingY), and then adjust the\n        // drop shadow so only that appears on screen (+paddingY). Now we'll have the correct draw order of the shadow\n        // beneath the text, whilst also having the proper text shadow styling.\n        for (let i = 0; i < passesCount; ++i)\n        {\n            const isShadowPass = style.dropShadow && i === 0;\n            // we only want the drop shadow, so put text way off-screen\n            const dsOffsetText = isShadowPass ? Math.ceil(Math.max(1, height) + (style.padding * 2)) : 0;\n            const dsOffsetShadow = dsOffsetText * this._resolution;\n\n            if (isShadowPass)\n            {\n                // On Safari, text with gradient and drop shadows together do not position correctly\n                // if the scale of the canvas is not 1: https://bugs.webkit.org/show_bug.cgi?id=197689\n                // Therefore we'll set the styles to be a plain black whilst generating this drop shadow\n                context.fillStyle = 'black';\n                context.strokeStyle = 'black';\n\n                const dropShadowColor = style.dropShadowColor;\n                const dropShadowBlur = style.dropShadowBlur * this._resolution;\n                const dropShadowDistance = style.dropShadowDistance * this._resolution;\n\n                context.shadowColor = Color.shared\n                    .setValue(dropShadowColor)\n                    .setAlpha(style.dropShadowAlpha)\n                    .toRgbaString();\n                context.shadowBlur = dropShadowBlur;\n                context.shadowOffsetX = Math.cos(style.dropShadowAngle) * dropShadowDistance;\n                context.shadowOffsetY = (Math.sin(style.dropShadowAngle) * dropShadowDistance) + dsOffsetShadow;\n            }\n            else\n            {\n                // set canvas text styles\n                context.fillStyle = this._generateFillStyle(style, lines, measured);\n                // TODO: Can't have different types for getter and setter. The getter shouldn't have the number type as\n                //       the setter converts to string. See this thread for more details:\n                //       https://github.com/microsoft/TypeScript/issues/2521\n                context.strokeStyle = style.stroke as string;\n\n                context.shadowColor = 'black';\n                context.shadowBlur = 0;\n                context.shadowOffsetX = 0;\n                context.shadowOffsetY = 0;\n            }\n\n            let linePositionYShift = (lineHeight - fontProperties.fontSize) / 2;\n\n            if (lineHeight - fontProperties.fontSize < 0)\n            {\n                linePositionYShift = 0;\n            }\n\n            // draw lines line by line\n            for (let i = 0; i < lines.length; i++)\n            {\n                linePositionX = style.strokeThickness / 2;\n                linePositionY = ((style.strokeThickness / 2) + (i * lineHeight)) + fontProperties.ascent\n                    + linePositionYShift;\n\n                if (style.align === 'right')\n                {\n                    linePositionX += maxLineWidth - lineWidths[i];\n                }\n                else if (style.align === 'center')\n                {\n                    linePositionX += (maxLineWidth - lineWidths[i]) / 2;\n                }\n\n                if (style.stroke && style.strokeThickness)\n                {\n                    this.drawLetterSpacing(\n                        lines[i],\n                        linePositionX + style.padding,\n                        linePositionY + style.padding - dsOffsetText,\n                        true\n                    );\n                }\n\n                if (style.fill)\n                {\n                    this.drawLetterSpacing(\n                        lines[i],\n                        linePositionX + style.padding,\n                        linePositionY + style.padding - dsOffsetText\n                    );\n                }\n            }\n        }\n\n        this.updateTexture();\n    }\n\n    /**\n     * Render the text with letter-spacing.\n     * @param text - The text to draw\n     * @param x - Horizontal position to draw the text\n     * @param y - Vertical position to draw the text\n     * @param isStroke - Is this drawing for the outside stroke of the\n     *  text? If not, it's for the inside fill\n     */\n    private drawLetterSpacing(text: string, x: number, y: number, isStroke = false): void\n    {\n        const style = this._style;\n\n        // letterSpacing of 0 means normal\n        const letterSpacing = style.letterSpacing;\n\n        let useExperimentalLetterSpacing = false;\n\n        if (TextMetrics.experimentalLetterSpacingSupported)\n        {\n            if (TextMetrics.experimentalLetterSpacing)\n            {\n                this.context.letterSpacing = `${letterSpacing}px`;\n                this.context.textLetterSpacing = `${letterSpacing}px`;\n                useExperimentalLetterSpacing = true;\n            }\n            else\n            {\n                this.context.letterSpacing = '0px';\n                this.context.textLetterSpacing = '0px';\n            }\n        }\n\n        if (letterSpacing === 0 || useExperimentalLetterSpacing)\n        {\n            if (isStroke)\n            {\n                this.context.strokeText(text, x, y);\n            }\n            else\n            {\n                this.context.fillText(text, x, y);\n            }\n\n            return;\n        }\n\n        let currentPosition = x;\n\n        const stringArray = TextMetrics.graphemeSegmenter(text);\n        let previousWidth = this.context.measureText(text).width;\n        let currentWidth = 0;\n\n        for (let i = 0; i < stringArray.length; ++i)\n        {\n            const currentChar = stringArray[i];\n\n            if (isStroke)\n            {\n                this.context.strokeText(currentChar, currentPosition, y);\n            }\n            else\n            {\n                this.context.fillText(currentChar, currentPosition, y);\n            }\n            let textStr = '';\n\n            for (let j = i + 1; j < stringArray.length; ++j)\n            {\n                textStr += stringArray[j];\n            }\n            currentWidth = this.context.measureText(textStr).width;\n            currentPosition += previousWidth - currentWidth + letterSpacing;\n            previousWidth = currentWidth;\n        }\n    }\n\n    /** Updates texture size based on canvas size. */\n    private updateTexture(): void\n    {\n        const canvas = this.canvas;\n\n        if (this._style.trim)\n        {\n            const trimmed = utils.trimCanvas(canvas);\n\n            if (trimmed.data)\n            {\n                canvas.width = trimmed.width;\n                canvas.height = trimmed.height;\n                this.context.putImageData(trimmed.data, 0, 0);\n            }\n        }\n\n        const texture = this._texture;\n        const style = this._style;\n        const padding = style.trim ? 0 : style.padding;\n        const baseTexture = texture.baseTexture;\n\n        texture.trim.width = texture._frame.width = canvas.width / this._resolution;\n        texture.trim.height = texture._frame.height = canvas.height / this._resolution;\n        texture.trim.x = -padding;\n        texture.trim.y = -padding;\n\n        texture.orig.width = texture._frame.width - (padding * 2);\n        texture.orig.height = texture._frame.height - (padding * 2);\n\n        // call sprite onTextureUpdate to update scale if _width or _height were set\n        this._onTextureUpdate();\n\n        baseTexture.setRealSize(canvas.width, canvas.height, this._resolution);\n\n        texture.updateUvs();\n\n        this.dirty = false;\n    }\n\n    /**\n     * Renders the object using the WebGL renderer\n     * @param renderer - The renderer\n     */\n    protected _render(renderer: Renderer): void\n    {\n        if (this._autoResolution && this._resolution !== renderer.resolution)\n        {\n            this._resolution = renderer.resolution;\n            this.dirty = true;\n        }\n\n        this.updateText(true);\n\n        super._render(renderer);\n    }\n\n    /** Updates the transform on all children of this container for rendering. */\n    public updateTransform(): void\n    {\n        this.updateText(true);\n\n        super.updateTransform();\n    }\n\n    public getBounds(skipUpdate?: boolean, rect?: Rectangle): Rectangle\n    {\n        this.updateText(true);\n\n        if (this._textureID === -1)\n        {\n            // texture was updated: recalculate transforms\n            skipUpdate = false;\n        }\n\n        return super.getBounds(skipUpdate, rect);\n    }\n\n    /**\n     * Gets the local bounds of the text object.\n     * @param rect - The output rectangle.\n     * @returns The bounds.\n     */\n    public getLocalBounds(rect?: Rectangle): Rectangle\n    {\n        this.updateText(true);\n\n        return super.getLocalBounds.call(this, rect);\n    }\n\n    /** Calculates the bounds of the Text as a rectangle. The bounds calculation takes the worldTransform into account. */\n    protected _calculateBounds(): void\n    {\n        this.calculateVertices();\n        // if we have already done this on THIS frame.\n        this._bounds.addQuad(this.vertexData);\n    }\n\n    /**\n     * Generates the fill style. Can automatically generate a gradient based on the fill style being an array\n     * @param style - The style.\n     * @param lines - The lines of text.\n     * @param metrics\n     * @returns The fill style\n     */\n    private _generateFillStyle(\n        style: TextStyle, lines: string[], metrics: TextMetrics\n    ): string | CanvasGradient | CanvasPattern\n    {\n        // TODO: Can't have different types for getter and setter. The getter shouldn't have the number type as\n        //       the setter converts to string. See this thread for more details:\n        //       https://github.com/microsoft/TypeScript/issues/2521\n        const fillStyle: string | string[] | CanvasGradient | CanvasPattern = style.fill as any;\n\n        if (!Array.isArray(fillStyle))\n        {\n            return fillStyle;\n        }\n        else if (fillStyle.length === 1)\n        {\n            return fillStyle[0];\n        }\n\n        // the gradient will be evenly spaced out according to how large the array is.\n        // ['#FF0000', '#00FF00', '#0000FF'] would created stops at 0.25, 0.5 and 0.75\n        let gradient: string[] | CanvasGradient;\n\n        // a dropshadow will enlarge the canvas and result in the gradient being\n        // generated with the incorrect dimensions\n        const dropShadowCorrection = (style.dropShadow) ? style.dropShadowDistance : 0;\n\n        // should also take padding into account, padding can offset the gradient\n        const padding = style.padding || 0;\n\n        const width = (this.canvas.width / this._resolution) - dropShadowCorrection - (padding * 2);\n        const height = (this.canvas.height / this._resolution) - dropShadowCorrection - (padding * 2);\n\n        // make a copy of the style settings, so we can manipulate them later\n        const fill = fillStyle.slice();\n        const fillGradientStops = style.fillGradientStops.slice();\n\n        // wanting to evenly distribute the fills. So an array of 4 colours should give fills of 0.25, 0.5 and 0.75\n        if (!fillGradientStops.length)\n        {\n            const lengthPlus1 = fill.length + 1;\n\n            for (let i = 1; i < lengthPlus1; ++i)\n            {\n                fillGradientStops.push(i / lengthPlus1);\n            }\n        }\n\n        // stop the bleeding of the last gradient on the line above to the top gradient of the this line\n        // by hard defining the first gradient colour at point 0, and last gradient colour at point 1\n        fill.unshift(fillStyle[0]);\n        fillGradientStops.unshift(0);\n\n        fill.push(fillStyle[fillStyle.length - 1]);\n        fillGradientStops.push(1);\n\n        if (style.fillGradientType === TEXT_GRADIENT.LINEAR_VERTICAL)\n        {\n            // start the gradient at the top center of the canvas, and end at the bottom middle of the canvas\n            gradient = this.context.createLinearGradient(width / 2, padding, width / 2, height + padding);\n\n            // we need to repeat the gradient so that each individual line of text has the same vertical gradient effect\n            // ['#FF0000', '#00FF00', '#0000FF'] over 2 lines would create stops at 0.125, 0.25, 0.375, 0.625, 0.75, 0.875\n\n            // Actual height of the text itself, not counting spacing for lineHeight/leading/dropShadow etc\n            const textHeight = metrics.fontProperties.fontSize + style.strokeThickness;\n\n            for (let i = 0; i < lines.length; i++)\n            {\n                const lastLineBottom = (metrics.lineHeight * (i - 1)) + textHeight;\n                const thisLineTop = metrics.lineHeight * i;\n                let thisLineGradientStart = thisLineTop;\n\n                // Handle case where last & this line overlap\n                if (i > 0 && lastLineBottom > thisLineTop)\n                {\n                    thisLineGradientStart = (thisLineTop + lastLineBottom) / 2;\n                }\n\n                const thisLineBottom = thisLineTop + textHeight;\n                const nextLineTop = metrics.lineHeight * (i + 1);\n                let thisLineGradientEnd = thisLineBottom;\n\n                // Handle case where this & next line overlap\n                if (i + 1 < lines.length && nextLineTop < thisLineBottom)\n                {\n                    thisLineGradientEnd = (thisLineBottom + nextLineTop) / 2;\n                }\n\n                // textHeight, but as a 0-1 size in global gradient stop space\n                const gradStopLineHeight = (thisLineGradientEnd - thisLineGradientStart) / height;\n\n                for (let j = 0; j < fill.length; j++)\n                {\n                    // 0-1 stop point for the current line, multiplied to global space afterwards\n                    let lineStop = 0;\n\n                    if (typeof fillGradientStops[j] === 'number')\n                    {\n                        lineStop = fillGradientStops[j];\n                    }\n                    else\n                    {\n                        lineStop = j / fill.length;\n                    }\n\n                    let globalStop = Math.min(1, Math.max(0,\n                        (thisLineGradientStart / height) + (lineStop * gradStopLineHeight)));\n\n                    // There's potential for floating point precision issues at the seams between gradient repeats.\n                    globalStop = Number(globalStop.toFixed(5));\n                    gradient.addColorStop(globalStop, fill[j]);\n                }\n            }\n        }\n        else\n        {\n            // start the gradient at the center left of the canvas, and end at the center right of the canvas\n            gradient = this.context.createLinearGradient(padding, height / 2, width + padding, height / 2);\n\n            // can just evenly space out the gradients in this case, as multiple lines makes no difference\n            // to an even left to right gradient\n            const totalIterations = fill.length + 1;\n            let currentIteration = 1;\n\n            for (let i = 0; i < fill.length; i++)\n            {\n                let stop: number;\n\n                if (typeof fillGradientStops[i] === 'number')\n                {\n                    stop = fillGradientStops[i];\n                }\n                else\n                {\n                    stop = currentIteration / totalIterations;\n                }\n                gradient.addColorStop(stop, fill[i]);\n                currentIteration++;\n            }\n        }\n\n        return gradient;\n    }\n\n    /**\n     * Destroys this text object.\n     *\n     * Note* Unlike a Sprite, a Text object will automatically destroy its baseTexture and texture as\n     * the majority of the time the texture will not be shared with any other Sprites.\n     * @param options - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have their\n     *  destroy method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=true] - Should it destroy the current texture of the sprite as well\n     * @param {boolean} [options.baseTexture=true] - Should it destroy the base texture of the sprite as well\n     */\n    public destroy(options?: IDestroyOptions | boolean): void\n    {\n        if (typeof options === 'boolean')\n        {\n            options = { children: options };\n        }\n\n        options = Object.assign({}, defaultDestroyOptions, options);\n\n        super.destroy(options);\n\n        // set canvas width and height to 0 to workaround memory leak in Safari < 13\n        // https://stackoverflow.com/questions/52532614/total-canvas-memory-use-exceeds-the-maximum-limit-safari-12\n        if (this._ownCanvas)\n        {\n            this.canvas.height = this.canvas.width = 0;\n        }\n\n        // make sure to reset the context and canvas.. dont want this hanging around in memory!\n        this.context = null;\n        this.canvas = null;\n\n        this._style = null;\n    }\n\n    /** The width of the Text, setting this will actually modify the scale to achieve the value set. */\n    get width(): number\n    {\n        this.updateText(true);\n\n        return Math.abs(this.scale.x) * this._texture.orig.width;\n    }\n\n    set width(value: number)\n    {\n        this.updateText(true);\n\n        const s = utils.sign(this.scale.x) || 1;\n\n        this.scale.x = s * value / this._texture.orig.width;\n        this._width = value;\n    }\n\n    /** The height of the Text, setting this will actually modify the scale to achieve the value set. */\n    get height(): number\n    {\n        this.updateText(true);\n\n        return Math.abs(this.scale.y) * this._texture.orig.height;\n    }\n\n    set height(value: number)\n    {\n        this.updateText(true);\n\n        const s = utils.sign(this.scale.y) || 1;\n\n        this.scale.y = s * value / this._texture.orig.height;\n        this._height = value;\n    }\n\n    /**\n     * Set the style of the text.\n     *\n     * Set up an event listener to listen for changes on the style object and mark the text as dirty.\n     *\n     * If setting the `style` can also be partial {@link PIXI.ITextStyle}.\n     */\n    get style(): TextStyle\n    {\n        return this._style;\n    }\n\n    set style(style: TextStyle | Partial<ITextStyle>)\n    {\n        style = style || {};\n\n        if (style instanceof TextStyle)\n        {\n            this._style = style;\n        }\n        else\n        {\n            this._style = new TextStyle(style);\n        }\n\n        this.localStyleID = -1;\n        this.dirty = true;\n    }\n\n    /** Set the copy for the text object. To split a line you can use '\\n'. */\n    get text(): string\n    {\n        return this._text;\n    }\n\n    set text(text: string | number)\n    {\n        text = String(text === null || text === undefined ? '' : text);\n\n        if (this._text === text)\n        {\n            return;\n        }\n        this._text = text;\n        this.dirty = true;\n    }\n\n    /**\n     * The resolution / device pixel ratio of the canvas.\n     *\n     * This is set to automatically match the renderer resolution by default, but can be overridden by setting manually.\n     * @default 1\n     */\n    get resolution(): number\n    {\n        return this._resolution;\n    }\n\n    set resolution(value: number)\n    {\n        this._autoResolution = false;\n\n        if (this._resolution === value)\n        {\n            return;\n        }\n\n        this._resolution = value;\n        this.dirty = true;\n    }\n}\n", "/**\n * CountLimiter limits the number of items handled by a {@link PIXI.BasePrepare} to a specified\n * number of items per frame.\n * @memberof PIXI\n */\nexport class CountLimiter\n{\n    /** The maximum number of items that can be prepared each frame. */\n    public maxItemsPerFrame: number;\n\n    /** The number of items that can be prepared in the current frame. */\n    public itemsLeft: number;\n\n    /**\n     * @param maxItemsPerFrame - The maximum number of items that can be prepared each frame.\n     */\n    constructor(maxItemsPerFrame: number)\n    {\n        this.maxItemsPerFrame = maxItemsPerFrame;\n        this.itemsLeft = 0;\n    }\n\n    /** Resets any counting properties to start fresh on a new frame. */\n    beginFrame(): void\n    {\n        this.itemsLeft = this.maxItemsPerFrame;\n    }\n\n    /**\n     * Checks to see if another item can be uploaded. This should only be called once per item.\n     * @returns If the item is allowed to be uploaded.\n     */\n    allowedToUpload(): boolean\n    {\n        return this.itemsLeft-- > 0;\n    }\n}\n", "import { BaseTexture, Texture, Ticker, UPDATE_PRIORITY } from '@pixi/core';\nimport { Container } from '@pixi/display';\nimport { Text, TextMetrics, TextStyle } from '@pixi/text';\nimport { CountLimiter } from './CountLimiter';\n\nimport type { IRenderer } from '@pixi/core';\nimport type { DisplayObject } from '@pixi/display';\n\ninterface IArrowFunction\n{\n    (): void;\n}\ninterface IUploadHook\n{\n    (helper: IRenderer | BasePrepare, item: IDisplayObjectExtended): boolean;\n}\n\ninterface IFindHook\n{\n    (item: any, queue: Array<any>): boolean;\n}\n\nexport interface IDisplayObjectExtended extends DisplayObject\n{\n    _textures?: Array<Texture>;\n    _texture?: Texture;\n    style?: TextStyle | Partial<TextStyle>;\n}\n\n/**\n * Built-in hook to find multiple textures from objects like AnimatedSprites.\n * @private\n * @param item - Display object to check\n * @param queue - Collection of items to upload\n * @returns If a PIXI.Texture object was found.\n */\nfunction findMultipleBaseTextures(item: IDisplayObjectExtended, queue: Array<any>): boolean\n{\n    let result = false;\n\n    // Objects with multiple textures\n    if (item?._textures?.length)\n    {\n        for (let i = 0; i < item._textures.length; i++)\n        {\n            if (item._textures[i] instanceof Texture)\n            {\n                const baseTexture = item._textures[i].baseTexture;\n\n                if (!queue.includes(baseTexture))\n                {\n                    queue.push(baseTexture);\n                    result = true;\n                }\n            }\n        }\n    }\n\n    return result;\n}\n\n/**\n * Built-in hook to find BaseTextures from Texture.\n * @private\n * @param item - Display object to check\n * @param queue - Collection of items to upload\n * @returns If a PIXI.Texture object was found.\n */\nfunction findBaseTexture(item: Texture, queue: Array<any>): boolean\n{\n    if (item.baseTexture instanceof BaseTexture)\n    {\n        const texture = item.baseTexture;\n\n        if (!queue.includes(texture))\n        {\n            queue.push(texture);\n        }\n\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Built-in hook to find textures from objects.\n * @private\n * @param item - Display object to check\n * @param queue - Collection of items to upload\n * @returns If a PIXI.Texture object was found.\n */\nfunction findTexture(item: IDisplayObjectExtended, queue: Array<any>): boolean\n{\n    if (item._texture && item._texture instanceof Texture)\n    {\n        const texture = item._texture.baseTexture;\n\n        if (!queue.includes(texture))\n        {\n            queue.push(texture);\n        }\n\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Built-in hook to draw PIXI.Text to its texture.\n * @private\n * @param _helper - Not used by this upload handler\n * @param item - Item to check\n * @returns If item was uploaded.\n */\nfunction drawText(_helper: IRenderer | BasePrepare, item: IDisplayObjectExtended): boolean\n{\n    if (item instanceof Text)\n    {\n        // updating text will return early if it is not dirty\n        item.updateText(true);\n\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Built-in hook to calculate a text style for a PIXI.Text object.\n * @private\n * @param _helper - Not used by this upload handler\n * @param item - Item to check\n * @returns If item was uploaded.\n */\nfunction calculateTextStyle(_helper: IRenderer | BasePrepare, item: IDisplayObjectExtended): boolean\n{\n    if (item instanceof TextStyle)\n    {\n        const font = item.toFontString();\n\n        TextMetrics.measureFont(font);\n\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Built-in hook to find Text objects.\n * @private\n * @param item - Display object to check\n * @param queue - Collection of items to upload\n * @returns if a PIXI.Text object was found.\n */\nfunction findText(item: IDisplayObjectExtended, queue: Array<any>): boolean\n{\n    if (item instanceof Text)\n    {\n        // push the text style to prepare it - this can be really expensive\n        if (!queue.includes(item.style))\n        {\n            queue.push(item.style);\n        }\n        // also push the text object so that we can render it (to canvas/texture) if needed\n        if (!queue.includes(item))\n        {\n            queue.push(item);\n        }\n        // also push the Text's texture for upload to GPU\n        const texture = item._texture.baseTexture;\n\n        if (!queue.includes(texture))\n        {\n            queue.push(texture);\n        }\n\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Built-in hook to find TextStyle objects.\n * @private\n * @param item - Display object to check\n * @param queue - Collection of items to upload\n * @returns If a PIXI.TextStyle object was found.\n */\nfunction findTextStyle(item: TextStyle, queue: Array<any>): boolean\n{\n    if (item instanceof TextStyle)\n    {\n        if (!queue.includes(item))\n        {\n            queue.push(item);\n        }\n\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * The prepare manager provides functionality to upload content to the GPU.\n *\n * BasePrepare handles basic queuing functionality and is extended by\n * {@link PIXI.Prepare} and {@link PIXI.CanvasPrepare}\n * to provide preparation capabilities specific to their respective renderers.\n * @example\n * // Create a sprite\n * const sprite = PIXI.Sprite.from('something.png');\n *\n * // Load object into GPU\n * app.renderer.prepare.upload(sprite, () => {\n *     // Texture(s) has been uploaded to GPU\n *     app.stage.addChild(sprite);\n * });\n * @abstract\n * @memberof PIXI\n */\nexport class BasePrepare\n{\n    /**\n     * The default maximum uploads per frame.\n     * @static\n     */\n    public static uploadsPerFrame = 4;\n\n    /**\n     * The limiter to be used to control how quickly items are prepared.\n     * @type {PIXI.CountLimiter|PIXI.TimeLimiter}\n     */\n    private limiter: CountLimiter;\n\n    /** Reference to the renderer. */\n    protected renderer: IRenderer;\n\n    /**\n     * The only real difference between CanvasPrepare and Prepare is what they pass\n     * to upload hooks. That different parameter is stored here.\n     */\n    protected uploadHookHelper: any;\n\n    /** Collection of items to uploads at once. */\n    protected queue: Array<any>;\n\n    /**\n     * Collection of additional hooks for finding assets.\n     * @type {Array<Function>}\n     */\n    public addHooks: Array<any>;\n\n    /**\n     * Collection of additional hooks for processing assets.\n     * @type {Array<Function>}\n     */\n    public uploadHooks: Array<any>;\n\n    /**\n     * Callback to call after completed.\n     * @type {Array<Function>}\n     */\n    public completes: Array<any>;\n\n    /**\n     * If prepare is ticking (running).\n     * @type {boolean}\n     */\n    public ticking: boolean;\n\n    /**\n     * 'bound' call for prepareItems().\n     * @type {Function}\n     */\n    private delayedTick: IArrowFunction;\n\n    /**\n     * @param {PIXI.IRenderer} renderer - A reference to the current renderer\n     */\n    constructor(renderer: IRenderer)\n    {\n        this.limiter = new CountLimiter(BasePrepare.uploadsPerFrame);\n        this.renderer = renderer;\n        this.uploadHookHelper = null;\n        this.queue = [];\n        this.addHooks = [];\n        this.uploadHooks = [];\n        this.completes = [];\n        this.ticking = false;\n        this.delayedTick = (): void =>\n        {\n            // unlikely, but in case we were destroyed between tick() and delayedTick()\n            if (!this.queue)\n            {\n                return;\n            }\n            this.prepareItems();\n        };\n\n        // hooks to find the correct texture\n        this.registerFindHook(findText);\n        this.registerFindHook(findTextStyle);\n        this.registerFindHook(findMultipleBaseTextures);\n        this.registerFindHook(findBaseTexture);\n        this.registerFindHook(findTexture);\n\n        // upload hooks\n        this.registerUploadHook(drawText);\n        this.registerUploadHook(calculateTextStyle);\n    }\n\n    /**\n     * Upload all the textures and graphics to the GPU.\n     * @method PIXI.BasePrepare#upload\n     * @param {PIXI.DisplayObject|PIXI.Container|PIXI.BaseTexture|PIXI.Texture|PIXI.Graphics|PIXI.Text} [item] -\n     *        Container or display object to search for items to upload or the items to upload themselves,\n     *        or optionally ommitted, if items have been added using {@link PIXI.BasePrepare#add `prepare.add`}.\n     */\n    upload(item?: IDisplayObjectExtended | Container | BaseTexture | Texture): Promise<void>\n    {\n        return new Promise((resolve) =>\n        {\n            // If a display object, search for items\n            // that we could upload\n            if (item)\n            {\n                this.add(item as IDisplayObjectExtended | Container | BaseTexture | Texture);\n            }\n\n            // Get the items for upload from the display\n            if (this.queue.length)\n            {\n                this.completes.push(resolve);\n\n                if (!this.ticking)\n                {\n                    this.ticking = true;\n                    Ticker.system.addOnce(this.tick, this, UPDATE_PRIORITY.UTILITY);\n                }\n            }\n            else\n            {\n                resolve();\n            }\n        });\n    }\n\n    /**\n     * Handle tick update\n     * @private\n     */\n    tick(): void\n    {\n        setTimeout(this.delayedTick, 0);\n    }\n\n    /**\n     * Actually prepare items. This is handled outside of the tick because it will take a while\n     * and we do NOT want to block the current animation frame from rendering.\n     * @private\n     */\n    prepareItems(): void\n    {\n        this.limiter.beginFrame();\n        // Upload the graphics\n        while (this.queue.length && this.limiter.allowedToUpload())\n        {\n            const item = this.queue[0];\n            let uploaded = false;\n\n            if (item && !item._destroyed)\n            {\n                for (let i = 0, len = this.uploadHooks.length; i < len; i++)\n                {\n                    if (this.uploadHooks[i](this.uploadHookHelper, item))\n                    {\n                        this.queue.shift();\n                        uploaded = true;\n                        break;\n                    }\n                }\n            }\n\n            if (!uploaded)\n            {\n                this.queue.shift();\n            }\n        }\n\n        // We're finished\n        if (!this.queue.length)\n        {\n            this.ticking = false;\n\n            const completes = this.completes.slice(0);\n\n            this.completes.length = 0;\n\n            for (let i = 0, len = completes.length; i < len; i++)\n            {\n                completes[i]();\n            }\n        }\n        else\n        {\n            // if we are not finished, on the next rAF do this again\n            Ticker.system.addOnce(this.tick, this, UPDATE_PRIORITY.UTILITY);\n        }\n    }\n\n    /**\n     * Adds hooks for finding items.\n     * @param {Function} addHook - Function call that takes two parameters: `item:*, queue:Array`\n     *          function must return `true` if it was able to add item to the queue.\n     * @returns Instance of plugin for chaining.\n     */\n    registerFindHook(addHook: IFindHook): this\n    {\n        if (addHook)\n        {\n            this.addHooks.push(addHook);\n        }\n\n        return this;\n    }\n\n    /**\n     * Adds hooks for uploading items.\n     * @param {Function} uploadHook - Function call that takes two parameters: `prepare:CanvasPrepare, item:*` and\n     *          function must return `true` if it was able to handle upload of item.\n     * @returns Instance of plugin for chaining.\n     */\n    registerUploadHook(uploadHook: IUploadHook): this\n    {\n        if (uploadHook)\n        {\n            this.uploadHooks.push(uploadHook);\n        }\n\n        return this;\n    }\n\n    /**\n     * Manually add an item to the uploading queue.\n     * @param {PIXI.DisplayObject|PIXI.Container|PIXI.BaseTexture|PIXI.Texture|PIXI.Graphics|PIXI.Text|*} item - Object to\n     *        add to the queue\n     * @returns Instance of plugin for chaining.\n     */\n    add(item: IDisplayObjectExtended | Container | BaseTexture | Texture): this\n    {\n        // Add additional hooks for finding elements on special\n        // types of objects that\n        for (let i = 0, len = this.addHooks.length; i < len; i++)\n        {\n            if (this.addHooks[i](item, this.queue))\n            {\n                break;\n            }\n        }\n\n        // Get children recursively\n        if (item instanceof Container)\n        {\n            for (let i = item.children.length - 1; i >= 0; i--)\n            {\n                this.add(item.children[i]);\n            }\n        }\n\n        return this;\n    }\n\n    /** Destroys the plugin, don't use after this. */\n    destroy(): void\n    {\n        if (this.ticking)\n        {\n            Ticker.system.remove(this.tick, this);\n        }\n        this.ticking = false;\n        this.addHooks = null;\n        this.uploadHooks = null;\n        this.renderer = null;\n        this.completes = null;\n        this.queue = null;\n        this.limiter = null;\n        this.uploadHookHelper = null;\n    }\n}\n", "import { settings, utils } from '@pixi/core';\nimport { BasePrepare } from './BasePrepare';\n\nObject.defineProperties(settings, {\n    /**\n     * Default number of uploads per frame using prepare plugin.\n     * @static\n     * @memberof PIXI.settings\n     * @name UPLOADS_PER_FRAME\n     * @deprecated since 7.1.0\n     * @see PIXI.BasePrepare.uploadsPerFrame\n     * @type {number}\n     */\n    UPLOADS_PER_FRAME:\n    {\n        get()\n        {\n            return BasePrepare.uploadsPerFrame;\n        },\n        set(value: number)\n        {\n            // #if _DEBUG\n            utils.deprecation('7.1.0', 'settings.UPLOADS_PER_FRAME is deprecated, use prepare.BasePrepare.uploadsPerFrame');\n            // #endif\n            BasePrepare.uploadsPerFrame = value;\n        },\n    },\n});\n\nexport { settings };\n", "import { BaseTexture, extensions, ExtensionType } from '@pixi/core';\nimport { Graphics } from '@pixi/graphics';\nimport { BasePrepare } from './BasePrepare';\n\nimport type { ExtensionMetadata, IRenderer, ISystem, Renderer } from '@pixi/core';\nimport type { IDisplayObjectExtended } from './BasePrepare';\n\n/**\n * Built-in hook to upload PIXI.Texture objects to the GPU.\n * @private\n * @param renderer - instance of the webgl renderer\n * @param item - Item to check\n * @returns If item was uploaded.\n */\nfunction uploadBaseTextures(renderer: IRenderer | BasePrepare, item: IDisplayObjectExtended | BaseTexture): boolean\n{\n    if (item instanceof BaseTexture)\n    {\n        // if the texture already has a GL texture, then the texture has been prepared or rendered\n        // before now. If the texture changed, then the changer should be calling texture.update() which\n        // reuploads the texture without need for preparing it again\n        if (!item._glTextures[(renderer as Renderer).CONTEXT_UID])\n        {\n            (renderer as Renderer).texture.bind(item);\n        }\n\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Built-in hook to upload PIXI.Graphics to the GPU.\n * @private\n * @param renderer - instance of the webgl renderer\n * @param item - Item to check\n * @returns If item was uploaded.\n */\nfunction uploadGraphics(renderer: IRenderer | BasePrepare, item: IDisplayObjectExtended): boolean\n{\n    if (!(item instanceof Graphics))\n    {\n        return false;\n    }\n\n    const { geometry } = item;\n\n    // update dirty graphics to get batches\n    item.finishPoly();\n    geometry.updateBatches();\n\n    const { batches } = geometry;\n\n    // upload all textures found in styles\n    for (let i = 0; i < batches.length; i++)\n    {\n        const { texture } = batches[i].style;\n\n        if (texture)\n        {\n            uploadBaseTextures(renderer, texture.baseTexture);\n        }\n    }\n\n    // if its not batchable - update vao for particular shader\n    if (!geometry.batchable)\n    {\n        (renderer as Renderer).geometry.bind(geometry, (item as any)._resolveDirectShader((renderer as Renderer)));\n    }\n\n    return true;\n}\n\n/**\n * Built-in hook to find graphics.\n * @private\n * @param item - Display object to check\n * @param queue - Collection of items to upload\n * @returns if a PIXI.Graphics object was found.\n */\nfunction findGraphics(item: IDisplayObjectExtended, queue: Array<any>): boolean\n{\n    if (item instanceof Graphics)\n    {\n        queue.push(item);\n\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * The prepare plugin provides renderer-specific plugins for pre-rendering DisplayObjects. These plugins are useful for\n * asynchronously preparing and uploading to the GPU assets, textures, graphics waiting to be displayed.\n *\n * Do not instantiate this plugin directly. It is available from the `renderer.prepare` property.\n * @example\n * import { Application, Graphics } from 'pixi.js';\n *\n * // Create a new application (prepare will be auto-added to renderer)\n * const app = new Application();\n * document.body.appendChild(app.view);\n *\n * // Don't start rendering right away\n * app.stop();\n *\n * // Create a display object\n * const rect = new Graphics()\n *     .beginFill(0x00ff00)\n *     .drawRect(40, 40, 200, 200);\n *\n * // Add to the stage\n * app.stage.addChild(rect);\n *\n * // Don't start rendering until the graphic is uploaded to the GPU\n * app.renderer.prepare.upload(app.stage, () => {\n *     app.start();\n * });\n * @memberof PIXI\n */\nexport class Prepare extends BasePrepare implements ISystem\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        name: 'prepare',\n        type: ExtensionType.RendererSystem,\n    };\n\n    /**\n     * @param {PIXI.Renderer} renderer - A reference to the current renderer\n     */\n    constructor(renderer: Renderer)\n    {\n        super(renderer);\n\n        this.uploadHookHelper = this.renderer;\n\n        // Add textures and graphics to upload\n        this.registerFindHook(findGraphics);\n        this.registerUploadHook(uploadBaseTextures);\n        this.registerUploadHook(uploadGraphics);\n    }\n}\n\nextensions.add(Prepare);\n", "/**\n * TimeLimiter limits the number of items handled by a {@link PIXI.BasePrepare} to a specified\n * number of milliseconds per frame.\n * @memberof PIXI\n */\nexport class TimeLimiter\n{\n    /** The maximum milliseconds that can be spent preparing items each frame. */\n    public maxMilliseconds: number;\n\n    /**\n     * The start time of the current frame.\n     * @readonly\n     */\n    public frameStart: number;\n\n    /** @param maxMilliseconds - The maximum milliseconds that can be spent preparing items each frame. */\n    constructor(maxMilliseconds: number)\n    {\n        this.maxMilliseconds = maxMilliseconds;\n        this.frameStart = 0;\n    }\n\n    /** Resets any counting properties to start fresh on a new frame. */\n    beginFrame(): void\n    {\n        this.frameStart = Date.now();\n    }\n\n    /**\n     * Checks to see if another item can be uploaded. This should only be called once per item.\n     * @returns - If the item is allowed to be uploaded.\n     */\n    allowedToUpload(): boolean\n    {\n        return Date.now() - this.frameStart < this.maxMilliseconds;\n    }\n}\n", "import { Texture, Ticker, UPDATE_PRIORITY } from '@pixi/core';\nimport { Sprite } from '@pixi/sprite';\n\nimport type { IDestroyOptions } from '@pixi/display';\n\n/**\n * An AnimatedSprite is a simple way to display an animation depicted by a list of textures.\n *\n * ```js\n * import { AnimatedSprite, Texture } from 'pixi.js';\n *\n * const alienImages = [\n *     'image_sequence_01.png',\n *     'image_sequence_02.png',\n *     'image_sequence_03.png',\n *     'image_sequence_04.png',\n * ];\n * const textureArray = [];\n *\n * for (let i = 0; i < 4; i++)\n * {\n *     const texture = Texture.from(alienImages[i]);\n *     textureArray.push(texture);\n * }\n *\n * const animatedSprite = new AnimatedSprite(textureArray);\n * ```\n *\n * The more efficient and simpler way to create an animated sprite is using a {@link PIXI.Spritesheet}\n * containing the animation definitions:\n * @example\n * import { AnimatedSprite, Assets } from 'pixi.js';\n *\n * const sheet = await Assets.load('assets/spritesheet.json');\n * animatedSprite = new AnimatedSprite(sheet.animations['image_sequence']);\n * @memberof PIXI\n */\nexport class AnimatedSprite extends Sprite\n{\n    /**\n     * The speed that the AnimatedSprite will play at. Higher is faster, lower is slower.\n     * @default 1\n     */\n    public animationSpeed: number;\n\n    /**\n     * Whether or not the animate sprite repeats after playing.\n     * @default true\n     */\n    public loop: boolean;\n\n    /**\n     * Update anchor to [Texture's defaultAnchor]{@link PIXI.Texture#defaultAnchor} when frame changes.\n     *\n     * Useful with [sprite sheet animations]{@link PIXI.Spritesheet#animations} created with tools.\n     * Changing anchor for each frame allows to pin sprite origin to certain moving feature\n     * of the frame (e.g. left foot).\n     *\n     * Note: Enabling this will override any previously set `anchor` on each frame change.\n     * @default false\n     */\n    public updateAnchor: boolean;\n\n    /**\n     * User-assigned function to call when an AnimatedSprite finishes playing.\n     * @example\n     * animation.onComplete = () => {\n     *     // Finished!\n     * };\n     */\n    public onComplete?: () => void;\n\n    /**\n     * User-assigned function to call when an AnimatedSprite changes which texture is being rendered.\n     * @example\n     * animation.onFrameChange = () => {\n     *     // Updated!\n     * };\n     */\n    public onFrameChange?: (currentFrame: number) => void;\n\n    /**\n     * User-assigned function to call when `loop` is true, and an AnimatedSprite is played and\n     * loops around to start again.\n     * @example\n     * animation.onLoop = () => {\n     *     // Looped!\n     * };\n     */\n    public onLoop?: () => void;\n\n    private _playing: boolean;\n    private _textures: Texture[];\n    private _durations: number[];\n\n    /**\n     * `true` uses PIXI.Ticker.shared to auto update animation time.\n     * @default true\n     */\n    private _autoUpdate: boolean;\n\n    /**\n     * `true` if the instance is currently connected to PIXI.Ticker.shared to auto update animation time.\n     * @default false\n     */\n    private _isConnectedToTicker: boolean;\n\n    /** Elapsed time since animation has been started, used internally to display current texture. */\n    private _currentTime: number;\n\n    /** The texture index that was displayed last time. */\n    private _previousFrame: number;\n\n    /**\n     * @param textures - An array of {@link PIXI.Texture} or frame\n     *  objects that make up the animation.\n     * @param {boolean} [autoUpdate=true] - Whether to use Ticker.shared to auto update animation time.\n     */\n    constructor(textures: Texture[] | FrameObject[], autoUpdate = true)\n    {\n        super(textures[0] instanceof Texture ? textures[0] : textures[0].texture);\n\n        this._textures = null;\n        this._durations = null;\n        this._autoUpdate = autoUpdate;\n        this._isConnectedToTicker = false;\n\n        this.animationSpeed = 1;\n        this.loop = true;\n        this.updateAnchor = false;\n        this.onComplete = null;\n        this.onFrameChange = null;\n        this.onLoop = null;\n\n        this._currentTime = 0;\n\n        this._playing = false;\n        this._previousFrame = null;\n\n        this.textures = textures;\n    }\n\n    /** Stops the AnimatedSprite. */\n    public stop(): void\n    {\n        if (!this._playing)\n        {\n            return;\n        }\n\n        this._playing = false;\n        if (this._autoUpdate && this._isConnectedToTicker)\n        {\n            Ticker.shared.remove(this.update, this);\n            this._isConnectedToTicker = false;\n        }\n    }\n\n    /** Plays the AnimatedSprite. */\n    public play(): void\n    {\n        if (this._playing)\n        {\n            return;\n        }\n\n        this._playing = true;\n        if (this._autoUpdate && !this._isConnectedToTicker)\n        {\n            Ticker.shared.add(this.update, this, UPDATE_PRIORITY.HIGH);\n            this._isConnectedToTicker = true;\n        }\n    }\n\n    /**\n     * Stops the AnimatedSprite and goes to a specific frame.\n     * @param frameNumber - Frame index to stop at.\n     */\n    public gotoAndStop(frameNumber: number): void\n    {\n        this.stop();\n        this.currentFrame = frameNumber;\n    }\n\n    /**\n     * Goes to a specific frame and begins playing the AnimatedSprite.\n     * @param frameNumber - Frame index to start at.\n     */\n    public gotoAndPlay(frameNumber: number): void\n    {\n        this.currentFrame = frameNumber;\n        this.play();\n    }\n\n    /**\n     * Updates the object transform for rendering.\n     * @param deltaTime - Time since last tick.\n     */\n    update(deltaTime: number): void\n    {\n        if (!this._playing)\n        {\n            return;\n        }\n\n        const elapsed = this.animationSpeed * deltaTime;\n        const previousFrame = this.currentFrame;\n\n        if (this._durations !== null)\n        {\n            let lag = this._currentTime % 1 * this._durations[this.currentFrame];\n\n            lag += elapsed / 60 * 1000;\n\n            while (lag < 0)\n            {\n                this._currentTime--;\n                lag += this._durations[this.currentFrame];\n            }\n\n            const sign = Math.sign(this.animationSpeed * deltaTime);\n\n            this._currentTime = Math.floor(this._currentTime);\n\n            while (lag >= this._durations[this.currentFrame])\n            {\n                lag -= this._durations[this.currentFrame] * sign;\n                this._currentTime += sign;\n            }\n\n            this._currentTime += lag / this._durations[this.currentFrame];\n        }\n        else\n        {\n            this._currentTime += elapsed;\n        }\n\n        if (this._currentTime < 0 && !this.loop)\n        {\n            this.gotoAndStop(0);\n\n            if (this.onComplete)\n            {\n                this.onComplete();\n            }\n        }\n        else if (this._currentTime >= this._textures.length && !this.loop)\n        {\n            this.gotoAndStop(this._textures.length - 1);\n\n            if (this.onComplete)\n            {\n                this.onComplete();\n            }\n        }\n        else if (previousFrame !== this.currentFrame)\n        {\n            if (this.loop && this.onLoop)\n            {\n                if ((this.animationSpeed > 0 && this.currentFrame < previousFrame)\n                    || (this.animationSpeed < 0 && this.currentFrame > previousFrame))\n                {\n                    this.onLoop();\n                }\n            }\n\n            this.updateTexture();\n        }\n    }\n\n    /** Updates the displayed texture to match the current frame index. */\n    private updateTexture(): void\n    {\n        const currentFrame = this.currentFrame;\n\n        if (this._previousFrame === currentFrame)\n        {\n            return;\n        }\n\n        this._previousFrame = currentFrame;\n\n        this._texture = this._textures[currentFrame];\n        this._textureID = -1;\n        this._textureTrimmedID = -1;\n        this._cachedTint = 0xFFFFFF;\n        this.uvs = this._texture._uvs.uvsFloat32;\n\n        if (this.updateAnchor)\n        {\n            this._anchor.copyFrom(this._texture.defaultAnchor);\n        }\n\n        if (this.onFrameChange)\n        {\n            this.onFrameChange(this.currentFrame);\n        }\n    }\n\n    /**\n     * Stops the AnimatedSprite and destroys it.\n     * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n     *  have been set to that value.\n     * @param {boolean} [options.children=false] - If set to true, all the children will have their destroy\n     *      method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=false] - Should it destroy the current texture of the sprite as well.\n     * @param {boolean} [options.baseTexture=false] - Should it destroy the base texture of the sprite as well.\n     */\n    public destroy(options?: IDestroyOptions | boolean): void\n    {\n        this.stop();\n        super.destroy(options);\n\n        this.onComplete = null;\n        this.onFrameChange = null;\n        this.onLoop = null;\n    }\n\n    /**\n     * A short hand way of creating an AnimatedSprite from an array of frame ids.\n     * @param frames - The array of frames ids the AnimatedSprite will use as its texture frames.\n     * @returns - The new animated sprite with the specified frames.\n     */\n    public static fromFrames(frames: string[]): AnimatedSprite\n    {\n        const textures = [];\n\n        for (let i = 0; i < frames.length; ++i)\n        {\n            textures.push(Texture.from(frames[i]));\n        }\n\n        return new AnimatedSprite(textures);\n    }\n\n    /**\n     * A short hand way of creating an AnimatedSprite from an array of image ids.\n     * @param images - The array of image urls the AnimatedSprite will use as its texture frames.\n     * @returns The new animate sprite with the specified images as frames.\n     */\n    public static fromImages(images: string[]): AnimatedSprite\n    {\n        const textures = [];\n\n        for (let i = 0; i < images.length; ++i)\n        {\n            textures.push(Texture.from(images[i]));\n        }\n\n        return new AnimatedSprite(textures);\n    }\n\n    /**\n     * The total number of frames in the AnimatedSprite. This is the same as number of textures\n     * assigned to the AnimatedSprite.\n     * @readonly\n     * @default 0\n     */\n    get totalFrames(): number\n    {\n        return this._textures.length;\n    }\n\n    /** The array of textures used for this AnimatedSprite. */\n    get textures(): Texture[] | FrameObject[]\n    {\n        return this._textures;\n    }\n\n    set textures(value: Texture[] | FrameObject[])\n    {\n        if (value[0] instanceof Texture)\n        {\n            this._textures = value as Texture[];\n            this._durations = null;\n        }\n        else\n        {\n            this._textures = [];\n            this._durations = [];\n\n            for (let i = 0; i < value.length; i++)\n            {\n                this._textures.push((value[i] as FrameObject).texture);\n                this._durations.push((value[i] as FrameObject).time);\n            }\n        }\n        this._previousFrame = null;\n        this.gotoAndStop(0);\n        this.updateTexture();\n    }\n\n    /** The AnimatedSprite's current frame index. */\n    get currentFrame(): number\n    {\n        let currentFrame = Math.floor(this._currentTime) % this._textures.length;\n\n        if (currentFrame < 0)\n        {\n            currentFrame += this._textures.length;\n        }\n\n        return currentFrame;\n    }\n\n    set currentFrame(value: number)\n    {\n        if (value < 0 || value > this.totalFrames - 1)\n        {\n            throw new Error(`[AnimatedSprite]: Invalid frame index value ${value}, `\n                + `expected to be between 0 and totalFrames ${this.totalFrames}.`);\n        }\n\n        const previousFrame = this.currentFrame;\n\n        this._currentTime = value;\n\n        if (previousFrame !== this.currentFrame)\n        {\n            this.updateTexture();\n        }\n    }\n\n    /**\n     * Indicates if the AnimatedSprite is currently playing.\n     * @readonly\n     */\n    get playing(): boolean\n    {\n        return this._playing;\n    }\n\n    /** Whether to use Ticker.shared to auto update animation time. */\n    get autoUpdate(): boolean\n    {\n        return this._autoUpdate;\n    }\n\n    set autoUpdate(value: boolean)\n    {\n        if (value !== this._autoUpdate)\n        {\n            this._autoUpdate = value;\n\n            if (!this._autoUpdate && this._isConnectedToTicker)\n            {\n                Ticker.shared.remove(this.update, this);\n                this._isConnectedToTicker = false;\n            }\n            else if (this._autoUpdate && !this._isConnectedToTicker && this._playing)\n            {\n                Ticker.shared.add(this.update, this);\n                this._isConnectedToTicker = true;\n            }\n        }\n    }\n}\n\n/** @memberof PIXI.AnimatedSprite */\nexport interface FrameObject\n{\n    /** The {@link PIXI.Texture} of the frame. */\n    texture: Texture;\n\n    /** The duration of the frame, in milliseconds. */\n    time: number;\n}\n", "import { Point, Rectangle, Texture, TextureMatrix, Transform } from '@pixi/core';\nimport { Sprite } from '@pixi/sprite';\n\nimport type { IBaseTextureOptions, IPoint, IPointData, ISize, ObservablePoint, Renderer, TextureSource } from '@pixi/core';\nimport type { IDestroyOptions } from '@pixi/display';\n\nconst tempPoint = new Point();\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface TilingSprite extends GlobalMixins.TilingSprite {}\n\n/**\n * A tiling sprite is a fast way of rendering a tiling image.\n * @memberof PIXI\n */\nexport class TilingSprite extends Sprite\n{\n    /** Tile transform */\n    public tileTransform: Transform;\n\n    /** Matrix that is applied to UV to get the coords in Texture normalized space to coords in BaseTexture space. */\n    public uvMatrix: TextureMatrix;\n\n    /**\n     * Flags whether the tiling pattern should originate from the origin instead of the top-left corner in\n     * local space.\n     *\n     * This will make the texture coordinates assigned to each vertex dependent on the value of the anchor. Without\n     * this, the top-left corner always gets the (0, 0) texture coordinate.\n     * @default false\n     */\n    public uvRespectAnchor: boolean;\n\n    /**\n     * Note: The wrap mode of the texture is forced to REPEAT on render if the size of the texture\n     * is a power of two, the texture's wrap mode is CLAMP, and the texture hasn't been bound yet.\n     * @param texture - The texture of the tiling sprite.\n     * @param width - The width of the tiling sprite.\n     * @param height - The height of the tiling sprite.\n     */\n    constructor(texture: Texture, width = 100, height = 100)\n    {\n        super(texture);\n\n        this.tileTransform = new Transform();\n\n        // The width of the tiling sprite\n        this._width = width;\n\n        // The height of the tiling sprite\n        this._height = height;\n\n        this.uvMatrix = this.texture.uvMatrix || new TextureMatrix(texture);\n\n        /**\n         * Plugin that is responsible for rendering this element.\n         * Allows to customize the rendering process without overriding '_render' method.\n         * @default 'tilingSprite'\n         */\n        this.pluginName = 'tilingSprite';\n\n        this.uvRespectAnchor = false;\n    }\n    /**\n     * Changes frame clamping in corresponding textureTransform, shortcut\n     * Change to -0.5 to add a pixel to the edge, recommended for transparent trimmed textures in atlas\n     * @default 0.5\n     * @member {number}\n     */\n    get clampMargin(): number\n    {\n        return this.uvMatrix.clampMargin;\n    }\n\n    set clampMargin(value: number)\n    {\n        this.uvMatrix.clampMargin = value;\n        this.uvMatrix.update(true);\n    }\n\n    /** The scaling of the image that is being tiled. */\n    get tileScale(): ObservablePoint\n    {\n        return this.tileTransform.scale;\n    }\n\n    set tileScale(value: IPointData)\n    {\n        this.tileTransform.scale.copyFrom(value as IPoint);\n    }\n\n    /** The offset of the image that is being tiled. */\n    get tilePosition(): ObservablePoint\n    {\n        return this.tileTransform.position;\n    }\n\n    set tilePosition(value: ObservablePoint)\n    {\n        this.tileTransform.position.copyFrom(value as IPoint);\n    }\n\n    /**\n     * @protected\n     */\n    protected _onTextureUpdate(): void\n    {\n        if (this.uvMatrix)\n        {\n            this.uvMatrix.texture = this._texture;\n        }\n        this._cachedTint = 0xFFFFFF;\n    }\n\n    /**\n     * Renders the object using the WebGL renderer\n     * @param renderer - The renderer\n     */\n    protected _render(renderer: Renderer): void\n    {\n        // tweak our texture temporarily..\n        const texture = this._texture;\n\n        if (!texture || !texture.valid)\n        {\n            return;\n        }\n\n        this.tileTransform.updateLocalTransform();\n        this.uvMatrix.update();\n\n        renderer.batch.setObjectRenderer(renderer.plugins[this.pluginName]);\n        renderer.plugins[this.pluginName].render(this);\n    }\n\n    /** Updates the bounds of the tiling sprite. */\n    protected _calculateBounds(): void\n    {\n        const minX = this._width * -this._anchor._x;\n        const minY = this._height * -this._anchor._y;\n        const maxX = this._width * (1 - this._anchor._x);\n        const maxY = this._height * (1 - this._anchor._y);\n\n        this._bounds.addFrame(this.transform, minX, minY, maxX, maxY);\n    }\n\n    /**\n     * Gets the local bounds of the sprite object.\n     * @param rect - Optional output rectangle.\n     * @returns The bounds.\n     */\n    public getLocalBounds(rect?: Rectangle): Rectangle\n    {\n        // we can do a fast local bounds if the sprite has no children!\n        if (this.children.length === 0)\n        {\n            this._bounds.minX = this._width * -this._anchor._x;\n            this._bounds.minY = this._height * -this._anchor._y;\n            this._bounds.maxX = this._width * (1 - this._anchor._x);\n            this._bounds.maxY = this._height * (1 - this._anchor._y);\n\n            if (!rect)\n            {\n                if (!this._localBoundsRect)\n                {\n                    this._localBoundsRect = new Rectangle();\n                }\n\n                rect = this._localBoundsRect;\n            }\n\n            return this._bounds.getRectangle(rect);\n        }\n\n        return super.getLocalBounds.call(this, rect);\n    }\n\n    /**\n     * Checks if a point is inside this tiling sprite.\n     * @param point - The point to check.\n     * @returns Whether or not the sprite contains the point.\n     */\n    public containsPoint(point: IPointData): boolean\n    {\n        this.worldTransform.applyInverse(point, tempPoint);\n\n        const width = this._width;\n        const height = this._height;\n        const x1 = -width * this.anchor._x;\n\n        if (tempPoint.x >= x1 && tempPoint.x < x1 + width)\n        {\n            const y1 = -height * this.anchor._y;\n\n            if (tempPoint.y >= y1 && tempPoint.y < y1 + height)\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Destroys this sprite and optionally its texture and children\n     * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have their destroy\n     *      method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=false] - Should it destroy the current texture of the sprite as well\n     * @param {boolean} [options.baseTexture=false] - Should it destroy the base texture of the sprite as well\n     */\n    public destroy(options?: IDestroyOptions | boolean): void\n    {\n        super.destroy(options);\n\n        this.tileTransform = null;\n        this.uvMatrix = null;\n    }\n\n    /**\n     * Helper function that creates a new tiling sprite based on the source you provide.\n     * The source can be - frame id, image url, video url, canvas element, video element, base texture\n     * @static\n     * @param {string|PIXI.Texture|HTMLCanvasElement|HTMLVideoElement} source - Source to create texture from\n     * @param {object} options - See {@link PIXI.BaseTexture}'s constructor for options.\n     * @param {number} options.width - required width of the tiling sprite\n     * @param {number} options.height - required height of the tiling sprite\n     * @returns {PIXI.TilingSprite} The newly created texture\n     */\n    static from(source: TextureSource | Texture, options: ISize & IBaseTextureOptions): TilingSprite\n    {\n        const texture = (source instanceof Texture)\n            ? source\n            : Texture.from(source, options);\n\n        return new TilingSprite(\n            texture,\n            options.width,\n            options.height\n        );\n    }\n\n    /** The width of the sprite, setting this will actually modify the scale to achieve the value set. */\n    get width(): number\n    {\n        return this._width;\n    }\n\n    set width(value: number)\n    {\n        this._width = value;\n    }\n\n    /** The height of the TilingSprite, setting this will actually modify the scale to achieve the value set. */\n    get height(): number\n    {\n        return this._height;\n    }\n\n    set height(value: number)\n    {\n        this._height = value;\n    }\n}\n", "var gl2FragmentSrc = \"#version 300 es\\n#define SHADER_NAME Tiling-Sprite-100\\n\\nprecision lowp float;\\n\\nin vec2 vTextureCoord;\\n\\nout vec4 fragmentColor;\\n\\nuniform sampler2D uSampler;\\nuniform vec4 uColor;\\nuniform mat3 uMapCoord;\\nuniform vec4 uClampFrame;\\nuniform vec2 uClampOffset;\\n\\nvoid main(void)\\n{\\n    vec2 coord = vTextureCoord + ceil(uClampOffset - vTextureCoord);\\n    coord = (uMapCoord * vec3(coord, 1.0)).xy;\\n    vec2 unclamped = coord;\\n    coord = clamp(coord, uClampFrame.xy, uClampFrame.zw);\\n\\n    vec4 texSample = texture(uSampler, coord, unclamped == coord ? 0.0f : -32.0f);// lod-bias very negative to force lod 0\\n\\n    fragmentColor = texSample * uColor;\\n}\\n\";\n\nexport { gl2FragmentSrc as default };\n//# sourceMappingURL=sprite-tiling.mjs.map\n", "var gl2VertexSrc = \"#version 300 es\\n#define SHADER_NAME Tiling-Sprite-300\\n\\nprecision lowp float;\\n\\nin vec2 aVertexPosition;\\nin vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\nuniform mat3 translationMatrix;\\nuniform mat3 uTransform;\\n\\nout vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * translationMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n\\n    vTextureCoord = (uTransform * vec3(aTextureCoord, 1.0)).xy;\\n}\\n\";\n\nexport { gl2VertexSrc as default };\n//# sourceMappingURL=sprite-tiling2.mjs.map\n", "var gl1FragmentSrc = \"#version 100\\n#ifdef GL_EXT_shader_texture_lod\\n    #extension GL_EXT_shader_texture_lod : enable\\n#endif\\n#define SHADER_NAME Tiling-Sprite-100\\n\\nprecision lowp float;\\n\\nvarying vec2 vTextureCoord;\\n\\nuniform sampler2D uSampler;\\nuniform vec4 uColor;\\nuniform mat3 uMapCoord;\\nuniform vec4 uClampFrame;\\nuniform vec2 uClampOffset;\\n\\nvoid main(void)\\n{\\n    vec2 coord = vTextureCoord + ceil(uClampOffset - vTextureCoord);\\n    coord = (uMapCoord * vec3(coord, 1.0)).xy;\\n    vec2 unclamped = coord;\\n    coord = clamp(coord, uClampFrame.xy, uClampFrame.zw);\\n\\n    #ifdef GL_EXT_shader_texture_lod\\n        vec4 texSample = unclamped == coord\\n            ? texture2D(uSampler, coord) \\n            : texture2DLodEXT(uSampler, coord, 0);\\n    #else\\n        vec4 texSample = texture2D(uSampler, coord);\\n    #endif\\n\\n    gl_FragColor = texSample * uColor;\\n}\\n\";\n\nexport { gl1FragmentSrc as default };\n//# sourceMappingURL=sprite-tiling-fallback.mjs.map\n", "var gl1VertexSrc = \"#version 100\\n#define SHADER_NAME Tiling-Sprite-100\\n\\nprecision lowp float;\\n\\nattribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\nuniform mat3 translationMatrix;\\nuniform mat3 uTransform;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * translationMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n\\n    vTextureCoord = (uTransform * vec3(aTextureCoord, 1.0)).xy;\\n}\\n\";\n\nexport { gl1VertexSrc as default };\n//# sourceMappingURL=sprite-tiling-fallback2.mjs.map\n", "var fragmentSimpleSrc = \"#version 100\\n#define SHADER_NAME Tiling-Sprite-Simple-100\\n\\nprecision lowp float;\\n\\nvarying vec2 vTextureCoord;\\n\\nuniform sampler2D uSampler;\\nuniform vec4 uColor;\\n\\nvoid main(void)\\n{\\n    vec4 texSample = texture2D(uSampler, vTextureCoord);\\n    gl_FragColor = texSample * uColor;\\n}\\n\";\n\nexport { fragmentSimpleSrc as default };\n//# sourceMappingURL=sprite-tiling-simple.mjs.map\n", "import {\n    Color,\n    extensions,\n    ExtensionType,\n    Matrix,\n    ObjectRenderer,\n    QuadUv,\n    Shader,\n    State,\n    utils,\n    WRAP_MODES\n} from '@pixi/core';\nimport gl2FragmentSrc from './sprite-tiling.frag';\nimport gl2VertexSrc from './sprite-tiling.vert';\nimport gl1FragmentSrc from './sprite-tiling-fallback.frag';\nimport gl1VertexSrc from './sprite-tiling-fallback.vert';\nimport fragmentSimpleSrc from './sprite-tiling-simple.frag';\n\nimport type { ExtensionMetadata, Renderer } from '@pixi/core';\nimport type { TilingSprite } from './TilingSprite';\n\nconst tempMat = new Matrix();\n\n/**\n * WebGL renderer plugin for tiling sprites\n * @class\n * @memberof PIXI\n * @extends PIXI.ObjectRenderer\n */\nexport class TilingSpriteRenderer extends ObjectRenderer\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        name: 'tilingSprite',\n        type: ExtensionType.RendererPlugin,\n    };\n\n    public shader: Shader;\n    public simpleShader: Shader;\n    public quad: QuadUv;\n    public readonly state: State;\n\n    /**\n     * constructor for renderer\n     * @param {PIXI.Renderer} renderer - The renderer this tiling awesomeness works for.\n     */\n    constructor(renderer: Renderer)\n    {\n        super(renderer);\n\n        // WebGL version is not available during initialization!\n        renderer.runners.contextChange.add(this);\n\n        this.quad = new QuadUv();\n\n        /**\n         * The WebGL state in which this renderer will work.\n         * @member {PIXI.State}\n         * @readonly\n         */\n        this.state = State.for2d();\n    }\n\n    /** Creates shaders when context is initialized. */\n    contextChange(): void\n    {\n        const renderer = this.renderer;\n        const uniforms = { globals: renderer.globalUniforms };\n\n        this.simpleShader = Shader.from(gl1VertexSrc, fragmentSimpleSrc, uniforms);\n        this.shader = renderer.context.webGLVersion > 1\n            ? Shader.from(gl2VertexSrc, gl2FragmentSrc, uniforms)\n            : Shader.from(gl1VertexSrc, gl1FragmentSrc, uniforms);\n    }\n\n    /**\n     * @param {PIXI.TilingSprite} ts - tilingSprite to be rendered\n     */\n    public render(ts: TilingSprite): void\n    {\n        const renderer = this.renderer;\n        const quad = this.quad;\n\n        let vertices = quad.vertices;\n\n        vertices[0] = vertices[6] = (ts._width) * -ts.anchor.x;\n        vertices[1] = vertices[3] = ts._height * -ts.anchor.y;\n\n        vertices[2] = vertices[4] = (ts._width) * (1.0 - ts.anchor.x);\n        vertices[5] = vertices[7] = ts._height * (1.0 - ts.anchor.y);\n\n        const anchorX = ts.uvRespectAnchor ? ts.anchor.x : 0;\n        const anchorY = ts.uvRespectAnchor ? ts.anchor.y : 0;\n\n        vertices = quad.uvs;\n\n        vertices[0] = vertices[6] = -anchorX;\n        vertices[1] = vertices[3] = -anchorY;\n\n        vertices[2] = vertices[4] = 1.0 - anchorX;\n        vertices[5] = vertices[7] = 1.0 - anchorY;\n\n        quad.invalidate();\n\n        const tex = ts._texture;\n        const baseTex = tex.baseTexture;\n        const premultiplied = baseTex.alphaMode > 0;\n        const lt = ts.tileTransform.localTransform;\n        const uv = ts.uvMatrix;\n        let isSimple = baseTex.isPowerOfTwo\n            && tex.frame.width === baseTex.width && tex.frame.height === baseTex.height;\n\n        // auto, force repeat wrapMode for big tiling textures\n        if (isSimple)\n        {\n            if (!baseTex._glTextures[renderer.CONTEXT_UID])\n            {\n                if (baseTex.wrapMode === WRAP_MODES.CLAMP)\n                {\n                    baseTex.wrapMode = WRAP_MODES.REPEAT;\n                }\n            }\n            else\n            {\n                isSimple = baseTex.wrapMode !== WRAP_MODES.CLAMP;\n            }\n        }\n\n        const shader = isSimple ? this.simpleShader : this.shader;\n\n        const w = tex.width;\n        const h = tex.height;\n        const W = ts._width;\n        const H = ts._height;\n\n        tempMat.set(lt.a * w / W,\n            lt.b * w / H,\n            lt.c * h / W,\n            lt.d * h / H,\n            lt.tx / W,\n            lt.ty / H);\n\n        // that part is the same as above:\n        // tempMat.identity();\n        // tempMat.scale(tex.width, tex.height);\n        // tempMat.prepend(lt);\n        // tempMat.scale(1.0 / ts._width, 1.0 / ts._height);\n\n        tempMat.invert();\n        if (isSimple)\n        {\n            tempMat.prepend(uv.mapCoord);\n        }\n        else\n        {\n            shader.uniforms.uMapCoord = uv.mapCoord.toArray(true);\n            shader.uniforms.uClampFrame = uv.uClampFrame;\n            shader.uniforms.uClampOffset = uv.uClampOffset;\n        }\n\n        shader.uniforms.uTransform = tempMat.toArray(true);\n        shader.uniforms.uColor = Color.shared\n            .setValue(ts.tint)\n            .premultiply(ts.worldAlpha, premultiplied)\n            .toArray(shader.uniforms.uColor);\n\n        shader.uniforms.translationMatrix = ts.transform.worldTransform.toArray(true);\n        shader.uniforms.uSampler = tex;\n\n        renderer.shader.bind(shader);\n        renderer.geometry.bind(quad);\n\n        this.state.blendMode = utils.correctBlendMode(ts.blendMode, premultiplied);\n        renderer.state.set(this.state);\n        renderer.geometry.draw(this.renderer.gl.TRIANGLES, 6, 0);\n    }\n}\n\nextensions.add(TilingSpriteRenderer);\n", "import { BaseTexture, Rectangle, Texture, utils } from '@pixi/core';\n\nimport type { ImageResource, IPointData, ITextureBorders } from '@pixi/core';\n\n/**\n * Represents the JSON data for a spritesheet atlas.\n * @memberof PIXI\n */\nexport interface ISpritesheetFrameData\n{\n    frame: {\n        x: number;\n        y: number;\n        w: number;\n        h: number;\n    };\n    trimmed?: boolean;\n    rotated?: boolean;\n    sourceSize?: {\n        w: number;\n        h: number;\n    };\n    spriteSourceSize?: {\n        x: number;\n        y: number;\n    };\n    anchor?: IPointData;\n    borders?: ITextureBorders;\n}\n\n/**\n * Atlas format.\n * @memberof PIXI\n */\nexport interface ISpritesheetData\n{\n    frames: utils.Dict<ISpritesheetFrameData>;\n    animations?: utils.Dict<string[]>;\n    meta: {\n        scale: string;\n        // eslint-disable-next-line camelcase\n        related_multi_packs?: string[];\n    };\n}\n\n/**\n * Utility class for maintaining reference to a collection\n * of Textures on a single Spritesheet.\n *\n * To access a sprite sheet from your code you may pass its JSON data file to Pixi's loader:\n *\n * ```js\n * import { Assets } from 'pixi.js';\n *\n * const sheet = await Assets.load('images/spritesheet.json');\n * ```\n *\n * Alternately, you may circumvent the loader by instantiating the Spritesheet directly:\n *\n * ```js\n * import { Spritesheet } from 'pixi.js';\n *\n * const sheet = new Spritesheet(texture, spritesheetData);\n * await sheet.parse();\n * console.log('Spritesheet ready to use!');\n * ```\n *\n * With the `sheet.textures` you can create Sprite objects, and `sheet.animations` can be used to create an AnimatedSprite.\n *\n * Here's an example of a sprite sheet JSON data file:\n * ```json\n * {\n *     \"frames\": {\n *         \"enemy1.png\":\n *         {\n *             \"frame\": {\"x\":103,\"y\":1,\"w\":32,\"h\":32},\n *             \"spriteSourceSize\": {\"x\":0,\"y\":0,\"w\":32,\"h\":32},\n *             \"sourceSize\": {\"w\":32,\"h\":32},\n *             \"anchor\": {\"x\":16,\"y\":16}\n *         },\n *         \"enemy2.png\":\n *         {\n *             \"frame\": {\"x\":103,\"y\":35,\"w\":32,\"h\":32},\n *             \"spriteSourceSize\": {\"x\":0,\"y\":0,\"w\":32,\"h\":32},\n *             \"sourceSize\": {\"w\":32,\"h\":32},\n *             \"anchor\": {\"x\":16,\"y\":16}\n *         },\n *         \"button.png\":\n *         {\n *             \"frame\": {\"x\":1,\"y\":1,\"w\":100,\"h\":100},\n *             \"spriteSourceSize\": {\"x\":0,\"y\":0,\"w\":100,\"h\":100},\n *             \"sourceSize\": {\"w\":100,\"h\":100},\n *             \"anchor\": {\"x\":0,\"y\":0},\n *             \"borders\": {\"left\":35,\"top\":35,\"right\":35,\"bottom\":35}\n *         }\n *     },\n *\n *     \"animations\": {\n *         \"enemy\": [\"enemy1.png\",\"enemy2.png\"]\n *     },\n *\n *     \"meta\": {\n *         \"image\": \"sheet.png\",\n *         \"format\": \"RGBA8888\",\n *         \"size\": {\"w\":136,\"h\":102},\n *         \"scale\": \"1\"\n *     }\n * }\n * ```\n * Sprite sheets can be packed using tools like {@link https://codeandweb.com/texturepacker|TexturePacker},\n * {@link https://renderhjs.net/shoebox/|Shoebox} or {@link https://github.com/krzysztof-o/spritesheet.js|Spritesheet.js}.\n * Default anchor points (see {@link PIXI.Texture#defaultAnchor}), default 9-slice borders\n * (see {@link PIXI.Texture#defaultBorders}) and grouping of animation sprites are currently only\n * supported by TexturePacker.\n * @memberof PIXI\n */\nexport class Spritesheet\n{\n    /** The maximum number of Textures to build per process. */\n    static readonly BATCH_SIZE = 1000;\n\n    /** For multi-packed spritesheets, this contains a reference to all the other spritesheets it depends on. */\n    public linkedSheets: Spritesheet[] = [];\n\n    /** Reference to ths source texture. */\n    public baseTexture: BaseTexture;\n\n    /**\n     * A map containing all textures of the sprite sheet.\n     * Can be used to create a {@link PIXI.Sprite|Sprite}:\n     * @example\n     * import { Sprite } from 'pixi.js';\n     *\n     * new Sprite(sheet.textures['image.png']);\n     */\n    public textures: utils.Dict<Texture>;\n\n    /**\n     * A map containing the textures for each animation.\n     * Can be used to create an {@link PIXI.AnimatedSprite|AnimatedSprite}:\n     * @example\n     * import { AnimatedSprite } from 'pixi.js';\n     *\n     * new AnimatedSprite(sheet.animations['anim_name']);\n     */\n    public animations: utils.Dict<Texture[]>;\n\n    /**\n     * Reference to the original JSON data.\n     * @type {object}\n     */\n    public data: ISpritesheetData;\n\n    /** The resolution of the spritesheet. */\n    public resolution: number;\n\n    /**\n     * Reference to original source image from the Loader. This reference is retained so we\n     * can destroy the Texture later on. It is never used internally.\n     */\n    private _texture: Texture;\n\n    /**\n     * Map of spritesheet frames.\n     * @type {object}\n     */\n    private _frames: utils.Dict<ISpritesheetFrameData>;\n\n    /** Collection of frame names. */\n    private _frameKeys: string[];\n\n    /** Current batch index being processed. */\n    private _batchIndex: number;\n\n    /**\n     * Callback when parse is completed.\n     * @type {Function}\n     */\n    private _callback: (textures: utils.Dict<Texture>) => void;\n\n    /**\n     * @param texture - Reference to the source BaseTexture object.\n     * @param {object} data - Spritesheet image data.\n     * @param resolutionFilename - The filename to consider when determining\n     *        the resolution of the spritesheet. If not provided, the imageUrl will\n     *        be used on the BaseTexture.\n     */\n    constructor(texture: BaseTexture | Texture, data: ISpritesheetData, resolutionFilename: string = null)\n    {\n        this._texture = texture instanceof Texture ? texture : null;\n        this.baseTexture = texture instanceof BaseTexture ? texture : this._texture.baseTexture;\n        this.textures = {};\n        this.animations = {};\n        this.data = data;\n\n        const resource = this.baseTexture.resource as ImageResource;\n\n        this.resolution = this._updateResolution(resolutionFilename || (resource ? resource.url : null));\n        this._frames = this.data.frames;\n        this._frameKeys = Object.keys(this._frames);\n        this._batchIndex = 0;\n        this._callback = null;\n    }\n\n    /**\n     * Generate the resolution from the filename or fallback\n     * to the meta.scale field of the JSON data.\n     * @param resolutionFilename - The filename to use for resolving\n     *        the default resolution.\n     * @returns Resolution to use for spritesheet.\n     */\n    private _updateResolution(resolutionFilename: string = null): number\n    {\n        const { scale } = this.data.meta;\n\n        // Use a defaultValue of `null` to check if a url-based resolution is set\n        let resolution = utils.getResolutionOfUrl(resolutionFilename, null);\n\n        // No resolution found via URL\n        if (resolution === null)\n        {\n            // Use the scale value or default to 1\n            resolution = parseFloat(scale ?? '1');\n        }\n\n        // For non-1 resolutions, update baseTexture\n        if (resolution !== 1)\n        {\n            this.baseTexture.setResolution(resolution);\n        }\n\n        return resolution;\n    }\n\n    /**\n     * Parser spritesheet from loaded data. This is done asynchronously\n     * to prevent creating too many Texture within a single process.\n     * @method PIXI.Spritesheet#parse\n     */\n    public parse(): Promise<utils.Dict<Texture>>\n    {\n        return new Promise((resolve) =>\n        {\n            this._callback = resolve;\n            this._batchIndex = 0;\n\n            if (this._frameKeys.length <= Spritesheet.BATCH_SIZE)\n            {\n                this._processFrames(0);\n                this._processAnimations();\n                this._parseComplete();\n            }\n            else\n            {\n                this._nextBatch();\n            }\n        });\n    }\n\n    /**\n     * Process a batch of frames\n     * @param initialFrameIndex - The index of frame to start.\n     */\n    private _processFrames(initialFrameIndex: number): void\n    {\n        let frameIndex = initialFrameIndex;\n        const maxFrames = Spritesheet.BATCH_SIZE;\n\n        while (frameIndex - initialFrameIndex < maxFrames && frameIndex < this._frameKeys.length)\n        {\n            const i = this._frameKeys[frameIndex];\n            const data = this._frames[i];\n            const rect = data.frame;\n\n            if (rect)\n            {\n                let frame = null;\n                let trim = null;\n                const sourceSize = data.trimmed !== false && data.sourceSize\n                    ? data.sourceSize : data.frame;\n\n                const orig = new Rectangle(\n                    0,\n                    0,\n                    Math.floor(sourceSize.w) / this.resolution,\n                    Math.floor(sourceSize.h) / this.resolution\n                );\n\n                if (data.rotated)\n                {\n                    frame = new Rectangle(\n                        Math.floor(rect.x) / this.resolution,\n                        Math.floor(rect.y) / this.resolution,\n                        Math.floor(rect.h) / this.resolution,\n                        Math.floor(rect.w) / this.resolution\n                    );\n                }\n                else\n                {\n                    frame = new Rectangle(\n                        Math.floor(rect.x) / this.resolution,\n                        Math.floor(rect.y) / this.resolution,\n                        Math.floor(rect.w) / this.resolution,\n                        Math.floor(rect.h) / this.resolution\n                    );\n                }\n\n                //  Check to see if the sprite is trimmed\n                if (data.trimmed !== false && data.spriteSourceSize)\n                {\n                    trim = new Rectangle(\n                        Math.floor(data.spriteSourceSize.x) / this.resolution,\n                        Math.floor(data.spriteSourceSize.y) / this.resolution,\n                        Math.floor(rect.w) / this.resolution,\n                        Math.floor(rect.h) / this.resolution\n                    );\n                }\n\n                this.textures[i] = new Texture(\n                    this.baseTexture,\n                    frame,\n                    orig,\n                    trim,\n                    data.rotated ? 2 : 0,\n                    data.anchor,\n                    data.borders\n                );\n\n                // lets also add the frame to pixi's global cache for 'from' and 'fromLoader' functions\n                Texture.addToCache(this.textures[i], i);\n            }\n\n            frameIndex++;\n        }\n    }\n\n    /** Parse animations config. */\n    private _processAnimations(): void\n    {\n        const animations = this.data.animations || {};\n\n        for (const animName in animations)\n        {\n            this.animations[animName] = [];\n            for (let i = 0; i < animations[animName].length; i++)\n            {\n                const frameName = animations[animName][i];\n\n                this.animations[animName].push(this.textures[frameName]);\n            }\n        }\n    }\n\n    /** The parse has completed. */\n    private _parseComplete(): void\n    {\n        const callback = this._callback;\n\n        this._callback = null;\n        this._batchIndex = 0;\n        callback.call(this, this.textures);\n    }\n\n    /** Begin the next batch of textures. */\n    private _nextBatch(): void\n    {\n        this._processFrames(this._batchIndex * Spritesheet.BATCH_SIZE);\n        this._batchIndex++;\n        setTimeout(() =>\n        {\n            if (this._batchIndex * Spritesheet.BATCH_SIZE < this._frameKeys.length)\n            {\n                this._nextBatch();\n            }\n            else\n            {\n                this._processAnimations();\n                this._parseComplete();\n            }\n        }, 0);\n    }\n\n    /**\n     * Destroy Spritesheet and don't use after this.\n     * @param {boolean} [destroyBase=false] - Whether to destroy the base texture as well\n     */\n    public destroy(destroyBase = false): void\n    {\n        for (const i in this.textures)\n        {\n            this.textures[i].destroy();\n        }\n        this._frames = null;\n        this._frameKeys = null;\n        this.data = null;\n        this.textures = null;\n        if (destroyBase)\n        {\n            this._texture?.destroy();\n            this.baseTexture.destroy();\n        }\n        this._texture = null;\n        this.baseTexture = null;\n        this.linkedSheets = [];\n    }\n}\n", "import { copySearchParams, LoaderParserPriority } from '@pixi/assets';\nimport { extensions, ExtensionType, settings, utils } from '@pixi/core';\nimport { Spritesheet } from './Spritesheet';\n\nimport type { AssetExtension, LoadAsset, Loader, ResolveAsset } from '@pixi/assets';\nimport type { Texture } from '@pixi/core';\nimport type { ISpritesheetData } from './Spritesheet';\n\nexport interface SpriteSheetJson extends ISpritesheetData\n{\n    meta: {\n        image: string;\n        scale: string;\n        // eslint-disable-next-line camelcase\n        related_multi_packs?: string[];\n    };\n}\n\nconst validImages = ['jpg', 'png', 'jpeg', 'avif', 'webp'];\n\nfunction getCacheableAssets(keys: string[], asset: Spritesheet, ignoreMultiPack: boolean)\n{\n    const out: Record<string, any> = {};\n\n    keys.forEach((key: string) =>\n    {\n        out[key] = asset;\n    });\n\n    Object.keys(asset.textures).forEach((key) =>\n    {\n        out[key] = asset.textures[key];\n    });\n\n    if (!ignoreMultiPack)\n    {\n        const basePath = utils.path.dirname(keys[0]);\n\n        asset.linkedSheets.forEach((item: Spritesheet, i) =>\n        {\n            const out2 = getCacheableAssets([`${basePath}/${asset.data.meta.related_multi_packs[i]}`], item, true);\n\n            Object.assign(out, out2);\n        });\n    }\n\n    return out;\n}\n\n/**\n * Asset extension for loading spritesheets.\n * @memberof PIXI\n * @type {PIXI.AssetExtension}\n */\nexport const spritesheetAsset = {\n    extension: ExtensionType.Asset,\n    /** Handle the caching of the related Spritesheet Textures */\n    cache: {\n        test: (asset: Spritesheet) => asset instanceof Spritesheet,\n        getCacheableAssets: (keys: string[], asset: Spritesheet) => getCacheableAssets(keys, asset, false),\n    },\n    /** Resolve the the resolution of the asset. */\n    resolver: {\n        test: (value: string): boolean =>\n        {\n            const tempURL = value.split('?')[0];\n            const split = tempURL.split('.');\n            const extension = split.pop();\n            const format = split.pop();\n\n            return extension === 'json' && validImages.includes(format);\n        },\n        parse: (value: string): ResolveAsset =>\n        {\n            const split = value.split('.');\n\n            return {\n                resolution: parseFloat(settings.RETINA_PREFIX.exec(value)?.[1] ?? '1'),\n                format: split[split.length - 2],\n                src: value,\n            };\n        },\n    },\n    /**\n     * Loader plugin that parses sprite sheets!\n     * once the JSON has been loaded this checks to see if the JSON is spritesheet data.\n     * If it is, we load the spritesheets image and parse the data into PIXI.Spritesheet\n     * All textures in the sprite sheet are then added to the cache\n     * @ignore\n     */\n    loader: {\n        name: 'spritesheetLoader',\n\n        extension: {\n            type: ExtensionType.LoadParser,\n            priority: LoaderParserPriority.Normal,\n        },\n\n        async testParse(asset: SpriteSheetJson, options: LoadAsset): Promise<boolean>\n        {\n            return (utils.path.extname(options.src).toLowerCase() === '.json' && !!asset.frames);\n        },\n\n        async parse(asset: SpriteSheetJson, options: LoadAsset, loader: Loader): Promise<Spritesheet>\n        {\n            let basePath = utils.path.dirname(options.src);\n\n            if (basePath && basePath.lastIndexOf('/') !== (basePath.length - 1))\n            {\n                basePath += '/';\n            }\n\n            let imagePath = basePath + asset.meta.image;\n\n            imagePath = copySearchParams(imagePath, options.src);\n\n            const assets = await loader.load<Texture>([imagePath]);\n            const texture = assets[imagePath];\n            const spritesheet = new Spritesheet(\n                texture.baseTexture,\n                asset,\n                options.src,\n            );\n\n            await spritesheet.parse();\n\n            // Check and add the multi atlas\n            // Heavily influenced and based on https://github.com/rocket-ua/pixi-tps-loader/blob/master/src/ResourceLoader.js\n            // eslint-disable-next-line camelcase\n            const multiPacks = asset?.meta?.related_multi_packs;\n\n            if (Array.isArray(multiPacks))\n            {\n                const promises: Promise<Spritesheet>[] = [];\n\n                for (const item of multiPacks)\n                {\n                    if (typeof item !== 'string')\n                    {\n                        continue;\n                    }\n\n                    let itemUrl = basePath + item;\n\n                    // Check if the file wasn't already added as multipack\n                    if (options.data?.ignoreMultiPack)\n                    {\n                        continue;\n                    }\n\n                    itemUrl = copySearchParams(itemUrl, options.src);\n\n                    promises.push(loader.load<Spritesheet>({\n                        src: itemUrl,\n                        data: {\n                            ignoreMultiPack: true,\n                        }\n                    }));\n                }\n\n                const res = await Promise.all(promises);\n\n                spritesheet.linkedSheets = res;\n                res.forEach((item) =>\n                {\n                    item.linkedSheets = [spritesheet].concat(spritesheet.linkedSheets.filter((sp) => (sp !== item)));\n                });\n            }\n\n            return spritesheet;\n        },\n\n        unload(spritesheet: Spritesheet)\n        {\n            spritesheet.destroy(true);\n        },\n    },\n} as AssetExtension<Spritesheet | SpriteSheetJson>;\n\nextensions.add(spritesheetAsset);\n", "/* eslint-disable max-len */\n\n/**\n * Normalized parsed data from .fnt files.\n * @memberof PIXI\n */\nexport class BitmapFontData\n{\n    /** @readonly */\n    public info: IBitmapFontDataInfo[];\n\n    /** @readonly */\n    public common: IBitmapFontDataCommon[];\n\n    /** @readonly */\n    public page: IBitmapFontDataPage[];\n\n    /** @readonly */\n    public char: IBitmapFontDataChar[];\n\n    /** @readonly */\n    public kerning: IBitmapFontDataKerning[];\n\n    /** @readonly */\n    public distanceField: IBitmapFontDataDistanceField[];\n\n    constructor()\n    {\n        this.info = [];\n        this.common = [];\n        this.page = [];\n        this.char = [];\n        this.kerning = [];\n        this.distanceField = [];\n    }\n}\n\n/** @memberof PIXI */\nexport interface IBitmapFontDataInfo\n{\n    /** Font face */\n    face: string;\n\n    /** Font size */\n    size: number;\n}\n\n/** @memberof PIXI */\nexport interface IBitmapFontDataCommon\n{\n    /** Line height, in pixels. */\n    lineHeight: number;\n}\n\n/** @memberof PIXI */\nexport interface IBitmapFontDataPage\n{\n    /** Unique id for bitmap texture */\n    id: number;\n\n    /** File name */\n    file: string;\n}\n\n/** @memberof PIXI */\nexport interface IBitmapFontDataChar\n{\n    /** Unique id of character */\n    id: number;\n\n    /** {@link PIXI.IBitmapFontDataPage} id */\n    page: number;\n\n    /** x-position of character in page. */\n    x: number;\n\n    /** y-position of character in page. */\n    y: number;\n\n    /** Width of character in page. */\n    width: number;\n\n    /** Height of character in page. */\n    height: number;\n\n    /** x-offset to apply when rendering character */\n    xoffset: number;\n\n    /** y-offset to apply when rendering character. */\n    yoffset: number;\n\n    /** Advancement to apply to next character. */\n    xadvance: number;\n}\n\n/** @memberof PIXI */\nexport interface IBitmapFontDataKerning\n{\n    /** First character of pair */\n    first: number;\n\n    /** Second character of pair */\n    second: number;\n\n    /** x-offset to apply between first & second characters when they are next to each other. */\n    amount: number;\n}\n\n/** @memberof PIXI */\nexport interface IBitmapFontDataDistanceField\n{\n    /** Type of distance field */\n    fieldType: string;\n\n    /** Range of distance */\n    distanceRange: number;\n}\n", "import { BitmapFontData } from '../BitmapFontData';\n\n/**\n * Internal data format used to convert to BitmapFontData.\n * @private\n */\nexport interface IBitmapFontRawData\n{\n    info: {\n        face: string;\n        size: string;\n    }[];\n    common: { lineHeight: string }[];\n    page: {\n        id: string;\n        file: string;\n    }[];\n    chars: {\n        count: number;\n    }[];\n    char: {\n        id: string;\n        page: string;\n        x: string;\n        y: string;\n        width: string;\n        height: string;\n        xoffset: string;\n        yoffset: string;\n        xadvance: string;\n    }[];\n    kernings?: {\n        count: number;\n    }[];\n    kerning?: {\n        first: string;\n        second: string;\n        amount: string;\n    }[];\n    distanceField?: {\n        fieldType: string;\n        distanceRange: string;\n    }[]\n}\n\n/**\n * BitmapFont format that's Text-based.\n * @private\n */\nexport class TextFormat\n{\n    /**\n     * Check if resource refers to txt font data.\n     * @param data\n     * @returns - True if resource could be treated as font data, false otherwise.\n     */\n    static test(data: unknown): boolean\n    {\n        return typeof data === 'string' && data.startsWith('info face=');\n    }\n\n    /**\n     * Convert text font data to a javascript object.\n     * @param txt - Raw string data to be converted\n     * @returns - Parsed font data\n     */\n    static parse(txt: string): BitmapFontData\n    {\n        // Retrieve data item\n        const items = txt.match(/^[a-z]+\\s+.+$/gm);\n        const rawData: IBitmapFontRawData = {\n            info: [],\n            common: [],\n            page: [],\n            char: [],\n            chars: [],\n            kerning: [],\n            kernings: [],\n            distanceField: [],\n        };\n\n        for (const i in items)\n        {\n            // Extract item name\n            const name = items[i].match(/^[a-z]+/gm)[0] as keyof BitmapFontData;\n\n            // Extract item attribute list as string ex.: \"width=10\"\n            const attributeList = items[i].match(/[a-zA-Z]+=([^\\s\"']+|\"([^\"]*)\")/gm);\n\n            // Convert attribute list into an object\n            const itemData: any = {};\n\n            for (const i in attributeList)\n            {\n                // Split key-value pairs\n                const split = attributeList[i].split('=');\n                const key = split[0];\n\n                // Remove eventual quotes from value\n                const strValue = split[1].replace(/\"/gm, '');\n\n                // Try to convert value into float\n                const floatValue = parseFloat(strValue);\n\n                // Use string value case float value is NaN\n                const value = isNaN(floatValue) ? strValue : floatValue;\n\n                itemData[key] = value;\n            }\n\n            // Push current item to the resulting data\n            rawData[name].push(itemData);\n        }\n\n        const font = new BitmapFontData();\n\n        rawData.info.forEach((info) => font.info.push({\n            face: info.face,\n            size: parseInt(info.size, 10),\n        }));\n\n        rawData.common.forEach((common) => font.common.push({\n            lineHeight: parseInt(common.lineHeight, 10),\n        }));\n\n        rawData.page.forEach((page) => font.page.push({\n            id: parseInt(page.id, 10),\n            file: page.file,\n        }));\n\n        rawData.char.forEach((char) => font.char.push({\n            id: parseInt(char.id, 10),\n            page: parseInt(char.page, 10),\n            x: parseInt(char.x, 10),\n            y: parseInt(char.y, 10),\n            width: parseInt(char.width, 10),\n            height: parseInt(char.height, 10),\n            xoffset: parseInt(char.xoffset, 10),\n            yoffset: parseInt(char.yoffset, 10),\n            xadvance: parseInt(char.xadvance, 10),\n        }));\n\n        rawData.kerning.forEach((kerning) => font.kerning.push({\n            first: parseInt(kerning.first, 10),\n            second: parseInt(kerning.second, 10),\n            amount: parseInt(kerning.amount, 10),\n        }));\n\n        rawData.distanceField.forEach((df) => font.distanceField.push({\n            distanceRange: parseInt(df.distanceRange, 10),\n            fieldType: df.fieldType,\n        }));\n\n        return font;\n    }\n}\n", "import { BitmapFontData } from '../BitmapFontData';\n\n/**\n * BitmapFont format that's XML-based.\n * @private\n */\nexport class XMLFormat\n{\n    /**\n     * Check if resource refers to xml font data.\n     * @param data\n     * @returns - True if resource could be treated as font data, false otherwise.\n     */\n    static test(data: unknown): boolean\n    {\n        const xml = data as Document;\n\n        return 'getElementsByTagName' in xml\n            && xml.getElementsByTagName('page').length\n            && xml.getElementsByTagName('info')[0].getAttribute('face') !== null;\n    }\n\n    /**\n     * Convert the XML into BitmapFontData that we can use.\n     * @param xml\n     * @returns - Data to use for BitmapFont\n     */\n    static parse(xml: Document): BitmapFontData\n    {\n        const data = new BitmapFontData();\n        const info = xml.getElementsByTagName('info');\n        const common = xml.getElementsByTagName('common');\n        const page = xml.getElementsByTagName('page');\n        const char = xml.getElementsByTagName('char');\n        const kerning = xml.getElementsByTagName('kerning');\n        const distanceField = xml.getElementsByTagName('distanceField');\n\n        for (let i = 0; i < info.length; i++)\n        {\n            data.info.push({\n                face: info[i].getAttribute('face'),\n                size: parseInt(info[i].getAttribute('size'), 10),\n            });\n        }\n\n        for (let i = 0; i < common.length; i++)\n        {\n            data.common.push({\n                lineHeight: parseInt(common[i].getAttribute('lineHeight'), 10),\n            });\n        }\n\n        for (let i = 0; i < page.length; i++)\n        {\n            data.page.push({\n                id: parseInt(page[i].getAttribute('id'), 10) || 0,\n                file: page[i].getAttribute('file'),\n            });\n        }\n\n        for (let i = 0; i < char.length; i++)\n        {\n            const letter = char[i];\n\n            data.char.push({\n                id: parseInt(letter.getAttribute('id'), 10),\n                page: parseInt(letter.getAttribute('page'), 10) || 0,\n                x: parseInt(letter.getAttribute('x'), 10),\n                y: parseInt(letter.getAttribute('y'), 10),\n                width: parseInt(letter.getAttribute('width'), 10),\n                height: parseInt(letter.getAttribute('height'), 10),\n                xoffset: parseInt(letter.getAttribute('xoffset'), 10),\n                yoffset: parseInt(letter.getAttribute('yoffset'), 10),\n                xadvance: parseInt(letter.getAttribute('xadvance'), 10),\n            });\n        }\n\n        for (let i = 0; i < kerning.length; i++)\n        {\n            data.kerning.push({\n                first: parseInt(kerning[i].getAttribute('first'), 10),\n                second: parseInt(kerning[i].getAttribute('second'), 10),\n                amount: parseInt(kerning[i].getAttribute('amount'), 10),\n            });\n        }\n\n        for (let i = 0; i < distanceField.length; i++)\n        {\n            data.distanceField.push({\n                fieldType: distanceField[i].getAttribute('fieldType'),\n                distanceRange: parseInt(distanceField[i].getAttribute('distanceRange'), 10),\n            });\n        }\n\n        return data;\n    }\n}\n", "import { settings } from '@pixi/core';\nimport { XMLFormat } from './XMLFormat';\n\nimport type { BitmapFontData } from '../BitmapFontData';\n\n/**\n * BitmapFont format that's XML-based.\n * @private\n */\nexport class XMLStringFormat\n{\n    /**\n     * Check if resource refers to text xml font data.\n     * @param data\n     * @returns - True if resource could be treated as font data, false otherwise.\n     */\n    static test(data: unknown): boolean\n    {\n        if (typeof data === 'string' && data.includes('<font>'))\n        {\n            return XMLFormat.test(settings.ADAPTER.parseXML(data));\n        }\n\n        return false;\n    }\n\n    /**\n     * Convert the text XML into BitmapFontData that we can use.\n     * @param xmlTxt\n     * @returns - Data to use for BitmapFont\n     */\n    static parse(xmlTxt: string): BitmapFontData\n    {\n        return XMLFormat.parse(settings.ADAPTER.parseXML(xmlTxt));\n    }\n}\n", "import { TextFormat } from './TextFormat';\nimport { XMLFormat } from './XMLFormat';\nimport { XMLStringFormat } from './XMLStringFormat';\n\n// Registered formats, maybe make this extensible in the future?\nconst formats = [\n    TextFormat,\n    XMLFormat,\n    XMLStringFormat,\n] as const;\n\n/**\n * Auto-detect BitmapFont parsing format based on data.\n * @private\n * @param {any} data - Data to detect format\n * @returns {any} Format or null\n */\nexport function autoDetectFormat(data: unknown): typeof formats[number] | null\n{\n    for (let i = 0; i < formats.length; i++)\n    {\n        if (formats[i].test(data))\n        {\n            return formats[i];\n        }\n    }\n\n    return null;\n}\n\nexport type { IBitmapFontRawData } from './TextFormat';\nexport { TextFormat, XMLFormat, XMLStringFormat };\n", "import { TEXT_GRADIENT } from '@pixi/text';\n\nimport type { ICanvas, ICanvasRenderingContext2D } from '@pixi/core';\nimport type { TextMetrics, TextStyle } from '@pixi/text';\n\n// TODO: Prevent code duplication b/w generateFillStyle & Text#generateFillStyle\n\n/**\n * Generates the fill style. Can automatically generate a gradient based on the fill style being an array\n * @private\n * @param canvas\n * @param context\n * @param {object} style - The style.\n * @param resolution\n * @param {string[]} lines - The lines of text.\n * @param metrics\n * @returns {string|number|CanvasGradient} The fill style\n */\nexport function generateFillStyle(\n    canvas: ICanvas,\n    context: ICanvasRenderingContext2D,\n    style: TextStyle,\n    resolution: number,\n    lines: string[],\n    metrics: TextMetrics\n): string | CanvasGradient | CanvasPattern\n{\n    // TODO: Can't have different types for getter and setter. The getter shouldn't have the number type as\n    //       the setter converts to string. See this thread for more details:\n    //       https://github.com/microsoft/TypeScript/issues/2521\n    const fillStyle: string | string[] | CanvasGradient | CanvasPattern = style.fill as any;\n\n    if (!Array.isArray(fillStyle))\n    {\n        return fillStyle;\n    }\n    else if (fillStyle.length === 1)\n    {\n        return fillStyle[0];\n    }\n\n    // the gradient will be evenly spaced out according to how large the array is.\n    // ['#FF0000', '#00FF00', '#0000FF'] would created stops at 0.25, 0.5 and 0.75\n    let gradient: string[] | CanvasGradient;\n\n    // a dropshadow will enlarge the canvas and result in the gradient being\n    // generated with the incorrect dimensions\n    const dropShadowCorrection = (style.dropShadow) ? style.dropShadowDistance : 0;\n\n    // should also take padding into account, padding can offset the gradient\n    const padding = style.padding || 0;\n\n    const width = (canvas.width / resolution) - dropShadowCorrection - (padding * 2);\n    const height = (canvas.height / resolution) - dropShadowCorrection - (padding * 2);\n\n    // make a copy of the style settings, so we can manipulate them later\n    const fill = fillStyle.slice();\n    const fillGradientStops = style.fillGradientStops.slice();\n\n    // wanting to evenly distribute the fills. So an array of 4 colours should give fills of 0.25, 0.5 and 0.75\n    if (!fillGradientStops.length)\n    {\n        const lengthPlus1 = fill.length + 1;\n\n        for (let i = 1; i < lengthPlus1; ++i)\n        {\n            fillGradientStops.push(i / lengthPlus1);\n        }\n    }\n\n    // stop the bleeding of the last gradient on the line above to the top gradient of the this line\n    // by hard defining the first gradient colour at point 0, and last gradient colour at point 1\n    fill.unshift(fillStyle[0]);\n    fillGradientStops.unshift(0);\n\n    fill.push(fillStyle[fillStyle.length - 1]);\n    fillGradientStops.push(1);\n\n    if (style.fillGradientType === TEXT_GRADIENT.LINEAR_VERTICAL)\n    {\n        // start the gradient at the top center of the canvas, and end at the bottom middle of the canvas\n        gradient = context.createLinearGradient(width / 2, padding, width / 2, height + padding);\n\n        // we need to repeat the gradient so that each individual line of text has the same vertical gradient effect\n        // ['#FF0000', '#00FF00', '#0000FF'] over 2 lines would create stops at 0.125, 0.25, 0.375, 0.625, 0.75, 0.875\n\n        // There's potential for floating point precision issues at the seams between gradient repeats.\n        // The loop below generates the stops in order, so track the last generated one to prevent\n        // floating point precision from making us go the teeniest bit backwards, resulting in\n        // the first and last colors getting swapped.\n        let lastIterationStop = 0;\n\n        // Actual height of the text itself, not counting spacing for lineHeight/leading/dropShadow etc\n        const textHeight = metrics.fontProperties.fontSize + style.strokeThickness;\n\n        // textHeight, but as a 0-1 size in global gradient stop space\n        const gradStopLineHeight = textHeight / height;\n\n        for (let i = 0; i < lines.length; i++)\n        {\n            const thisLineTop = metrics.lineHeight * i;\n\n            for (let j = 0; j < fill.length; j++)\n            {\n                // 0-1 stop point for the current line, multiplied to global space afterwards\n                let lineStop = 0;\n\n                if (typeof fillGradientStops[j] === 'number')\n                {\n                    lineStop = fillGradientStops[j];\n                }\n                else\n                {\n                    lineStop = j / fill.length;\n                }\n\n                const globalStop = (thisLineTop / height) + (lineStop * gradStopLineHeight);\n\n                // Prevent color stop generation going backwards from floating point imprecision\n                let clampedStop = Math.max(lastIterationStop, globalStop);\n\n                clampedStop = Math.min(clampedStop, 1); // Cap at 1 as well for safety's sake to avoid a possible throw.\n                gradient.addColorStop(clampedStop, fill[j]);\n                lastIterationStop = clampedStop;\n            }\n        }\n    }\n    else\n    {\n        // start the gradient at the center left of the canvas, and end at the center right of the canvas\n        gradient = context.createLinearGradient(padding, height / 2, width + padding, height / 2);\n\n        // can just evenly space out the gradients in this case, as multiple lines makes no difference\n        // to an even left to right gradient\n        const totalIterations = fill.length + 1;\n        let currentIteration = 1;\n\n        for (let i = 0; i < fill.length; i++)\n        {\n            let stop: number;\n\n            if (typeof fillGradientStops[i] === 'number')\n            {\n                stop = fillGradientStops[i];\n            }\n            else\n            {\n                stop = currentIteration / totalIterations;\n            }\n            gradient.addColorStop(stop, fill[i]);\n            currentIteration++;\n        }\n    }\n\n    return gradient;\n}\n", "import { Color } from '@pixi/core';\nimport { generateFillStyle } from './generateFillStyle';\n\nimport type { ICanvas, ICanvasRenderingContext2D } from '@pixi/core';\nimport type { TextMetrics, TextStyle } from '@pixi/text';\n\n// TODO: Prevent code duplication b/w drawGlyph & Text#updateText\n\n/**\n * Draws the glyph `metrics.text` on the given canvas.\n *\n * Ignored because not directly exposed.\n * @ignore\n * @param {PIXI.ICanvas} canvas\n * @param {PIXI.ICanvasRenderingContext2D} context\n * @param {TextMetrics} metrics\n * @param {number} x\n * @param {number} y\n * @param {number} resolution\n * @param {TextStyle} style\n */\nexport function drawGlyph(\n    canvas: ICanvas,\n    context: ICanvasRenderingContext2D,\n    metrics: TextMetrics,\n    x: number,\n    y: number,\n    resolution: number,\n    style: TextStyle\n): void\n{\n    const char = metrics.text;\n    const fontProperties = metrics.fontProperties;\n\n    context.translate(x, y);\n    context.scale(resolution, resolution);\n\n    const tx = style.strokeThickness / 2;\n    const ty = -(style.strokeThickness / 2);\n\n    context.font = style.toFontString();\n    context.lineWidth = style.strokeThickness;\n    context.textBaseline = style.textBaseline;\n    context.lineJoin = style.lineJoin;\n    context.miterLimit = style.miterLimit;\n\n    // set canvas text styles\n    context.fillStyle = generateFillStyle(canvas, context, style, resolution, [char], metrics);\n    context.strokeStyle = style.stroke as string;\n\n    if (style.dropShadow)\n    {\n        const dropShadowColor = style.dropShadowColor;\n        const dropShadowBlur = style.dropShadowBlur * resolution;\n        const dropShadowDistance = style.dropShadowDistance * resolution;\n\n        context.shadowColor = Color.shared\n            .setValue(dropShadowColor)\n            .setAlpha(style.dropShadowAlpha)\n            .toRgbaString();\n        context.shadowBlur = dropShadowBlur;\n        context.shadowOffsetX = Math.cos(style.dropShadowAngle) * dropShadowDistance;\n        context.shadowOffsetY = Math.sin(style.dropShadowAngle) * dropShadowDistance;\n    }\n    else\n    {\n        context.shadowColor = 'black';\n        context.shadowBlur = 0;\n        context.shadowOffsetX = 0;\n        context.shadowOffsetY = 0;\n    }\n\n    if (style.stroke && style.strokeThickness)\n    {\n        context.strokeText(char, tx, ty + metrics.lineHeight - fontProperties.descent);\n    }\n    if (style.fill)\n    {\n        context.fillText(char, tx, ty + metrics.lineHeight - fontProperties.descent);\n    }\n\n    context.setTransform(1, 0, 0, 1, 0, 0); // defaults needed for older browsers (e.g. Opera 29)\n\n    context.fillStyle = 'rgba(0, 0, 0, 0)';\n}\n", "/**\n * Ponyfill for IE because it doesn't support `codePointAt`\n * @param str\n * @private\n */\nexport function extractCharCode(str: string): number\n{\n    return str.codePointAt ? str.codePointAt(0) : str.charCodeAt(0);\n}\n", "/**\n * Ponyfill for IE because it doesn't support `Array.from`\n * @param text\n * @private\n */\nexport function splitTextToCharacters(text: string): string[]\n{\n    return Array.from ? Array.from(text) : text.split('');\n}\n", "import { splitTextToCharacters } from './splitTextToCharacters';\n\n/**\n * Processes the passed character set data and returns a flattened array of all the characters.\n *\n * Ignored because not directly exposed.\n * @ignore\n * @param {string | string[] | string[][] } chars\n * @returns {string[]} the flattened array of characters\n */\nexport function resolveCharacters(chars: string | (string | string[])[]): string[]\n{\n    // Split the chars string into individual characters\n    if (typeof chars === 'string')\n    {\n        chars = [chars];\n    }\n\n    // Handle an array of characters+ranges\n    const result: string[] = [];\n\n    for (let i = 0, j = chars.length; i < j; i++)\n    {\n        const item = chars[i];\n\n        // Handle range delimited by start/end chars\n        if (Array.isArray(item))\n        {\n            if (item.length !== 2)\n            {\n                throw new Error(`[BitmapFont]: Invalid character range length, expecting 2 got ${item.length}.`);\n            }\n\n            const startCode = item[0].charCodeAt(0);\n            const endCode = item[1].charCodeAt(0);\n\n            if (endCode < startCode)\n            {\n                throw new Error('[BitmapFont]: Invalid character range.');\n            }\n\n            for (let i = startCode, j = endCode; i <= j; i++)\n            {\n                result.push(String.fromCharCode(i));\n            }\n        }\n        // Handle a character set string\n        else\n        {\n            result.push(...splitTextToCharacters(item));\n        }\n    }\n\n    if (result.length === 0)\n    {\n        throw new Error('[BitmapFont]: Empty set when resolving characters.');\n    }\n\n    return result;\n}\n", "import { ALPHA_MODES, BaseTexture, MIPMAP_MODES, Rectangle, settings, Texture, utils } from '@pixi/core';\nimport { TextMetrics, TextStyle } from '@pixi/text';\nimport { BitmapFontData } from './BitmapFontData';\nimport { autoDetectFormat } from './formats';\nimport { drawGlyph, extractCharCode, resolveCharacters } from './utils';\n\nimport type { IBaseTextureOptions, ICanvas, ICanvasRenderingContext2D, SCALE_MODES } from '@pixi/core';\nimport type { ITextStyle } from '@pixi/text';\n\nexport interface IBitmapFontCharacter\n{\n    xOffset: number;\n    yOffset: number;\n    xAdvance: number;\n    texture: Texture;\n    page: number;\n    kerning: utils.Dict<number>;\n}\n\ntype BaseOptions = Pick<IBaseTextureOptions, 'scaleMode' | 'mipmap' | 'anisotropicLevel' | 'alphaMode'>;\n\n/** @memberof PIXI */\nexport interface IBitmapFontOptions extends BaseOptions\n{\n    /**\n     * Characters included in the font set. You can also use ranges.\n     * For example, `[['a', 'z'], ['A', 'Z'], \"!@#$%^&*()~{}[] \"]`.\n     * Don't forget to include spaces ' ' in your character set!\n     * @default PIXI.BitmapFont.ALPHANUMERIC\n     */\n    chars?: string | (string | string[])[];\n\n    /**\n     * Render resolution for glyphs.\n     * @default 1\n     */\n    resolution?: number;\n\n    /**\n     * Padding between glyphs on texture atlas. Lower values could mean more visual artifacts\n     * and bleeding from other glyphs, larger values increase the space required on the texture.\n     * @default 4\n     */\n    padding?: number;\n\n    /**\n     * Optional width of atlas, smaller values to reduce memory.\n     * @default 512\n     */\n    textureWidth?: number;\n\n    /**\n     * Optional height of atlas, smaller values to reduce memory.\n     * @default 512\n     */\n    textureHeight?: number;\n\n    /**\n     * If mipmapping is enabled for texture. For instance, by default PixiJS only enables mipmapping\n     * on Power-of-Two textures. If your textureWidth or textureHeight are not power-of-two, you\n     * may consider enabling mipmapping to get better quality with lower font sizes. Note:\n     * for MSDF/SDF fonts, mipmapping is not supported.\n     * @default PIXI.BaseTexture.defaultOptions.mipmap\n     */\n    mipmap?: MIPMAP_MODES;\n\n    /**\n     * Anisotropic filtering level of texture.\n     * @default PIXI.BaseTexture.defaultOptions.anisotropicLevel\n     */\n    anisotropicLevel?: number;\n\n    /**\n     * Default scale mode, linear, nearest. Nearest can be helpful for bitmap-style fonts.\n     * @default PIXI.BaseTexture.defaultOptions.scaleMode\n     */\n    scaleMode?: SCALE_MODES;\n\n    /**\n     * Pre multiply the image alpha.  Note: for MSDF/SDF fonts, alphaMode is not supported.\n     * @default PIXI.BaseTexture.defaultOptions.alphaMode\n     */\n    alphaMode?: ALPHA_MODES;\n}\n\n/**\n * BitmapFont represents a typeface available for use with the BitmapText class. Use the `install`\n * method for adding a font to be used.\n * @memberof PIXI\n */\nexport class BitmapFont\n{\n    /**\n     * This character set includes all the letters in the alphabet (both lower- and upper- case).\n     * @type {string[][]}\n     * @example\n     * BitmapFont.from('ExampleFont', style, { chars: BitmapFont.ALPHA })\n     */\n    public static readonly ALPHA = [['a', 'z'], ['A', 'Z'], ' '];\n\n    /**\n     * This character set includes all decimal digits (from 0 to 9).\n     * @type {string[][]}\n     * @example\n     * BitmapFont.from('ExampleFont', style, { chars: BitmapFont.NUMERIC })\n     */\n    public static readonly NUMERIC = [['0', '9']];\n\n    /**\n     * This character set is the union of `BitmapFont.ALPHA` and `BitmapFont.NUMERIC`.\n     * @type {string[][]}\n     */\n    public static readonly ALPHANUMERIC = [['a', 'z'], ['A', 'Z'], ['0', '9'], ' '];\n\n    /**\n     * This character set consists of all the ASCII table.\n     * @member {string[][]}\n     * @see http://www.asciitable.com/\n     */\n    public static readonly ASCII = [[' ', '~']];\n\n    /**\n     * Collection of default options when using `BitmapFont.from`.\n     * @property {number} [resolution=1] -\n     * @property {number} [textureWidth=512] -\n     * @property {number} [textureHeight=512] -\n     * @property {number} [padding=4] -\n     * @property {string|string[]|string[][]} chars = PIXI.BitmapFont.ALPHANUMERIC\n     */\n    public static readonly defaultOptions: IBitmapFontOptions = {\n        resolution: 1,\n        textureWidth: 512,\n        textureHeight: 512,\n        padding: 4,\n        chars: BitmapFont.ALPHANUMERIC,\n    };\n\n    /** Collection of available/installed fonts. */\n    public static readonly available: utils.Dict<BitmapFont> = {};\n\n    /** The name of the font face. */\n    public readonly font: string;\n\n    /** The size of the font face in pixels. */\n    public readonly size: number;\n\n    /** The line-height of the font face in pixels. */\n    public readonly lineHeight: number;\n\n    /** The map of characters by character code. */\n    public readonly chars: utils.Dict<IBitmapFontCharacter>;\n\n    /** The map of base page textures (i.e., sheets of glyphs). */\n    public readonly pageTextures: utils.Dict<Texture>;\n\n    /** The range of the distance field in pixels. */\n    public readonly distanceFieldRange: number;\n\n    /** The kind of distance field for this font or \"none\". */\n    public readonly distanceFieldType: string;\n\n    private _ownsTextures: boolean;\n\n    /**\n     * @param data\n     * @param textures\n     * @param ownsTextures - Setting to `true` will destroy page textures\n     *        when the font is uninstalled.\n     */\n    constructor(data: BitmapFontData, textures: Texture[] | utils.Dict<Texture>, ownsTextures?: boolean)\n    {\n        const [info] = data.info;\n        const [common] = data.common;\n        const [page] = data.page;\n        const [distanceField] = data.distanceField;\n        const res = utils.getResolutionOfUrl(page.file);\n        const pageTextures: utils.Dict<Texture> = {};\n\n        this._ownsTextures = ownsTextures;\n        this.font = info.face;\n        this.size = info.size;\n        this.lineHeight = common.lineHeight / res;\n        this.chars = {};\n        this.pageTextures = pageTextures;\n\n        // Convert the input Texture, Textures or object\n        // into a page Texture lookup by \"id\"\n        for (let i = 0; i < data.page.length; i++)\n        {\n            const { id, file } = data.page[i];\n\n            pageTextures[id] = textures instanceof Array\n                ? textures[i] : textures[file];\n\n            // only MSDF and SDF fonts need no-premultiplied-alpha\n            if (distanceField?.fieldType && distanceField.fieldType !== 'none')\n            {\n                pageTextures[id].baseTexture.alphaMode = ALPHA_MODES.NO_PREMULTIPLIED_ALPHA;\n                pageTextures[id].baseTexture.mipmap = MIPMAP_MODES.OFF;\n            }\n        }\n\n        // parse letters\n        for (let i = 0; i < data.char.length; i++)\n        {\n            const { id, page } = data.char[i];\n            let { x, y, width, height, xoffset, yoffset, xadvance } = data.char[i];\n\n            x /= res;\n            y /= res;\n            width /= res;\n            height /= res;\n            xoffset /= res;\n            yoffset /= res;\n            xadvance /= res;\n\n            const rect = new Rectangle(\n                x + (pageTextures[page].frame.x / res),\n                y + (pageTextures[page].frame.y / res),\n                width,\n                height\n            );\n\n            this.chars[id] = {\n                xOffset: xoffset,\n                yOffset: yoffset,\n                xAdvance: xadvance,\n                kerning: {},\n                texture: new Texture(\n                    pageTextures[page].baseTexture,\n                    rect\n                ),\n                page,\n            };\n        }\n\n        // parse kernings\n        for (let i = 0; i < data.kerning.length; i++)\n        {\n            let { first, second, amount } = data.kerning[i];\n\n            first /= res;\n            second /= res;\n            amount /= res;\n\n            if (this.chars[second])\n            {\n                this.chars[second].kerning[first] = amount;\n            }\n        }\n\n        // Store distance field information\n        this.distanceFieldRange = distanceField?.distanceRange;\n        this.distanceFieldType = distanceField?.fieldType?.toLowerCase() ?? 'none';\n    }\n\n    /** Remove references to created glyph textures. */\n    public destroy(): void\n    {\n        for (const id in this.chars)\n        {\n            this.chars[id].texture.destroy();\n            this.chars[id].texture = null;\n        }\n\n        for (const id in this.pageTextures)\n        {\n            if (this._ownsTextures)\n            {\n                this.pageTextures[id].destroy(true);\n            }\n\n            this.pageTextures[id] = null;\n        }\n\n        // Set readonly null.\n        (this as any).chars = null;\n        (this as any).pageTextures = null;\n    }\n\n    /**\n     * Register a new bitmap font.\n     * @param data - The\n     *        characters map that could be provided as xml or raw string.\n     * @param textures - List of textures for each page.\n     * @param ownsTextures - Set to `true` to destroy page textures\n     *        when the font is uninstalled. By default fonts created with\n     *        `BitmapFont.from` or from the `BitmapFontLoader` are `true`.\n     * @returns {PIXI.BitmapFont} Result font object with font, size, lineHeight\n     *         and char fields.\n     */\n    public static install(\n        data: string | XMLDocument | BitmapFontData,\n        textures: Texture | Texture[] | utils.Dict<Texture>,\n        ownsTextures?: boolean\n    ): BitmapFont\n    {\n        let fontData;\n\n        if (data instanceof BitmapFontData)\n        {\n            fontData = data;\n        }\n        else\n        {\n            const format = autoDetectFormat(data);\n\n            if (!format)\n            {\n                throw new Error('Unrecognized data format for font.');\n            }\n\n            fontData = format.parse(data as any);\n        }\n\n        // Single texture, convert to list\n        if (textures instanceof Texture)\n        {\n            textures = [textures];\n        }\n\n        const font = new BitmapFont(fontData, textures, ownsTextures);\n\n        BitmapFont.available[font.font] = font;\n\n        return font;\n    }\n\n    /**\n     * Remove bitmap font by name.\n     * @param name - Name of the font to uninstall.\n     */\n    public static uninstall(name: string): void\n    {\n        const font = BitmapFont.available[name];\n\n        if (!font)\n        {\n            throw new Error(`No font found named '${name}'`);\n        }\n\n        font.destroy();\n        delete BitmapFont.available[name];\n    }\n\n    /**\n     * Generates a bitmap-font for the given style and character set. This does not support\n     * kernings yet. With `style` properties, only the following non-layout properties are used:\n     *\n     * - {@link PIXI.TextStyle#dropShadow|dropShadow}\n     * - {@link PIXI.TextStyle#dropShadowDistance|dropShadowDistance}\n     * - {@link PIXI.TextStyle#dropShadowColor|dropShadowColor}\n     * - {@link PIXI.TextStyle#dropShadowBlur|dropShadowBlur}\n     * - {@link PIXI.TextStyle#dropShadowAngle|dropShadowAngle}\n     * - {@link PIXI.TextStyle#fill|fill}\n     * - {@link PIXI.TextStyle#fillGradientStops|fillGradientStops}\n     * - {@link PIXI.TextStyle#fillGradientType|fillGradientType}\n     * - {@link PIXI.TextStyle#fontFamily|fontFamily}\n     * - {@link PIXI.TextStyle#fontSize|fontSize}\n     * - {@link PIXI.TextStyle#fontVariant|fontVariant}\n     * - {@link PIXI.TextStyle#fontWeight|fontWeight}\n     * - {@link PIXI.TextStyle#lineJoin|lineJoin}\n     * - {@link PIXI.TextStyle#miterLimit|miterLimit}\n     * - {@link PIXI.TextStyle#stroke|stroke}\n     * - {@link PIXI.TextStyle#strokeThickness|strokeThickness}\n     * - {@link PIXI.TextStyle#textBaseline|textBaseline}\n     * @param name - The name of the custom font to use with BitmapText.\n     * @param textStyle - Style options to render with BitmapFont.\n     * @param options - Setup options for font or name of the font.\n     * @returns Font generated by style options.\n     * @example\n     * import { BitmapFont, BitmapText } from 'pixi.js';\n     *\n     * BitmapFont.from('TitleFont', {\n     *     fontFamily: 'Arial',\n     *     fontSize: 12,\n     *     strokeThickness: 2,\n     *     fill: 'purple',\n     * });\n     *\n     * const title = new BitmapText('This is the title', { fontName: 'TitleFont' });\n     */\n    public static from(name: string, textStyle?: TextStyle | Partial<ITextStyle>, options?: IBitmapFontOptions): BitmapFont\n    {\n        if (!name)\n        {\n            throw new Error('[BitmapFont] Property `name` is required.');\n        }\n\n        const {\n            chars,\n            padding,\n            resolution,\n            textureWidth,\n            textureHeight,\n            ...baseOptions\n        } = Object.assign({}, BitmapFont.defaultOptions, options);\n\n        const charsList = resolveCharacters(chars);\n        const style = textStyle instanceof TextStyle ? textStyle : new TextStyle(textStyle);\n        const lineWidth = textureWidth;\n        const fontData = new BitmapFontData();\n\n        fontData.info[0] = {\n            face: style.fontFamily as string,\n            size: style.fontSize as number,\n        };\n        fontData.common[0] = {\n            lineHeight: style.fontSize as number,\n        };\n\n        let positionX = 0;\n        let positionY = 0;\n\n        let canvas: ICanvas;\n        let context: ICanvasRenderingContext2D;\n        let baseTexture: BaseTexture;\n        let maxCharHeight = 0;\n        const baseTextures: BaseTexture[] = [];\n        const textures: Texture[] = [];\n\n        for (let i = 0; i < charsList.length; i++)\n        {\n            if (!canvas)\n            {\n                canvas = settings.ADAPTER.createCanvas();\n                canvas.width = textureWidth;\n                canvas.height = textureHeight;\n\n                context = canvas.getContext('2d');\n                baseTexture = new BaseTexture(canvas, { resolution, ...baseOptions });\n\n                baseTextures.push(baseTexture);\n                textures.push(new Texture(baseTexture));\n\n                fontData.page.push({\n                    id: textures.length - 1,\n                    file: '',\n                });\n            }\n\n            // Measure glyph dimensions\n            const character = charsList[i];\n            const metrics = TextMetrics.measureText(character, style, false, canvas);\n            const width = metrics.width;\n            const height = Math.ceil(metrics.height);\n\n            // This is ugly - but italics are given more space so they don't overlap\n            const textureGlyphWidth = Math.ceil((style.fontStyle === 'italic' ? 2 : 1) * width);\n\n            // Can't fit char anymore: next canvas please!\n            if (positionY >= textureHeight - (height * resolution))\n            {\n                if (positionY === 0)\n                {\n                    // We don't want user debugging an infinite loop (or do we? :)\n                    throw new Error(`[BitmapFont] textureHeight ${textureHeight}px is too small `\n                        + `(fontFamily: '${style.fontFamily}', fontSize: ${style.fontSize}px, char: '${character}')`);\n                }\n\n                --i;\n\n                // Create new atlas once current has filled up\n                canvas = null;\n                context = null;\n                baseTexture = null;\n                positionY = 0;\n                positionX = 0;\n                maxCharHeight = 0;\n\n                continue;\n            }\n\n            maxCharHeight = Math.max(height + metrics.fontProperties.descent, maxCharHeight);\n\n            // Wrap line once full row has been rendered\n            if ((textureGlyphWidth * resolution) + positionX >= lineWidth)\n            {\n                if (positionX === 0)\n                {\n                    // Avoid infinite loop (There can be some very wide char like '\\uFDFD'!)\n                    throw new Error(`[BitmapFont] textureWidth ${textureWidth}px is too small `\n                        + `(fontFamily: '${style.fontFamily}', fontSize: ${style.fontSize}px, char: '${character}')`);\n                }\n\n                --i;\n                positionY += maxCharHeight * resolution;\n                positionY = Math.ceil(positionY);\n                positionX = 0;\n                maxCharHeight = 0;\n\n                continue;\n            }\n\n            drawGlyph(canvas, context, metrics, positionX, positionY, resolution, style);\n\n            // Unique (numeric) ID mapping to this glyph\n            const id = extractCharCode(metrics.text);\n\n            // Create a texture holding just the glyph\n            fontData.char.push({\n                id,\n                page: textures.length - 1,\n                x: positionX / resolution,\n                y: positionY / resolution,\n                width: textureGlyphWidth,\n                height,\n                xoffset: 0,\n                yoffset: 0,\n                xadvance: width\n                        - (style.dropShadow ? style.dropShadowDistance : 0)\n                        - (style.stroke ? style.strokeThickness : 0),\n            });\n\n            positionX += (textureGlyphWidth + (2 * padding)) * resolution;\n            positionX = Math.ceil(positionX);\n        }\n\n        // Brute-force kerning info, this can be expensive b/c it's an O(n²),\n        // but we're using measureText which is native and fast.\n        for (let i = 0, len = charsList.length; i < len; i++)\n        {\n            const first = charsList[i];\n\n            for (let j = 0; j < len; j++)\n            {\n                const second = charsList[j];\n                const c1 = context.measureText(first).width;\n                const c2 = context.measureText(second).width;\n                const total = context.measureText(first + second).width;\n                const amount = total - (c1 + c2);\n\n                if (amount)\n                {\n                    fontData.kerning.push({\n                        first: extractCharCode(first),\n                        second: extractCharCode(second),\n                        amount,\n                    });\n                }\n            }\n        }\n\n        const font = new BitmapFont(fontData, textures, true);\n\n        // Make it easier to replace a font\n        if (BitmapFont.available[name] !== undefined)\n        {\n            BitmapFont.uninstall(name);\n        }\n\n        BitmapFont.available[name] = font;\n\n        return font;\n    }\n}\n", "var msdfFrag = \"// Pixi texture info\\r\\nvarying vec2 vTextureCoord;\\r\\nuniform sampler2D uSampler;\\r\\n\\r\\n// Tint\\r\\nuniform vec4 uColor;\\r\\n\\r\\n// on 2D applications fwidth is screenScale / glyphAtlasScale * distanceFieldRange\\r\\nuniform float uFWidth;\\r\\n\\r\\nvoid main(void) {\\r\\n\\r\\n  // To stack MSDF and SDF we need a non-pre-multiplied-alpha texture.\\r\\n  vec4 texColor = texture2D(uSampler, vTextureCoord);\\r\\n\\r\\n  // MSDF\\r\\n  float median = texColor.r + texColor.g + texColor.b -\\r\\n                  min(texColor.r, min(texColor.g, texColor.b)) -\\r\\n                  max(texColor.r, max(texColor.g, texColor.b));\\r\\n  // SDF\\r\\n  median = min(median, texColor.a);\\r\\n\\r\\n  float screenPxDistance = uFWidth * (median - 0.5);\\r\\n  float alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\\r\\n  if (median < 0.01) {\\r\\n    alpha = 0.0;\\r\\n  } else if (median > 0.99) {\\r\\n    alpha = 1.0;\\r\\n  }\\r\\n\\r\\n  // Gamma correction for coverage-like alpha\\r\\n  float luma = dot(uColor.rgb, vec3(0.299, 0.587, 0.114));\\r\\n  float gamma = mix(1.0, 1.0 / 2.2, luma);\\r\\n  float coverage = pow(uColor.a * alpha, gamma);  \\r\\n\\r\\n  // NPM Textures, NPM outputs\\r\\n  gl_FragColor = vec4(uColor.rgb, coverage);\\r\\n}\\r\\n\";\n\nexport { msdfFrag as default };\n//# sourceMappingURL=msdf.mjs.map\n", "var msdfVert = \"// Mesh material default fragment\\r\\nattribute vec2 aVertexPosition;\\r\\nattribute vec2 aTextureCoord;\\r\\n\\r\\nuniform mat3 projectionMatrix;\\r\\nuniform mat3 translationMatrix;\\r\\nuniform mat3 uTextureMatrix;\\r\\n\\r\\nvarying vec2 vTextureCoord;\\r\\n\\r\\nvoid main(void)\\r\\n{\\r\\n    gl_Position = vec4((projectionMatrix * translationMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\r\\n\\r\\n    vTextureCoord = (uTextureMatrix * vec3(aTextureCoord, 1.0)).xy;\\r\\n}\\r\\n\";\n\nexport { msdfVert as default };\n//# sourceMappingURL=msdf2.mjs.map\n", "import { BLEND_MODES, Color, ObservablePoint, Point, Program, settings, Texture, utils } from '@pixi/core';\nimport { Container } from '@pixi/display';\nimport { Mesh, MeshGeometry, MeshMaterial } from '@pixi/mesh';\nimport { BitmapFont } from './BitmapFont';\nimport msdfFrag from './shader/msdf.frag';\nimport msdfVert from './shader/msdf.vert';\nimport { extractCharCode, splitTextToCharacters } from './utils';\n\nimport type { ColorSource, Rectangle, Renderer } from '@pixi/core';\nimport type { IDestroyOptions } from '@pixi/display';\nimport type { TextStyleAlign } from '@pixi/text';\nimport type { IBitmapTextStyle } from './BitmapTextStyle';\n\ninterface PageMeshData\n{\n    index: number;\n    indexCount: number;\n    vertexCount: number;\n    uvsCount: number;\n    total: number;\n    mesh: Mesh;\n    vertices?: Float32Array;\n    uvs?: Float32Array;\n    indices?: Uint16Array;\n}\ninterface CharRenderData\n{\n    texture: Texture;\n    line: number;\n    charCode: number;\n    position: Point;\n    prevSpaces: number;\n}\n\n// If we ever need more than two pools, please make a Dict or something better.\nconst pageMeshDataDefaultPageMeshData: PageMeshData[] = [];\nconst pageMeshDataMSDFPageMeshData: PageMeshData[] = [];\nconst charRenderDataPool: CharRenderData[] = [];\n\n/**\n * A BitmapText object will create a line or multiple lines of text using bitmap font.\n *\n * The primary advantage of this class over Text is that all of your textures are pre-generated and loading,\n * meaning that rendering is fast, and changing text has no performance implications.\n *\n * Supporting character sets other than latin, such as CJK languages, may be impractical due to the number of characters.\n *\n * To split a line you can use '\\n', '\\r' or '\\r\\n' in your string.\n *\n * PixiJS can auto-generate fonts on-the-fly using BitmapFont or use fnt files provided by:\n * http://www.angelcode.com/products/bmfont/ for Windows or\n * http://www.bmglyph.com/ for Mac.\n *\n * You can also use SDF, MSDF and MTSDF BitmapFonts for vector-like scaling appearance provided by:\n * https://github.com/soimy/msdf-bmfont-xml for SDF and MSDF fnt files or\n * https://github.com/Chlumsky/msdf-atlas-gen for SDF, MSDF and MTSDF json files\n *\n * A BitmapText can only be created when the font is loaded.\n * @example\n * import { BitmapText } from 'pixi.js';\n *\n * // in this case the font is in a file called 'desyrel.fnt'\n * const bitmapText = new BitmapText('text using a fancy font!', {\n *     fontName: 'Desyrel',\n *     fontSize: 35,\n *     align: 'right',\n * });\n * @memberof PIXI\n */\nexport class BitmapText extends Container\n{\n    public static styleDefaults: Partial<IBitmapTextStyle> = {\n        align: 'left',\n        tint: 0xFFFFFF,\n        maxWidth: 0,\n        letterSpacing: 0,\n    };\n\n    /** Set to `true` if the BitmapText needs to be redrawn. */\n    public dirty: boolean;\n\n    /**\n     * The resolution / device pixel ratio of the canvas.\n     *\n     * This is set to automatically match the renderer resolution by default, but can be overridden by setting manually.\n     * @default PIXI.settings.RESOLUTION\n     */\n    _resolution: number;\n    _autoResolution: boolean;\n\n    /**\n     * Private tracker for the width of the overall text.\n     * @private\n     */\n    protected _textWidth: number;\n\n    /**\n     * Private tracker for the height of the overall text.\n     * @private\n     */\n    protected _textHeight: number;\n\n    /**\n     * Private tracker for the current text.\n     * @private\n     */\n    protected _text: string;\n\n    /**\n     * The max width of this bitmap text in pixels. If the text provided is longer than the\n     * value provided, line breaks will be automatically inserted in the last whitespace.\n     * Disable by setting value to 0\n     * @private\n     */\n    protected _maxWidth: number;\n\n    /**\n     * The max line height. This is useful when trying to use the total height of the Text,\n     * ie: when trying to vertically align. (Internally used)\n     * @private\n     */\n    protected _maxLineHeight: number;\n\n    /**\n     * Letter spacing. This is useful for setting the space between characters.\n     * @private\n     */\n    protected _letterSpacing: number;\n\n    /**\n     * Text anchor.\n     * @readonly\n     * @private\n     */\n    protected _anchor: ObservablePoint;\n\n    /**\n     * Private tracker for the current font.\n     * @private\n     */\n    protected _font?: BitmapFont;\n\n    /**\n     * Private tracker for the current font name.\n     * @private\n     */\n    protected _fontName: string;\n\n    /**\n     * Private tracker for the current font size.\n     * @private\n     */\n    protected _fontSize?: number;\n\n    /**\n     * Private tracker for the current text align.\n     * @type {string}\n     * @private\n     */\n    protected _align: TextStyleAlign;\n\n    /** Collection of page mesh data. */\n    protected _activePagesMeshData: PageMeshData[];\n\n    /**\n     * Private tracker for the current tint.\n     * @private\n     */\n    protected _tintColor: Color;\n\n    /**\n     * If true PixiJS will Math.floor() x/y values when rendering.\n     * @default PIXI.settings.ROUND_PIXELS\n     */\n    protected _roundPixels: boolean;\n\n    /** Cached char texture is destroyed when BitmapText is destroyed. */\n    private _textureCache: Record<number, Texture>;\n\n    /**\n     * @param text - A string that you would like the text to display.\n     * @param style - The style parameters.\n     * @param {string} style.fontName - The installed BitmapFont name.\n     * @param {number} [style.fontSize] - The size of the font in pixels, e.g. 24. If undefined,\n     *.     this will default to the BitmapFont size.\n     * @param {string} [style.align='left'] - Alignment for multiline text ('left', 'center', 'right' or 'justify'),\n     *      does not affect single line text.\n     * @param {PIXI.ColorSource} [style.tint=0xFFFFFF] - The tint color.\n     * @param {number} [style.letterSpacing=0] - The amount of spacing between letters.\n     * @param {number} [style.maxWidth=0] - The max width of the text before line wrapping.\n     */\n    constructor(text: string, style: Partial<IBitmapTextStyle> = {})\n    {\n        super();\n\n        // Apply the defaults\n        const { align, tint, maxWidth, letterSpacing, fontName, fontSize } = Object.assign(\n            {}, BitmapText.styleDefaults, style);\n\n        if (!BitmapFont.available[fontName])\n        {\n            throw new Error(`Missing BitmapFont \"${fontName}\"`);\n        }\n\n        this._activePagesMeshData = [];\n        this._textWidth = 0;\n        this._textHeight = 0;\n        this._align = align;\n        this._tintColor = new Color(tint);\n        this._font = undefined;\n        this._fontName = fontName;\n        this._fontSize = fontSize;\n        this.text = text;\n        this._maxWidth = maxWidth;\n        this._maxLineHeight = 0;\n        this._letterSpacing = letterSpacing;\n        this._anchor = new ObservablePoint((): void => { this.dirty = true; }, this, 0, 0);\n        this._roundPixels = settings.ROUND_PIXELS;\n        this.dirty = true;\n        this._resolution = settings.RESOLUTION;\n        this._autoResolution = true;\n        this._textureCache = {};\n    }\n\n    /** Renders text and updates it when needed. This should only be called if the BitmapFont is regenerated. */\n    public updateText(): void\n    {\n        const data = BitmapFont.available[this._fontName];\n        const fontSize = this.fontSize;\n        const scale = fontSize / data.size;\n        const pos = new Point();\n        const chars: CharRenderData[] = [];\n        const lineWidths = [];\n        const lineSpaces = [];\n        const text = this._text.replace(/(?:\\r\\n|\\r)/g, '\\n') || ' ';\n        const charsInput = splitTextToCharacters(text);\n        const maxWidth = this._maxWidth * data.size / fontSize;\n        const pageMeshDataPool = data.distanceFieldType === 'none'\n            ? pageMeshDataDefaultPageMeshData : pageMeshDataMSDFPageMeshData;\n\n        let prevCharCode = null;\n        let lastLineWidth = 0;\n        let maxLineWidth = 0;\n        let line = 0;\n        let lastBreakPos = -1;\n        let lastBreakWidth = 0;\n        let spacesRemoved = 0;\n        let maxLineHeight = 0;\n        let spaceCount = 0;\n\n        for (let i = 0; i < charsInput.length; i++)\n        {\n            const char = charsInput[i];\n            const charCode = extractCharCode(char);\n\n            if ((/(?:\\s)/).test(char))\n            {\n                lastBreakPos = i;\n                lastBreakWidth = lastLineWidth;\n                spaceCount++;\n            }\n\n            if (char === '\\r' || char === '\\n')\n            {\n                lineWidths.push(lastLineWidth);\n                lineSpaces.push(-1);\n                maxLineWidth = Math.max(maxLineWidth, lastLineWidth);\n                ++line;\n                ++spacesRemoved;\n\n                pos.x = 0;\n                pos.y += data.lineHeight;\n                prevCharCode = null;\n                spaceCount = 0;\n                continue;\n            }\n\n            const charData = data.chars[charCode];\n\n            if (!charData)\n            {\n                continue;\n            }\n\n            if (prevCharCode && charData.kerning[prevCharCode])\n            {\n                pos.x += charData.kerning[prevCharCode];\n            }\n\n            const charRenderData: CharRenderData = charRenderDataPool.pop() || {\n                texture: Texture.EMPTY,\n                line: 0,\n                charCode: 0,\n                prevSpaces: 0,\n                position: new Point(),\n            };\n\n            charRenderData.texture = charData.texture;\n            charRenderData.line = line;\n            charRenderData.charCode = charCode;\n            charRenderData.position.x = Math.round(pos.x + charData.xOffset + (this._letterSpacing / 2));\n            charRenderData.position.y = Math.round(pos.y + charData.yOffset);\n            charRenderData.prevSpaces = spaceCount;\n\n            chars.push(charRenderData);\n\n            lastLineWidth = charRenderData.position.x\n                + Math.max(charData.xAdvance - charData.xOffset, charData.texture.orig.width);\n            pos.x += charData.xAdvance + this._letterSpacing;\n            maxLineHeight = Math.max(maxLineHeight, (charData.yOffset + charData.texture.height));\n            prevCharCode = charCode;\n\n            if (lastBreakPos !== -1 && maxWidth > 0 && pos.x > maxWidth)\n            {\n                ++spacesRemoved;\n                utils.removeItems(chars, 1 + lastBreakPos - spacesRemoved, 1 + i - lastBreakPos);\n                i = lastBreakPos;\n                lastBreakPos = -1;\n\n                lineWidths.push(lastBreakWidth);\n                lineSpaces.push(chars.length > 0 ? chars[chars.length - 1].prevSpaces : 0);\n                maxLineWidth = Math.max(maxLineWidth, lastBreakWidth);\n                line++;\n\n                pos.x = 0;\n                pos.y += data.lineHeight;\n                prevCharCode = null;\n                spaceCount = 0;\n            }\n        }\n\n        const lastChar = charsInput[charsInput.length - 1];\n\n        if (lastChar !== '\\r' && lastChar !== '\\n')\n        {\n            if ((/(?:\\s)/).test(lastChar))\n            {\n                lastLineWidth = lastBreakWidth;\n            }\n\n            lineWidths.push(lastLineWidth);\n            maxLineWidth = Math.max(maxLineWidth, lastLineWidth);\n            lineSpaces.push(-1);\n        }\n\n        const lineAlignOffsets = [];\n\n        for (let i = 0; i <= line; i++)\n        {\n            let alignOffset = 0;\n\n            if (this._align === 'right')\n            {\n                alignOffset = maxLineWidth - lineWidths[i];\n            }\n            else if (this._align === 'center')\n            {\n                alignOffset = (maxLineWidth - lineWidths[i]) / 2;\n            }\n            else if (this._align === 'justify')\n            {\n                alignOffset = lineSpaces[i] < 0 ? 0 : (maxLineWidth - lineWidths[i]) / lineSpaces[i];\n            }\n\n            lineAlignOffsets.push(alignOffset);\n        }\n\n        const lenChars = chars.length;\n\n        const pagesMeshData: Record<number, PageMeshData> = {};\n\n        const newPagesMeshData: PageMeshData[] = [];\n\n        const activePagesMeshData = this._activePagesMeshData;\n\n        pageMeshDataPool.push(...activePagesMeshData);\n\n        for (let i = 0; i < lenChars; i++)\n        {\n            const texture = chars[i].texture;\n            const baseTextureUid = texture.baseTexture.uid;\n\n            if (!pagesMeshData[baseTextureUid])\n            {\n                let pageMeshData = pageMeshDataPool.pop();\n\n                if (!pageMeshData)\n                {\n                    const geometry = new MeshGeometry();\n                    let material: MeshMaterial;\n                    let meshBlendMode: BLEND_MODES;\n\n                    if (data.distanceFieldType === 'none')\n                    {\n                        material = new MeshMaterial(Texture.EMPTY);\n                        meshBlendMode = BLEND_MODES.NORMAL;\n                    }\n                    else\n                    {\n                        material = new MeshMaterial(Texture.EMPTY,\n                            { program: Program.from(msdfVert, msdfFrag), uniforms: { uFWidth: 0 } });\n                        meshBlendMode = BLEND_MODES.NORMAL_NPM;\n                    }\n\n                    const mesh = new Mesh(geometry, material);\n\n                    mesh.blendMode = meshBlendMode;\n\n                    pageMeshData = {\n                        index: 0,\n                        indexCount: 0,\n                        vertexCount: 0,\n                        uvsCount: 0,\n                        total: 0,\n                        mesh,\n                        vertices: null,\n                        uvs: null,\n                        indices: null,\n                    };\n                }\n\n                // reset data..\n                pageMeshData.index = 0;\n                pageMeshData.indexCount = 0;\n                pageMeshData.vertexCount = 0;\n                pageMeshData.uvsCount = 0;\n                pageMeshData.total = 0;\n\n                // TODO need to get page texture here somehow..\n                const { _textureCache } = this;\n\n                _textureCache[baseTextureUid] = _textureCache[baseTextureUid] || new Texture(texture.baseTexture);\n                pageMeshData.mesh.texture = _textureCache[baseTextureUid];\n\n                pageMeshData.mesh.tint = this._tintColor.value;\n\n                newPagesMeshData.push(pageMeshData);\n\n                pagesMeshData[baseTextureUid] = pageMeshData;\n            }\n\n            pagesMeshData[baseTextureUid].total++;\n        }\n\n        // lets find any previously active pageMeshDatas that are no longer required for\n        // the updated text (if any), removed and return them to the pool.\n        for (let i = 0; i < activePagesMeshData.length; i++)\n        {\n            if (!newPagesMeshData.includes(activePagesMeshData[i]))\n            {\n                this.removeChild(activePagesMeshData[i].mesh);\n            }\n        }\n\n        // next lets add any new meshes, that have not yet been added to this BitmapText\n        // we only add if its not already a child of this BitmapObject\n        for (let i = 0; i < newPagesMeshData.length; i++)\n        {\n            if (newPagesMeshData[i].mesh.parent !== this)\n            {\n                this.addChild(newPagesMeshData[i].mesh);\n            }\n        }\n\n        // active page mesh datas are set to be the new pages added.\n        this._activePagesMeshData = newPagesMeshData;\n\n        for (const i in pagesMeshData)\n        {\n            const pageMeshData = pagesMeshData[i];\n            const total = pageMeshData.total;\n\n            // lets only allocate new buffers if we can fit the new text in the current ones..\n            // unless that is, we will be batching. Currently batching dose not respect the size property of mesh\n            if (!(pageMeshData.indices?.length > 6 * total) || pageMeshData.vertices.length < Mesh.BATCHABLE_SIZE * 2)\n            {\n                pageMeshData.vertices = new Float32Array(4 * 2 * total);\n                pageMeshData.uvs = new Float32Array(4 * 2 * total);\n                pageMeshData.indices = new Uint16Array(6 * total);\n            }\n            else\n            {\n                const total = pageMeshData.total;\n                const vertices = pageMeshData.vertices;\n\n                // Clear the garbage at the end of the vertices buffer. This will prevent the bounds miscalculation.\n                for (let i = total * 4 * 2; i < vertices.length; i++)\n                {\n                    vertices[i] = 0;\n                }\n            }\n\n            // as a buffer maybe bigger than the current word, we set the size of the meshMaterial\n            // to match the number of letters needed\n            pageMeshData.mesh.size = 6 * total;\n        }\n\n        for (let i = 0; i < lenChars; i++)\n        {\n            const char = chars[i];\n            let offset = char.position.x + (lineAlignOffsets[char.line] * (this._align === 'justify' ? char.prevSpaces : 1));\n\n            if (this._roundPixels)\n            {\n                offset = Math.round(offset);\n            }\n\n            const xPos = offset * scale;\n            const yPos = char.position.y * scale;\n            const texture = char.texture;\n\n            const pageMesh = pagesMeshData[texture.baseTexture.uid];\n\n            const textureFrame = texture.frame;\n            const textureUvs = texture._uvs;\n\n            const index = pageMesh.index++;\n\n            pageMesh.indices[(index * 6) + 0] = 0 + (index * 4);\n            pageMesh.indices[(index * 6) + 1] = 1 + (index * 4);\n            pageMesh.indices[(index * 6) + 2] = 2 + (index * 4);\n            pageMesh.indices[(index * 6) + 3] = 0 + (index * 4);\n            pageMesh.indices[(index * 6) + 4] = 2 + (index * 4);\n            pageMesh.indices[(index * 6) + 5] = 3 + (index * 4);\n\n            pageMesh.vertices[(index * 8) + 0] = xPos;\n            pageMesh.vertices[(index * 8) + 1] = yPos;\n\n            pageMesh.vertices[(index * 8) + 2] = xPos + (textureFrame.width * scale);\n            pageMesh.vertices[(index * 8) + 3] = yPos;\n\n            pageMesh.vertices[(index * 8) + 4] = xPos + (textureFrame.width * scale);\n            pageMesh.vertices[(index * 8) + 5] = yPos + (textureFrame.height * scale);\n\n            pageMesh.vertices[(index * 8) + 6] = xPos;\n            pageMesh.vertices[(index * 8) + 7] = yPos + (textureFrame.height * scale);\n\n            pageMesh.uvs[(index * 8) + 0] = textureUvs.x0;\n            pageMesh.uvs[(index * 8) + 1] = textureUvs.y0;\n\n            pageMesh.uvs[(index * 8) + 2] = textureUvs.x1;\n            pageMesh.uvs[(index * 8) + 3] = textureUvs.y1;\n\n            pageMesh.uvs[(index * 8) + 4] = textureUvs.x2;\n            pageMesh.uvs[(index * 8) + 5] = textureUvs.y2;\n\n            pageMesh.uvs[(index * 8) + 6] = textureUvs.x3;\n            pageMesh.uvs[(index * 8) + 7] = textureUvs.y3;\n        }\n\n        this._textWidth = maxLineWidth * scale;\n        this._textHeight = (pos.y + data.lineHeight) * scale;\n\n        for (const i in pagesMeshData)\n        {\n            const pageMeshData = pagesMeshData[i];\n\n            // apply anchor\n            if (this.anchor.x !== 0 || this.anchor.y !== 0)\n            {\n                let vertexCount = 0;\n\n                const anchorOffsetX = this._textWidth * this.anchor.x;\n                const anchorOffsetY = this._textHeight * this.anchor.y;\n\n                for (let i = 0; i < pageMeshData.total; i++)\n                {\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetX;\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetY;\n\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetX;\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetY;\n\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetX;\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetY;\n\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetX;\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetY;\n                }\n            }\n\n            this._maxLineHeight = maxLineHeight * scale;\n\n            const vertexBuffer = pageMeshData.mesh.geometry.getBuffer('aVertexPosition');\n            const textureBuffer = pageMeshData.mesh.geometry.getBuffer('aTextureCoord');\n            const indexBuffer = pageMeshData.mesh.geometry.getIndex();\n\n            vertexBuffer.data = pageMeshData.vertices;\n            textureBuffer.data = pageMeshData.uvs;\n            indexBuffer.data = pageMeshData.indices;\n\n            vertexBuffer.update();\n            textureBuffer.update();\n            indexBuffer.update();\n        }\n\n        for (let i = 0; i < chars.length; i++)\n        {\n            charRenderDataPool.push(chars[i]);\n        }\n\n        this._font = data;\n        this.dirty = false;\n    }\n\n    updateTransform(): void\n    {\n        this.validate();\n        this.containerUpdateTransform();\n    }\n\n    _render(renderer: Renderer): void\n    {\n        if (this._autoResolution && this._resolution !== renderer.resolution)\n        {\n            this._resolution = renderer.resolution;\n            this.dirty = true;\n        }\n\n        // Update the uniform\n        const { distanceFieldRange, distanceFieldType, size } = BitmapFont.available[this._fontName];\n\n        if (distanceFieldType !== 'none')\n        {\n            // Inject the shader code with the correct value\n            const { a, b, c, d } = this.worldTransform;\n\n            const dx = Math.sqrt((a * a) + (b * b));\n            const dy = Math.sqrt((c * c) + (d * d));\n            const worldScale = (Math.abs(dx) + Math.abs(dy)) / 2;\n\n            const fontScale = this.fontSize / size;\n\n            const resolution = renderer._view.resolution;\n\n            for (const mesh of this._activePagesMeshData)\n            {\n                mesh.mesh.shader.uniforms.uFWidth = worldScale * distanceFieldRange * fontScale * resolution;\n            }\n        }\n\n        super._render(renderer);\n    }\n\n    /**\n     * Validates text before calling parent's getLocalBounds\n     * @returns - The rectangular bounding area\n     */\n    public getLocalBounds(): Rectangle\n    {\n        this.validate();\n\n        return super.getLocalBounds();\n    }\n\n    /**\n     * Updates text when needed\n     * @private\n     */\n    protected validate(): void\n    {\n        const font = BitmapFont.available[this._fontName];\n\n        if (!font)\n        {\n            throw new Error(`Missing BitmapFont \"${this._fontName}\"`);\n        }\n        if (this._font !== font)\n        {\n            this.dirty = true;\n        }\n\n        if (this.dirty)\n        {\n            this.updateText();\n        }\n    }\n\n    /**\n     * The tint of the BitmapText object.\n     * @default 0xffffff\n     */\n    public get tint(): ColorSource\n    {\n        return this._tintColor.value;\n    }\n\n    public set tint(value: ColorSource)\n    {\n        if (this.tint === value) return;\n\n        this._tintColor.setValue(value);\n\n        for (let i = 0; i < this._activePagesMeshData.length; i++)\n        {\n            this._activePagesMeshData[i].mesh.tint = value;\n        }\n    }\n\n    /**\n     * The alignment of the BitmapText object.\n     * @member {string}\n     * @default 'left'\n     */\n    public get align(): TextStyleAlign\n    {\n        return this._align;\n    }\n\n    public set align(value: TextStyleAlign)\n    {\n        if (this._align !== value)\n        {\n            this._align = value;\n            this.dirty = true;\n        }\n    }\n\n    /** The name of the BitmapFont. */\n    public get fontName(): string\n    {\n        return this._fontName;\n    }\n\n    public set fontName(value: string)\n    {\n        if (!BitmapFont.available[value])\n        {\n            throw new Error(`Missing BitmapFont \"${value}\"`);\n        }\n\n        if (this._fontName !== value)\n        {\n            this._fontName = value;\n            this.dirty = true;\n        }\n    }\n\n    /** The size of the font to display. */\n    public get fontSize(): number\n    {\n        return this._fontSize ?? BitmapFont.available[this._fontName].size;\n    }\n\n    public set fontSize(value: number | undefined)\n    {\n        if (this._fontSize !== value)\n        {\n            this._fontSize = value;\n            this.dirty = true;\n        }\n    }\n\n    /**\n     * The anchor sets the origin point of the text.\n     *\n     * The default is `(0,0)`, this means the text's origin is the top left.\n     *\n     * Setting the anchor to `(0.5,0.5)` means the text's origin is centered.\n     *\n     * Setting the anchor to `(1,1)` would mean the text's origin point will be the bottom right corner.\n     */\n    public get anchor(): ObservablePoint\n    {\n        return this._anchor;\n    }\n\n    public set anchor(value: ObservablePoint)\n    {\n        if (typeof value === 'number')\n        {\n            this._anchor.set(value);\n        }\n        else\n        {\n            this._anchor.copyFrom(value);\n        }\n    }\n\n    /** The text of the BitmapText object. */\n    public get text(): string\n    {\n        return this._text;\n    }\n\n    public set text(text: string)\n    {\n        text = String(text === null || text === undefined ? '' : text);\n\n        if (this._text === text)\n        {\n            return;\n        }\n        this._text = text;\n        this.dirty = true;\n    }\n\n    /**\n     * The max width of this bitmap text in pixels. If the text provided is longer than the\n     * value provided, line breaks will be automatically inserted in the last whitespace.\n     * Disable by setting the value to 0.\n     */\n    public get maxWidth(): number\n    {\n        return this._maxWidth;\n    }\n\n    public set maxWidth(value: number)\n    {\n        if (this._maxWidth === value)\n        {\n            return;\n        }\n        this._maxWidth = value;\n        this.dirty = true;\n    }\n\n    /**\n     * The max line height. This is useful when trying to use the total height of the Text,\n     * i.e. when trying to vertically align.\n     * @readonly\n     */\n    public get maxLineHeight(): number\n    {\n        this.validate();\n\n        return this._maxLineHeight;\n    }\n\n    /**\n     * The width of the overall text, different from fontSize,\n     * which is defined in the style object.\n     * @readonly\n     */\n    public get textWidth(): number\n    {\n        this.validate();\n\n        return this._textWidth;\n    }\n\n    /** Additional space between characters. */\n    public get letterSpacing(): number\n    {\n        return this._letterSpacing;\n    }\n\n    public set letterSpacing(value: number)\n    {\n        if (this._letterSpacing !== value)\n        {\n            this._letterSpacing = value;\n            this.dirty = true;\n        }\n    }\n\n    /**\n     * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n     * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n     * The main disadvantage is movement of objects may appear less smooth.\n     * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}\n     * @default PIXI.settings.ROUND_PIXELS\n     */\n    public get roundPixels(): boolean\n    {\n        return this._roundPixels;\n    }\n\n    public set roundPixels(value: boolean)\n    {\n        if (value !== this._roundPixels)\n        {\n            this._roundPixels = value;\n            this.dirty = true;\n        }\n    }\n\n    /**\n     * The height of the overall text, different from fontSize,\n     * which is defined in the style object.\n     * @readonly\n     */\n    public get textHeight(): number\n    {\n        this.validate();\n\n        return this._textHeight;\n    }\n\n    /**\n     * The resolution / device pixel ratio of the canvas.\n     *\n     * This is set to automatically match the renderer resolution by default, but can be overridden by setting manually.\n     * @default 1\n     */\n    get resolution(): number\n    {\n        return this._resolution;\n    }\n\n    set resolution(value: number)\n    {\n        this._autoResolution = false;\n\n        if (this._resolution === value)\n        {\n            return;\n        }\n\n        this._resolution = value;\n        this.dirty = true;\n    }\n\n    destroy(options?: boolean | IDestroyOptions): void\n    {\n        const { _textureCache } = this;\n        const data = BitmapFont.available[this._fontName];\n        const pageMeshDataPool = data.distanceFieldType === 'none'\n            ? pageMeshDataDefaultPageMeshData : pageMeshDataMSDFPageMeshData;\n\n        pageMeshDataPool.push(...this._activePagesMeshData);\n        for (const pageMeshData of this._activePagesMeshData)\n        {\n            this.removeChild(pageMeshData.mesh);\n        }\n        this._activePagesMeshData = [];\n\n        // Release references to any cached textures in page pool\n        pageMeshDataPool\n            .filter((page) => _textureCache[page.mesh.texture.baseTexture.uid])\n            .forEach((page) =>\n            {\n                page.mesh.texture = Texture.EMPTY;\n            });\n\n        for (const id in _textureCache)\n        {\n            const texture = _textureCache[id];\n\n            texture.destroy();\n            delete _textureCache[id];\n        }\n\n        this._font = null;\n        this._tintColor = null;\n        this._textureCache = null;\n\n        super.destroy(options);\n    }\n}\n", "import { copySearchParams, LoaderParserPriority } from '@pixi/assets';\nimport { extensions, ExtensionType, settings, utils } from '@pixi/core';\nimport { BitmapFont } from './BitmapFont';\nimport { TextFormat, XMLStringFormat } from './formats';\n\nimport type { LoadAsset, Loader, LoaderParser } from '@pixi/assets';\nimport type { Texture } from '@pixi/core';\nimport type { BitmapFontData } from './BitmapFontData';\n\nconst validExtensions = ['.xml', '.fnt'];\n\n/** simple loader plugin for loading in bitmap fonts! */\nexport const loadBitmapFont = {\n    extension: {\n        type: ExtensionType.LoadParser,\n        priority: LoaderParserPriority.Normal,\n    },\n\n    name: 'loadBitmapFont',\n\n    test(url: string): boolean\n    {\n        return validExtensions.includes(utils.path.extname(url).toLowerCase());\n    },\n\n    async testParse(data: string): Promise<boolean>\n    {\n        return TextFormat.test(data) || XMLStringFormat.test(data);\n    },\n\n    async parse(asset: string, data: LoadAsset, loader: Loader): Promise<BitmapFont>\n    {\n        const fontData: BitmapFontData = TextFormat.test(asset)\n            ? TextFormat.parse(asset)\n            : XMLStringFormat.parse(asset);\n\n        const { src } = data;\n        const { page: pages } = fontData;\n        const textureUrls = [];\n\n        for (let i = 0; i < pages.length; ++i)\n        {\n            const pageFile = pages[i].file;\n            let imagePath = utils.path.join(utils.path.dirname(src), pageFile);\n\n            imagePath = copySearchParams(imagePath, src);\n\n            textureUrls.push(imagePath);\n        }\n\n        const loadedTextures = await loader.load<Texture>(textureUrls);\n        const textures = textureUrls.map((url) => loadedTextures[url]);\n\n        return BitmapFont.install(fontData, textures, true);\n    },\n\n    async load(url: string, _options: LoadAsset): Promise<string>\n    {\n        const response = await settings.ADAPTER.fetch(url);\n\n        return response.text();\n    },\n\n    unload(bitmapFont: BitmapFont): void\n    {\n        bitmapFont.destroy();\n    }\n} as LoaderParser<BitmapFont | string>;\n\nextensions.add(loadBitmapFont);\n", "import { settings, utils } from '@pixi/core';\nimport { TextStyle } from '@pixi/text';\n\nimport type {\n    ITextStyle,\n    TextStyleFontStyle,\n    TextStyleFontWeight,\n    TextStyleLineJoin,\n    TextStyleTextBaseline\n} from '@pixi/text';\n\n/**\n * HTMLText support more white-space options.\n * @memberof PIXI\n * @since 7.2.0\n * @see PIXI.IHTMLTextStyle\n */\nexport type HTMLTextStyleWhiteSpace = 'normal' | 'pre' | 'pre-line' | 'nowrap' | 'pre-wrap';\n\n// Subset of ITextStyle\ntype ITextStyleIgnore = 'whiteSpace'\n| 'fillGradientStops'\n| 'fillGradientType'\n| 'miterLimit'\n| 'textBaseline'\n| 'trim'\n| 'leading'\n| 'lineJoin';\n\n/**\n * Modifed versions from ITextStyle.\n * @memberof PIXI\n * @extends PIXI.ITextStyle\n * @since 7.2.0\n */\nexport interface IHTMLTextStyle extends Omit<ITextStyle, ITextStyleIgnore>\n{\n    /** White-space with expanded options. */\n    whiteSpace: HTMLTextStyleWhiteSpace;\n}\n\n/**\n * Font information for HTMLText\n * @memberof PIXI\n * @since 7.2.0\n */\nexport interface IHTMLFont\n{\n    /** User-supplied URL request */\n    originalUrl: string;\n    /** Base64 string for font */\n    dataSrc: string;\n    /** FontFace installed in the document */\n    fontFace: FontFace | null;\n    /** Blob-based URL for font */\n    src: string;\n    /** Family name of font */\n    family: string;\n    /** Weight of the font */\n    weight: TextStyleFontWeight;\n    /** Style of the font */\n    style: TextStyleFontStyle;\n    /** Reference counter */\n    refs: number;\n}\n\n/**\n * Used internally to restrict text style usage and convert easily to CSS.\n * @class\n * @memberof PIXI\n * @param {PIXI.ITextStyle|PIXI.IHTMLTextStyle} [style] - Style to copy.\n * @since 7.2.0\n */\nexport class HTMLTextStyle extends TextStyle\n{\n    /** The collection of installed fonts */\n    public static availableFonts: Record<string, IHTMLFont> = {};\n\n    /**\n     * List of default options, these are largely the same as TextStyle,\n     * with the exception of whiteSpace, which is set to 'normal' by default.\n     */\n    public static readonly defaultOptions: IHTMLTextStyle = {\n        /** Align */\n        align: 'left',\n        /** Break words */\n        breakWords: false,\n        /** Drop shadow */\n        dropShadow: false,\n        /** Drop shadow alpha */\n        dropShadowAlpha: 1,\n        /**\n         * Drop shadow angle\n         * @type {number}\n         * @default Math.PI / 6\n         */\n        dropShadowAngle: Math.PI / 6,\n        /** Drop shadow blur */\n        dropShadowBlur: 0,\n        /** Drop shadow color */\n        dropShadowColor: 'black',\n        /** Drop shadow distance */\n        dropShadowDistance: 5,\n        /** Fill */\n        fill: 'black',\n        /** Font family */\n        fontFamily: 'Arial',\n        /** Font size */\n        fontSize: 26,\n        /** Font style */\n        fontStyle: 'normal',\n        /** Font variant */\n        fontVariant: 'normal',\n        /** Font weight */\n        fontWeight: 'normal',\n        /** Letter spacing */\n        letterSpacing: 0,\n        /** Line height */\n        lineHeight: 0,\n        /** Padding */\n        padding: 0,\n        /** Stroke */\n        stroke: 'black',\n        /** Stroke thickness */\n        strokeThickness: 0,\n        /** White space */\n        whiteSpace: 'normal',\n        /** Word wrap */\n        wordWrap: false,\n        /** Word wrap width */\n        wordWrapWidth: 100,\n    };\n\n    /** For using custom fonts */\n    private _fonts: IHTMLFont[] = [];\n\n    /** List of internal style rules */\n    private _overrides: string[] = [];\n\n    /** Global rules or stylesheet, useful for creating rules for rendering */\n    private _stylesheet = '';\n\n    /** Track font changes internally */\n    private fontsDirty = false;\n\n    /**\n     * Convert a TextStyle to HTMLTextStyle\n     * @param originalStyle\n     * @example\n     * import {TextStyle } from 'pixi.js';\n     * import {HTMLTextStyle} from '@pixi/text-html';\n     * const style = new TextStyle();\n     * const htmlStyle = HTMLTextStyle.from(style);\n     */\n    static from(originalStyle: TextStyle | Partial<IHTMLTextStyle>): HTMLTextStyle\n    {\n        return new HTMLTextStyle(Object.keys(HTMLTextStyle.defaultOptions)\n            .reduce((obj, prop) => ({ ...obj, [prop]: originalStyle[prop as keyof IHTMLTextStyle] }), {})\n        );\n    }\n\n    /** Clear the current font */\n    public cleanFonts(): void\n    {\n        if (this._fonts.length > 0)\n        {\n            this._fonts.forEach((font) =>\n            {\n                URL.revokeObjectURL(font.src);\n                font.refs--;\n                if (font.refs === 0)\n                {\n                    if (font.fontFace)\n                    {\n                        document.fonts.delete(font.fontFace);\n                    }\n                    delete HTMLTextStyle.availableFonts[font.originalUrl];\n                }\n            });\n            this.fontFamily = 'Arial';\n            this._fonts.length = 0;\n            this.styleID++;\n            this.fontsDirty = true;\n        }\n    }\n\n    /**\n     * Because of how HTMLText renders, fonts need to be imported\n     * @param url\n     * @param options\n     */\n    public loadFont(url: string, options: Partial<Pick<IHTMLFont, 'weight' | 'style' | 'family'>> = {}): Promise<void>\n    {\n        const { availableFonts } = HTMLTextStyle;\n\n        // Font is already installed\n        if (availableFonts[url])\n        {\n            const font = availableFonts[url];\n\n            this._fonts.push(font);\n            font.refs++;\n            this.styleID++;\n            this.fontsDirty = true;\n\n            return Promise.resolve();\n        }\n\n        return settings.ADAPTER.fetch(url)\n            .then((response) => response.blob())\n            .then(async (blob) => new Promise<[string, string]>((resolve, reject) =>\n            {\n                const src = URL.createObjectURL(blob);\n                const reader = new FileReader();\n\n                reader.onload = () => resolve([src, reader.result as string]);\n                reader.onerror = reject;\n                reader.readAsDataURL(blob);\n            }))\n            .then(async ([src, dataSrc]) =>\n            {\n                const font: IHTMLFont = Object.assign({\n                    family: utils.path.basename(url, utils.path.extname(url)),\n                    weight: 'normal',\n                    style: 'normal',\n                    src,\n                    dataSrc,\n                    refs: 1,\n                    originalUrl: url,\n                    fontFace: null,\n                }, options);\n\n                availableFonts[url] = font;\n                this._fonts.push(font);\n                this.styleID++;\n\n                // Load it into the current DOM so we can properly measure it!\n                const fontFace = new FontFace(font.family, `url(${font.src})`, {\n                    weight: font.weight,\n                    style: font.style,\n                });\n\n                // Keep this reference so we can remove it later from document\n                font.fontFace = fontFace;\n\n                await fontFace.load();\n                document.fonts.add(fontFace);\n                await document.fonts.ready;\n\n                this.styleID++;\n                this.fontsDirty = true;\n            });\n    }\n\n    /**\n     * Add a style override, this can be any CSS property\n     * it will override any built-in style. This is the\n     * property and the value as a string (e.g., `color: red`).\n     * This will override any other internal style.\n     * @param {string} value - CSS style(s) to add.\n     * @example\n     * style.addOverride('background-color: red');\n     */\n    public addOverride(...value: string[]): void\n    {\n        const toAdd = value.filter((v) => !this._overrides.includes(v));\n\n        if (toAdd.length > 0)\n        {\n            this._overrides.push(...toAdd);\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Remove any overrides that match the value.\n     * @param {string} value - CSS style to remove.\n     * @example\n     * style.removeOverride('background-color: red');\n     */\n    public removeOverride(...value: string[]): void\n    {\n        const toRemove = value.filter((v) => this._overrides.includes(v));\n\n        if (toRemove.length > 0)\n        {\n            this._overrides = this._overrides.filter((v) => !toRemove.includes(v));\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Internally converts all of the style properties into CSS equivalents.\n     * @param scale\n     * @returns The CSS style string, for setting `style` property of root HTMLElement.\n     */\n    public toCSS(scale: number): string\n    {\n        return [\n            `transform: scale(${scale})`,\n            `transform-origin: top left`,\n            'display: inline-block',\n            `color: ${this.normalizeColor(this.fill)}`,\n            `font-size: ${(this.fontSize as number)}px`,\n            `font-family: ${this.fontFamily}`,\n            `font-weight: ${this.fontWeight}`,\n            `font-style: ${this.fontStyle}`,\n            `font-variant: ${this.fontVariant}`,\n            `letter-spacing: ${this.letterSpacing}px`,\n            `text-align: ${this.align}`,\n            `padding: ${this.padding}px`,\n            `white-space: ${this.whiteSpace}`,\n            ...this.lineHeight ? [`line-height: ${this.lineHeight}px`] : [],\n            ...this.wordWrap ? [\n                `word-wrap: ${this.breakWords ? 'break-all' : 'break-word'}`,\n                `max-width: ${this.wordWrapWidth}px`\n            ] : [],\n            ...this.strokeThickness ? [\n                `-webkit-text-stroke-width: ${this.strokeThickness}px`,\n                `-webkit-text-stroke-color: ${this.normalizeColor(this.stroke)}`,\n                `text-stroke-width: ${this.strokeThickness}px`,\n                `text-stroke-color: ${this.normalizeColor(this.stroke)}`,\n                'paint-order: stroke',\n            ] : [],\n            ...this.dropShadow ? [this.dropShadowToCSS()] : [],\n            ...this._overrides,\n        ].join(';');\n    }\n\n    /** Get the font CSS styles from the loaded font, If available. */\n    public toGlobalCSS(): string\n    {\n        return this._fonts.reduce((result, font) => (\n            `${result}\n            @font-face {\n                font-family: \"${font.family}\";\n                src: url('${font.dataSrc}');\n                font-weight: ${font.weight};\n                font-style: ${font.style}; \n            }`\n        ), this._stylesheet);\n    }\n\n    /** Internal stylesheet contents, useful for creating rules for rendering */\n    public get stylesheet(): string\n    {\n        return this._stylesheet;\n    }\n    public set stylesheet(value: string)\n    {\n        if (this._stylesheet !== value)\n        {\n            this._stylesheet = value;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Convert numerical colors into hex-strings\n     * @param color\n     */\n    private normalizeColor(color: any): string\n    {\n        if (Array.isArray(color))\n        {\n            color = utils.rgb2hex(color);\n        }\n\n        if (typeof color === 'number')\n        {\n            return utils.hex2string(color);\n        }\n\n        return color;\n    }\n\n    /** Convert the internal drop-shadow settings to CSS text-shadow */\n    private dropShadowToCSS(): string\n    {\n        let color = this.normalizeColor(this.dropShadowColor);\n        const alpha = this.dropShadowAlpha;\n        const x = Math.round(Math.cos(this.dropShadowAngle) * this.dropShadowDistance);\n        const y = Math.round(Math.sin(this.dropShadowAngle) * this.dropShadowDistance);\n\n        // Append alpha to color\n        if (color.startsWith('#') && alpha < 1)\n        {\n            color += (alpha * 255 | 0).toString(16).padStart(2, '0');\n        }\n\n        const position = `${x}px ${y}px`;\n\n        if (this.dropShadowBlur > 0)\n        {\n            return `text-shadow: ${position} ${this.dropShadowBlur}px ${color}`;\n        }\n\n        return `text-shadow: ${position} ${color}`;\n    }\n\n    /** Resets all properties to the defaults specified in TextStyle.prototype._default */\n    public reset(): void\n    {\n        Object.assign(this, HTMLTextStyle.defaultOptions);\n    }\n\n    /**\n     * Called after the image is loaded but before drawing to the canvas.\n     * Mostly used to handle Safari's font loading bug.\n     * @ignore\n     */\n    public onBeforeDraw()\n    {\n        const { fontsDirty: prevFontsDirty } = this;\n\n        this.fontsDirty = false;\n\n        // Safari has a known bug where embedded fonts are not available\n        // immediately after the image loads, to compensate we wait an\n        // arbitrary amount of time\n        // @see https://bugs.webkit.org/show_bug.cgi?id=219770\n        if (this.isSafari && this._fonts.length > 0 && prevFontsDirty)\n        {\n            return new Promise<void>((resolve) => setTimeout(resolve, 100));\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Proving that Safari is the new IE\n     * @ignore\n     */\n    private get isSafari(): boolean\n    {\n        const { userAgent } = settings.ADAPTER.getNavigator();\n\n        return (/^((?!chrome|android).)*safari/i).test(userAgent);\n    }\n\n    override set fillGradientStops(_value: number[])\n    {\n        console.warn('[HTMLTextStyle] fillGradientStops is not supported by HTMLText');\n    }\n    override get fillGradientStops()\n    {\n        return super.fillGradientStops;\n    }\n\n    override set fillGradientType(_value: number)\n    {\n        console.warn('[HTMLTextStyle] fillGradientType is not supported by HTMLText');\n    }\n    override get fillGradientType()\n    {\n        return super.fillGradientType;\n    }\n\n    override set miterLimit(_value: number)\n    {\n        console.warn('[HTMLTextStyle] miterLimit is not supported by HTMLText');\n    }\n    override get miterLimit()\n    {\n        return super.miterLimit;\n    }\n\n    override set trim(_value: boolean)\n    {\n        console.warn('[HTMLTextStyle] trim is not supported by HTMLText');\n    }\n    override get trim()\n    {\n        return super.trim;\n    }\n\n    override set textBaseline(_value: TextStyleTextBaseline)\n    {\n        console.warn('[HTMLTextStyle] textBaseline is not supported by HTMLText');\n    }\n    override get textBaseline()\n    {\n        return super.textBaseline;\n    }\n\n    override set leading(_value: number)\n    {\n        console.warn('[HTMLTextStyle] leading is not supported by HTMLText');\n    }\n    override get leading()\n    {\n        return super.leading;\n    }\n\n    override set lineJoin(_value: TextStyleLineJoin)\n    {\n        console.warn('[HTMLTextStyle] lineJoin is not supported by HTMLText');\n    }\n    override get lineJoin()\n    {\n        return super.lineJoin;\n    }\n}\n", "import { Rectangle, settings, Texture, utils } from '@pixi/core';\nimport { Sprite } from '@pixi/sprite';\nimport { TextStyle } from '@pixi/text';\nimport { HTMLTextStyle } from './HTMLTextStyle';\n\nimport type { ImageResource, IRenderer, ISize, Renderer } from '@pixi/core';\nimport type { IDestroyOptions } from '@pixi/display';\nimport type { ITextStyle } from '@pixi/text';\n\n/**\n * Alternative to {@link PIXI.Text|Text} but supports multi-style HTML text. There are\n * few key differences between this and {@link PIXI.Text|Text}:\n * <br>&bull; HTMLText not support {@link https://caniuse.com/mdn-svg_elements_foreignobject|Internet Explorer}.\n * <br>&bull; Rendering is text asynchronous. If statically rendering, listen to `update` event on BaseTexture.\n * <br>&bull; Does not support all style options (e.g., `lineJoin`, `leading`, `textBaseline`, `trim`, `miterLimit`,\n *   `fillGradientStops`, `fillGradientType`)\n * @example\n * import { HTMLText } from 'pixi.js';\n *\n * const text = new HTMLText(\"Hello <b>World</b>\", { fontSize: 20 });\n *\n * text.texture.baseTexture.on('update', () => {\n *   console.log('Text is redrawn!');\n * });\n * @class\n * @memberof PIXI\n * @extends PIXI.Sprite\n * @since 7.2.0\n */\nexport class HTMLText extends Sprite\n{\n    /**\n     * Default opens when destroying.\n     * @type {PIXI.IDestroyOptions}\n     * @property {boolean} [texture=true] - Whether to destroy the texture.\n     * @property {boolean} [children=false] - Whether to destroy the children.\n     * @property {boolean} [baseTexture=true] - Whether to destroy the base texture.\n     */\n    public static defaultDestroyOptions: IDestroyOptions = {\n        texture: true,\n        children: false,\n        baseTexture: true,\n    };\n\n    /** Default maxWidth, set at construction */\n    public static defaultMaxWidth = 2024;\n\n    /** Default maxHeight, set at construction */\n    public static defaultMaxHeight = 2024;\n\n    /** Default resolution, make sure autoResolution or defaultAutoResolution is `false`. */\n    public static defaultResolution: number | undefined;\n\n    /** Default autoResolution for all HTMLText objects */\n    public static defaultAutoResolution = true;\n\n    /** The maximum width in rendered pixels that the content can be, any larger will be hidden */\n    public maxWidth: number;\n\n    /** The maximum height in rendered pixels that the content can be, any larger will be hidden */\n    public maxHeight: number;\n\n    private _domElement: HTMLElement;\n    private _styleElement: HTMLElement;\n    private _svgRoot: SVGSVGElement;\n    private _foreignObject: SVGForeignObjectElement;\n    private _image: HTMLImageElement;\n    private _loadImage: HTMLImageElement;\n    private _resolution: number;\n    private _text: string | null = null;\n    private _style: HTMLTextStyle | null = null;\n    private _autoResolution = true;\n    private _loading = false;\n    private localStyleID = -1;\n    private dirty = false;\n\n    /** The HTMLTextStyle object is owned by this instance */\n    private ownsStyle = false;\n\n    /**\n     * @param {string} [text] - Text contents\n     * @param {PIXI.HTMLTextStyle|PIXI.TextStyle|PIXI.ITextStyle} [style] - Style setting to use.\n     *        Strongly recommend using an HTMLTextStyle object. Providing a PIXI.TextStyle\n     *        will convert the TextStyle to an HTMLTextStyle and will no longer be linked.\n     */\n    constructor(text = '', style: HTMLTextStyle | TextStyle | Partial<ITextStyle> = {})\n    {\n        super(Texture.EMPTY);\n\n        const image = new Image();\n        const texture = Texture.from<ImageResource>(image, {\n            scaleMode: settings.SCALE_MODE,\n            resourceOptions: {\n                autoLoad: false,\n            },\n        });\n\n        texture.orig = new Rectangle();\n        texture.trim = new Rectangle();\n\n        this.texture = texture;\n\n        const nssvg = 'http://www.w3.org/2000/svg';\n        const nsxhtml = 'http://www.w3.org/1999/xhtml';\n        const svgRoot = document.createElementNS(nssvg, 'svg');\n        const foreignObject = document.createElementNS(nssvg, 'foreignObject');\n        const domElement = document.createElementNS(nsxhtml, 'div');\n        const styleElement = document.createElementNS(nsxhtml, 'style');\n\n        // Arbitrary max size\n        foreignObject.setAttribute('width', '10000');\n        foreignObject.setAttribute('height', '10000');\n        foreignObject.style.overflow = 'hidden';\n        svgRoot.appendChild(foreignObject);\n\n        this.maxWidth = HTMLText.defaultMaxWidth;\n        this.maxHeight = HTMLText.defaultMaxHeight;\n        this._domElement = domElement;\n        this._styleElement = styleElement;\n        this._svgRoot = svgRoot;\n        this._foreignObject = foreignObject;\n        this._foreignObject.appendChild(styleElement);\n        this._foreignObject.appendChild(domElement);\n        this._image = image;\n        this._loadImage = new Image();\n        this._autoResolution = HTMLText.defaultAutoResolution;\n        this._resolution = HTMLText.defaultResolution ?? settings.RESOLUTION;\n        this.text = text;\n        this.style = style;\n    }\n\n    /**\n     * Calculate the size of the output text without actually drawing it.\n     * This includes the `padding` in the `style` object.\n     * This can be used as a fast-pass to do things like text-fitting.\n     * @param {object} [overrides] - Overrides for the text, style, and resolution.\n     * @param {string} [overrides.text] - The text to measure, if not specified, the current text is used.\n     * @param {PIXI.HTMLTextStyle} [overrides.style] - The style to measure, if not specified, the current style is used.\n     * @param {number} [overrides.resolution] - The resolution to measure, if not specified, the current resolution is used.\n     * @returns {PIXI.ISize} Width and height of the measured text.\n     */\n    measureText(overrides?: { text?: string, style?: HTMLTextStyle, resolution?: number }): ISize\n    {\n        const { text, style, resolution } = Object.assign({\n            text: this._text,\n            style: this._style,\n            resolution: this._resolution,\n        }, overrides);\n\n        Object.assign(this._domElement, {\n            innerHTML: text,\n            style: style.toCSS(resolution),\n        });\n        this._styleElement.textContent = style.toGlobalCSS();\n\n        // Measure the contents using the shadow DOM\n        document.body.appendChild(this._svgRoot);\n        const contentBounds = this._domElement.getBoundingClientRect();\n\n        this._svgRoot.remove();\n\n        const contentWidth = Math.min(this.maxWidth, Math.ceil(contentBounds.width));\n        const contentHeight = Math.min(this.maxHeight, Math.ceil(contentBounds.height));\n\n        this._svgRoot.setAttribute('width', contentWidth.toString());\n        this._svgRoot.setAttribute('height', contentHeight.toString());\n\n        // Undo the changes to the DOM element\n        if (text !== this._text)\n        {\n            this._domElement.innerHTML = this._text as string;\n        }\n        if (style !== this._style)\n        {\n            Object.assign(this._domElement, { style: this._style?.toCSS(resolution) });\n            this._styleElement.textContent = this._style?.toGlobalCSS() as string;\n        }\n\n        return {\n            width: contentWidth + (style.padding * 2),\n            height: contentHeight + (style.padding * 2),\n        };\n    }\n\n    /**\n     * Manually refresh the text.\n     * @public\n     * @param {boolean} respectDirty - Whether to abort updating the\n     *        text if the Text isn't dirty and the function is called.\n     */\n    async updateText(respectDirty = true): Promise<void>\n    {\n        const { style, _image: image, _loadImage: loadImage } = this;\n\n        // check if style has changed..\n        if (this.localStyleID !== style.styleID)\n        {\n            this.dirty = true;\n            this.localStyleID = style.styleID;\n        }\n\n        if (!this.dirty && respectDirty)\n        {\n            return;\n        }\n\n        const { width, height } = this.measureText();\n\n        // Make sure canvas is at least 1x1 so it drawable\n        // for sub-pixel sizes, round up to avoid clipping\n        // we update both images, to make sure bounds are correct synchronously\n        image.width = loadImage.width = Math.ceil((Math.max(1, width)));\n        image.height = loadImage.height = Math.ceil((Math.max(1, height)));\n\n        if (!this._loading)\n        {\n            this._loading = true;\n            await new Promise<void>((resolve) =>\n            {\n                loadImage.onload = async () =>\n                {\n                    // Fake waiting for the image to load\n                    await style.onBeforeDraw();\n                    this._loading = false;\n\n                    // Swap image and loadImage, we do this to avoid\n                    // flashes between updateText calls, usually when\n                    // the onload time is longer than updateText time\n                    image.src = loadImage.src;\n                    loadImage.onload = null;\n                    loadImage.src = '';\n\n                    // Force update the texture\n                    this.updateTexture();\n                    resolve();\n                };\n                const svgURL = new XMLSerializer().serializeToString(this._svgRoot);\n\n                loadImage.src = `data:image/svg+xml;charset=utf8,${encodeURIComponent(svgURL)}`;\n            });\n        }\n    }\n\n    /** The raw image element that is rendered under-the-hood. */\n    public get source(): HTMLImageElement\n    {\n        return this._image;\n    }\n\n    /**\n     * Update the texture resource.\n     * @private\n     */\n    updateTexture()\n    {\n        const { style, texture, _image: image, resolution } = this;\n        const { padding } = style;\n        const { baseTexture } = texture;\n\n        texture.trim.width = texture._frame.width = image.width / resolution;\n        texture.trim.height = texture._frame.height = image.height / resolution;\n        texture.trim.x = -padding;\n        texture.trim.y = -padding;\n\n        texture.orig.width = texture._frame.width - (padding * 2);\n        texture.orig.height = texture._frame.height - (padding * 2);\n\n        // call sprite onTextureUpdate to update scale if _width or _height were set\n        this._onTextureUpdate();\n\n        baseTexture.setRealSize(image.width, image.height, resolution);\n\n        this.dirty = false;\n    }\n\n    /**\n     * Renders the object using the WebGL renderer\n     * @param {PIXI.Renderer} renderer - The renderer\n     * @private\n     */\n    _render(renderer: Renderer)\n    {\n        if (this._autoResolution && this._resolution !== renderer.resolution)\n        {\n            this._resolution = renderer.resolution;\n            this.dirty = true;\n        }\n\n        this.updateText(true);\n\n        super._render(renderer);\n    }\n\n    /**\n     * Renders the object using the Canvas Renderer.\n     * @private\n     * @param {PIXI.CanvasRenderer} renderer - The renderer\n     */\n    _renderCanvas(renderer: IRenderer)\n    {\n        if (this._autoResolution && this._resolution !== renderer.resolution)\n        {\n            this._resolution = renderer.resolution;\n            this.dirty = true;\n        }\n\n        this.updateText(true);\n\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        super._renderCanvas(renderer);\n    }\n\n    /**\n     * Get the local bounds.\n     * @param {PIXI.Rectangle} rect - Input rectangle.\n     * @returns {PIXI.Rectangle} Local bounds\n     */\n    getLocalBounds(rect: Rectangle)\n    {\n        this.updateText(true);\n\n        return super.getLocalBounds(rect);\n    }\n\n    _calculateBounds()\n    {\n        this.updateText(true);\n        this.calculateVertices();\n        // if we have already done this on THIS frame.\n        (this as any)._bounds.addQuad(this.vertexData);\n    }\n\n    /**\n     * Handle dirty style changes\n     * @private\n     */\n    _onStyleChange()\n    {\n        this.dirty = true;\n    }\n\n    /**\n     * Destroy this Text object. Don't use after calling.\n     * @param {boolean|object} options - Same as Sprite destroy options.\n     */\n    destroy(options?: boolean | IDestroyOptions | undefined)\n    {\n        if (typeof options === 'boolean')\n        {\n            options = { children: options };\n        }\n\n        options = Object.assign({}, HTMLText.defaultDestroyOptions, options);\n\n        super.destroy(options);\n\n        const forceClear: any = null;\n\n        // Remove any loaded fonts if we created the HTMLTextStyle\n        if (this.ownsStyle)\n        {\n            this._style?.cleanFonts();\n        }\n        this._style = forceClear;\n        this._svgRoot?.remove();\n        this._svgRoot = forceClear;\n        this._domElement?.remove();\n        this._domElement = forceClear;\n        this._foreignObject?.remove();\n        this._foreignObject = forceClear;\n        this._styleElement?.remove();\n        this._styleElement = forceClear;\n\n        this._loadImage.src = '';\n        this._loadImage.onload = null;\n        this._loadImage = forceClear;\n        this._image.src = '';\n        this._image = forceClear;\n    }\n\n    /**\n     * Get the width in pixels.\n     * @member {number}\n     */\n    get width()\n    {\n        this.updateText(true);\n\n        return Math.abs(this.scale.x) * this._image.width / this.resolution;\n    }\n\n    set width(value) // eslint-disable-line require-jsdoc\n    {\n        this.updateText(true);\n\n        const s = utils.sign(this.scale.x) || 1;\n\n        this.scale.x = s * value / this._image.width / this.resolution;\n        this._width = value;\n    }\n\n    /**\n     * Get the height in pixels.\n     * @member {number}\n     */\n    get height()\n    {\n        this.updateText(true);\n\n        return Math.abs(this.scale.y) * this._image.height / this.resolution;\n    }\n\n    set height(value) // eslint-disable-line require-jsdoc\n    {\n        this.updateText(true);\n\n        const s = utils.sign(this.scale.y) || 1;\n\n        this.scale.y = s * value / this._image.height / this.resolution;\n        this._height = value;\n    }\n\n    /** The base style to render with text. */\n    get style(): HTMLTextStyle\n    {\n        return this._style as HTMLTextStyle;\n    }\n\n    set style(style: HTMLTextStyle | TextStyle | Partial<ITextStyle>) // eslint-disable-line require-jsdoc\n    {\n        // Don't do anything if we're re-assigning\n        if (this._style === style)\n        {\n            return;\n        }\n\n        style = style || {};\n\n        if (style instanceof HTMLTextStyle)\n        {\n            this.ownsStyle = false;\n            this._style = style;\n        }\n        // Clone TextStyle\n        else if (style instanceof TextStyle)\n        {\n            console.warn('[HTMLText] Cloning TextStyle, if this is not what you want, use HTMLTextStyle');\n\n            this.ownsStyle = true;\n            this._style = HTMLTextStyle.from(style);\n        }\n        else\n        {\n            this.ownsStyle = true;\n            this._style = new HTMLTextStyle(style);\n        }\n\n        this.localStyleID = -1;\n        this.dirty = true;\n    }\n\n    /**\n     * Contents of text. This can be HTML text and include tags.\n     * @example\n     * const text = new HTMLText('This is a <em>styled</em> text!');\n     * @member {string}\n     */\n    get text()\n    {\n        return this._text;\n    }\n\n    set text(text) // eslint-disable-line require-jsdoc\n    {\n        text = String(text === '' || text === null || text === undefined ? ' ' : text);\n        text = this.sanitiseText(text);\n\n        if (this._text === text)\n        {\n            return;\n        }\n        this._text = text;\n        this.dirty = true;\n    }\n\n    /**\n     * The resolution / device pixel ratio of the canvas.\n     * This is set to automatically match the renderer resolution by default, but can be overridden by setting manually.\n     * @member {number}\n     * @default 1\n     */\n    get resolution(): number\n    {\n        return this._resolution;\n    }\n\n    set resolution(value: number) // eslint-disable-line require-jsdoc\n    {\n        this._autoResolution = false;\n\n        if (this._resolution === value)\n        {\n            return;\n        }\n\n        this._resolution = value;\n        this.dirty = true;\n    }\n\n    /**\n     * Sanitise text - replace `<br>` with `<br/>`, `&nbsp;` with `&#160;`\n     * @param text\n     * @see https://www.sitepoint.com/community/t/xhtml-1-0-transitional-xml-parsing-error-entity-nbsp-not-defined/3392/3\n     */\n    private sanitiseText(text: string): string\n    {\n        return text\n            .replace(/<br>/gi, '<br/>')\n            .replace(/<hr>/gi, '<hr/>')\n            .replace(/&nbsp;/gi, '&#160;');\n    }\n}\n"],
  "mappings": "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",
  "names": ["fragment", "fragment", "fragment", "fragment", "fragment", "vertex", "vertex", "fragment", "fragment", "fragment", "extensions", "formats", "ext", "extensions2", "fragment", "vertex", "vertex", "fragment"]
}
